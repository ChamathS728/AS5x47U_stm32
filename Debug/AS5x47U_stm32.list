
AS5x47U_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000976c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08009a20  08009a20  00019a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f34  08009f34  00019f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f38  08009f38  00019f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  08009f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d8  240001d8  0800a114  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004b0  0800a114  000204b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016ea3  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002943  00000000  00000000  000370ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000012b0  00000000  00000000  00039a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e93  00000000  00000000  0003ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00031fb9  00000000  00000000  0003bb73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017ff6  00000000  00000000  0006db2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014534e  00000000  00000000  00085b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005f4c  00000000  00000000  001cae70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001d0dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009a04 	.word	0x08009a04

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	08009a04 	.word	0x08009a04

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <AS5x47U_init>:


/* Initialisation Functions */
AS5x47U* AS5x47U_init(SPI_HandleTypeDef* hspi, 
                      GPIO_TypeDef* enc_CS_port, 
                      uint16_t enc_CS_pin) {
 800069c:	b480      	push	{r7}
 800069e:	b087      	sub	sp, #28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	4613      	mov	r3, r2
 80006a8:	80fb      	strh	r3, [r7, #6]

    // Create handle
    AS5x47U* enc_ptr = NULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

    // SPI initialisation
    enc_ptr->hspi = hspi;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	601a      	str	r2, [r3, #0]
    enc_ptr->CS_port = enc_CS_port;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	609a      	str	r2, [r3, #8]
    enc_ptr->CS_pin = enc_CS_pin;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	819a      	strh	r2, [r3, #12]

    // Configuration information
    enc_ptr->rxBuffer[0] = 0;    // NOTE - 3 bytes in length for 24 bit transactions specifically
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2200      	movs	r2, #0
 80006c4:	739a      	strb	r2, [r3, #14]
    enc_ptr->rxBuffer[1] = 0;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2200      	movs	r2, #0
 80006ca:	73da      	strb	r2, [r3, #15]

    // Actual data stored away
    enc_ptr->velocity = 0;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	f04f 0200 	mov.w	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
    enc_ptr->angle_comp = 0;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f04f 0200 	mov.w	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
    enc_ptr->angle_uncomp = 0;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	f04f 0200 	mov.w	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
    enc_ptr->CORDIC_mag = 0;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	f04f 0200 	mov.w	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]

    // Calibration information
    

    return enc_ptr;
 80006ec:	697b      	ldr	r3, [r7, #20]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	371c      	adds	r7, #28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	0000      	movs	r0, r0
 80006fc:	0000      	movs	r0, r0
	...

08000700 <AS5x47U_readPositionDAE>:

/* Data Acquistion Functions */
HAL_StatusTypeDef AS5x47U_readPositionDAE(AS5x47U* enc_ptr) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
    // Initialise variables
    int16_t posRaw;

    // Read the angle compensated register
    HAL_StatusTypeDef result = AS5x47U_readRegister(enc_ptr, ANGLECOM, &posRaw);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	461a      	mov	r2, r3
 800070e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 f88b 	bl	800082e <AS5x47U_readRegister>
 8000718:	4603      	mov	r3, r0
 800071a:	73fb      	strb	r3, [r7, #15]

    // Convert velRaw into actual value
    enc_ptr->angle_comp = (float) posRaw/16384. * 360.;
 800071c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000720:	ee07 3a90 	vmov	s15, r3
 8000724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000728:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800072c:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000750 <AS5x47U_readPositionDAE+0x50>
 8000730:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000734:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000758 <AS5x47U_readPositionDAE+0x58>
 8000738:	ee27 7b06 	vmul.f64	d7, d7, d6
 800073c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	edc3 7a05 	vstr	s15, [r3, #20]

    return result;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	00000000 	.word	0x00000000
 8000754:	40d00000 	.word	0x40d00000
 8000758:	00000000 	.word	0x00000000
 800075c:	40768000 	.word	0x40768000

08000760 <AS5x47U_readERRFL>:
    enc_ptr->angle_comp = (float) velRaw/16384. * 360.;

    return result;    
}

HAL_StatusTypeDef AS5x47U_readERRFL(AS5x47U* enc_ptr) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
        bit 2   : P2ram warning -> ECC is correcting one bit of P2ram in customer area
        bit 1   : MagHalf -> 
        bit 0   : Agc-warning -> AGC value is 0LSB or 255LSB
    */

    int16_t* temp = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
    HAL_StatusTypeDef result = AS5x47U_readRegister(enc_ptr, ERRFL, temp);
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	2101      	movs	r1, #1
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f85c 	bl	800082e <AS5x47U_readRegister>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]
    uint16_t blah = (uint16_t) *temp;
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000780:	81bb      	strh	r3, [r7, #12]
    // Store the individual bits in an array
    for (int i = 0; i < 11; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	e016      	b.n	80007b6 <AS5x47U_readERRFL+0x56>
      uint16_t sieve = (1 << i);
 8000788:	2201      	movs	r2, #1
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	817b      	strh	r3, [r7, #10]
      enc_ptr->errReg[i] = (uint8_t) ((blah & sieve) >> i);    // Cast temp back to uint16_t
 8000792:	89ba      	ldrh	r2, [r7, #12]
 8000794:	897b      	ldrh	r3, [r7, #10]
 8000796:	4013      	ands	r3, r2
 8000798:	b29b      	uxth	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa42 f303 	asr.w	r3, r2, r3
 80007a2:	b2d9      	uxtb	r1, r3
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	4413      	add	r3, r2
 80007aa:	3328      	adds	r3, #40	; 0x28
 80007ac:	460a      	mov	r2, r1
 80007ae:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 11; i++) {
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	3301      	adds	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	2b0a      	cmp	r3, #10
 80007ba:	dde5      	ble.n	8000788 <AS5x47U_readERRFL+0x28>
    } 

    return result;   
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <AS5x47U_readDIA>:

HAL_StatusTypeDef AS5x47U_readDIA(AS5x47U* enc_ptr) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
        bit 2   : Cordic_overflow -> Error flag CORDIC overflow
        bit 1   : LoopsFinished -> All magneto core loops finished
        bit 0   : Vdd_mode -> VDD supply mode:
    */

    int16_t* temp = NULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
    HAL_StatusTypeDef result = AS5x47U_readRegister(enc_ptr, DIA, temp);
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	f643 71f5 	movw	r1, #16373	; 0x3ff5
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f828 	bl	800082e <AS5x47U_readRegister>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
    uint16_t blah = (uint16_t) *temp;
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e8:	81bb      	strh	r3, [r7, #12]
    // Store the individual bits in an array
    for (int i = 0; i < 13; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e016      	b.n	800081e <AS5x47U_readDIA+0x58>
      uint16_t sieve = (1 << i);
 80007f0:	2201      	movs	r2, #1
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	817b      	strh	r3, [r7, #10]
      enc_ptr->diaReg[i] = (uint8_t) ((blah & sieve) >> i);    // Cast temp back to uint16_t
 80007fa:	89ba      	ldrh	r2, [r7, #12]
 80007fc:	897b      	ldrh	r3, [r7, #10]
 80007fe:	4013      	ands	r3, r2
 8000800:	b29b      	uxth	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa42 f303 	asr.w	r3, r2, r3
 800080a:	b2d9      	uxtb	r1, r3
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	4413      	add	r3, r2
 8000812:	3333      	adds	r3, #51	; 0x33
 8000814:	460a      	mov	r2, r1
 8000816:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 13; i++) {
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3301      	adds	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	2b0c      	cmp	r3, #12
 8000822:	dde5      	ble.n	80007f0 <AS5x47U_readDIA+0x2a>
    } 

    return result;   
 8000824:	7bfb      	ldrb	r3, [r7, #15]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <AS5x47U_readRegister>:

/* Low Level Functions */
// NOTE - SPI commands here work with 24bit frames for CRC 8bit checks + we don't need the speed of 16bit frames
HAL_StatusTypeDef AS5x47U_readRegister(AS5x47U* enc_ptr, 
                                       uint16_t reg_addr, 
                                       int16_t* output) {
 800082e:	b580      	push	{r7, lr}
 8000830:	b088      	sub	sp, #32
 8000832:	af02      	add	r7, sp, #8
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	460b      	mov	r3, r1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	817b      	strh	r3, [r7, #10]
    
    // create txBuffer with address
    uint8_t txBuffer[2];
    reg_addr = reg_addr | 0x4000; // Set RW bit to 1 for read
 800083c:	897b      	ldrh	r3, [r7, #10]
 800083e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000842:	817b      	strh	r3, [r7, #10]
    txBuffer[0] = (uint8_t) (reg_addr >> 8);
 8000844:	897b      	ldrh	r3, [r7, #10]
 8000846:	0a1b      	lsrs	r3, r3, #8
 8000848:	b29b      	uxth	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = (uint8_t) (reg_addr % 256);
 800084e:	897b      	ldrh	r3, [r7, #10]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	747b      	strb	r3, [r7, #17]
    
    if (enc_ptr->hspi->State != HAL_SPI_STATE_READY) {
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b01      	cmp	r3, #1
 8000860:	d001      	beq.n	8000866 <AS5x47U_readRegister+0x38>
    	return HAL_BUSY;
 8000862:	2302      	movs	r3, #2
 8000864:	e078      	b.n	8000958 <AS5x47U_readRegister+0x12a>
    }

    // Send 16-bit buffer with address 
    HAL_GPIO_WritePin(enc_ptr->CS_port, enc_ptr->CS_pin, GPIO_PIN_RESET);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	6898      	ldr	r0, [r3, #8]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	899b      	ldrh	r3, [r3, #12]
 800086e:	2200      	movs	r2, #0
 8000870:	4619      	mov	r1, r3
 8000872:	f001 facd 	bl	8001e10 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef result = HAL_SPI_TransmitReceive(enc_ptr->hspi,
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6818      	ldr	r0, [r3, #0]
                                                txBuffer,
												enc_ptr->rxBuffer,
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f103 020e 	add.w	r2, r3, #14
    HAL_StatusTypeDef result = HAL_SPI_TransmitReceive(enc_ptr->hspi,
 8000880:	f107 0110 	add.w	r1, r7, #16
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2302      	movs	r3, #2
 800088c:	f004 f9f6 	bl	8004c7c <HAL_SPI_TransmitReceive>
 8000890:	4603      	mov	r3, r0
 8000892:	75fb      	strb	r3, [r7, #23]
                                                2, 
                                                HAL_MAX_DELAY);

    HAL_GPIO_WritePin(enc_ptr->CS_port, enc_ptr->CS_pin, GPIO_PIN_SET);
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6898      	ldr	r0, [r3, #8]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	899b      	ldrh	r3, [r3, #12]
 800089c:	2201      	movs	r2, #1
 800089e:	4619      	mov	r1, r3
 80008a0:	f001 fab6 	bl	8001e10 <HAL_GPIO_WritePin>

    if (enc_ptr->hspi->State != HAL_SPI_STATE_READY) {
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d001      	beq.n	80008b6 <AS5x47U_readRegister+0x88>
    	return HAL_BUSY;
 80008b2:	2302      	movs	r3, #2
 80008b4:	e050      	b.n	8000958 <AS5x47U_readRegister+0x12a>
    }

    // recreate txBuffer with NOP address
    uint16_t temp = NOP | 0x4000;
 80008b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008ba:	82bb      	strh	r3, [r7, #20]
    txBuffer[0] = (uint8_t) (temp >> 8);
 80008bc:	8abb      	ldrh	r3, [r7, #20]
 80008be:	0a1b      	lsrs	r3, r3, #8
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = (uint8_t) (temp % 256);
 80008c6:	8abb      	ldrh	r3, [r7, #20]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	747b      	strb	r3, [r7, #17]

    // Send 16-bit buffer with NOP address and receive simultaneously
    HAL_GPIO_WritePin(enc_ptr->CS_port, enc_ptr->CS_pin, GPIO_PIN_RESET);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6898      	ldr	r0, [r3, #8]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	899b      	ldrh	r3, [r3, #12]
 80008d4:	2200      	movs	r2, #0
 80008d6:	4619      	mov	r1, r3
 80008d8:	f001 fa9a 	bl	8001e10 <HAL_GPIO_WritePin>
    result = HAL_SPI_TransmitReceive(enc_ptr->hspi, 
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6818      	ldr	r0, [r3, #0]
                                     txBuffer, 
                                     enc_ptr->rxBuffer, 
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f103 020e 	add.w	r2, r3, #14
    result = HAL_SPI_TransmitReceive(enc_ptr->hspi, 
 80008e6:	f107 0110 	add.w	r1, r7, #16
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2302      	movs	r3, #2
 80008f2:	f004 f9c3 	bl	8004c7c <HAL_SPI_TransmitReceive>
 80008f6:	4603      	mov	r3, r0
 80008f8:	75fb      	strb	r3, [r7, #23]
                                     2, 
									 HAL_MAX_DELAY);
    HAL_GPIO_WritePin(enc_ptr->CS_port, enc_ptr->CS_pin, GPIO_PIN_SET);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6898      	ldr	r0, [r3, #8]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	899b      	ldrh	r3, [r3, #12]
 8000902:	2201      	movs	r2, #1
 8000904:	4619      	mov	r1, r3
 8000906:	f001 fa83 	bl	8001e10 <HAL_GPIO_WritePin>

    if (enc_ptr->hspi->State != HAL_SPI_STATE_READY) {
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b01      	cmp	r3, #1
 8000916:	d001      	beq.n	800091c <AS5x47U_readRegister+0xee>
    	return HAL_BUSY;
 8000918:	2302      	movs	r3, #2
 800091a:	e01d      	b.n	8000958 <AS5x47U_readRegister+0x12a>
    }

    // Put the contents of the rxBuffer into the output
    uint8_t data = enc_ptr->rxBuffer[0] % 64;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	7b9b      	ldrb	r3, [r3, #14]
 8000920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000924:	74fb      	strb	r3, [r7, #19]
    *output = (int16_t) (data << 8) | (enc_ptr->rxBuffer[1]);
 8000926:	7cfb      	ldrb	r3, [r7, #19]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21a      	sxth	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	7bdb      	ldrb	r3, [r3, #15]
 8000930:	b21b      	sxth	r3, r3
 8000932:	4313      	orrs	r3, r2
 8000934:	b21a      	sxth	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	801a      	strh	r2, [r3, #0]

    // Check the warning and error bits
    enc_ptr->warningBit = (enc_ptr->rxBuffer[0] & 0x80) >> 7;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	7b9b      	ldrb	r3, [r3, #14]
 800093e:	09db      	lsrs	r3, r3, #7
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
    enc_ptr->errorBit = (enc_ptr->rxBuffer[0] & 0x40) >> 6;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	7b9b      	ldrb	r3, [r3, #14]
 800094c:	119b      	asrs	r3, r3, #6
 800094e:	f003 0201 	and.w	r2, r3, #1
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	621a      	str	r2, [r3, #32]

    return result;
 8000956:	7dfb      	ldrb	r3, [r7, #23]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <AS5x47U_printERRFL>:
    
    return result;
}
*/

void AS5x47U_printERRFL(AS5x47U* enc_ptr, UART_HandleTypeDef* huart) {
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	b0f5      	sub	sp, #468	; 0x1d4
 8000964:	af0a      	add	r7, sp, #40	; 0x28
 8000966:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800096a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800096e:	6018      	str	r0, [r3, #0]
 8000970:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000974:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000978:	6019      	str	r1, [r3, #0]
	float MSG[100] = {'\0'}; // NULL terminated string for printing
 800097a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800097e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000982:	4618      	mov	r0, r3
 8000984:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000988:	461a      	mov	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f006 ffc7 	bl	800791e <memset>
    AS5x47U_readERRFL(enc_ptr);
 8000990:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000994:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	f7ff fee1 	bl	8000760 <AS5x47U_readERRFL>
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 800099e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80009a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 80009ac:	469c      	mov	ip, r3
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 80009ae:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80009b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 80009bc:	469e      	mov	lr, r3
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 80009be:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80009c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 80009cc:	461a      	mov	r2, r3
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 80009ce:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80009d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 80009dc:	4619      	mov	r1, r3
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 80009de:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80009e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 80009ec:	461c      	mov	r4, r3
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 80009ee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80009f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 80009fc:	461d      	mov	r5, r3
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 80009fe:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000a02:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000a0c:	461e      	mov	r6, r3
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 8000a0e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000a12:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000a1c:	60fb      	str	r3, [r7, #12]
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 8000a1e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000a22:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000a2c:	60bb      	str	r3, [r7, #8]
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 8000a2e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000a32:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000a3c:	607b      	str	r3, [r7, #4]
            enc_ptr->errReg[10], enc_ptr->errReg[9], enc_ptr->errReg[8], enc_ptr->errReg[7], enc_ptr->errReg[6], enc_ptr->errReg[5], enc_ptr->errReg[4], enc_ptr->errReg[3], enc_ptr->errReg[2], enc_ptr->errReg[1], enc_ptr->errReg[0]);
 8000a3e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000a42:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    sprintf(MSG, "ERRFL register:\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000a4c:	f107 0018 	add.w	r0, r7, #24
 8000a50:	9308      	str	r3, [sp, #32]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	9307      	str	r3, [sp, #28]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	9306      	str	r3, [sp, #24]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	9305      	str	r3, [sp, #20]
 8000a5e:	9604      	str	r6, [sp, #16]
 8000a60:	9503      	str	r5, [sp, #12]
 8000a62:	9402      	str	r4, [sp, #8]
 8000a64:	9101      	str	r1, [sp, #4]
 8000a66:	9200      	str	r2, [sp, #0]
 8000a68:	4673      	mov	r3, lr
 8000a6a:	4662      	mov	r2, ip
 8000a6c:	4909      	ldr	r1, [pc, #36]	; (8000a94 <AS5x47U_printERRFL+0x134>)
 8000a6e:	f006 fef3 	bl	8007858 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*) MSG, sizeof(MSG), 100);
 8000a72:	f107 0118 	add.w	r1, r7, #24
 8000a76:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000a7a:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a84:	6800      	ldr	r0, [r0, #0]
 8000a86:	f004 ffd3 	bl	8005a30 <HAL_UART_Transmit>
}
 8000a8a:	bf00      	nop
 8000a8c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a94:	08009a20 	.word	0x08009a20

08000a98 <AS5x47U_printDIA>:

void AS5x47U_printDIA(AS5x47U* enc_ptr, UART_HandleTypeDef* huart) {
 8000a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9a:	b0f9      	sub	sp, #484	; 0x1e4
 8000a9c:	af0c      	add	r7, sp, #48	; 0x30
 8000a9e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000aa2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000aa6:	6018      	str	r0, [r3, #0]
 8000aa8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000aac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000ab0:	6019      	str	r1, [r3, #0]
	float MSG[100] = {'\0'}; // NULL terminated string for printing
 8000ab2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000ab6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000aba:	4618      	mov	r0, r3
 8000abc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f006 ff2b 	bl	800791e <memset>
    AS5x47U_readDIA(enc_ptr);
 8000ac8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000acc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	f7ff fe78 	bl	80007c6 <AS5x47U_readDIA>
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000ad6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000ada:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000ae4:	469c      	mov	ip, r3
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000ae6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000aea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000af4:	469e      	mov	lr, r3
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000af6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000afa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b04:	461a      	mov	r2, r3
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b06:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b14:	4619      	mov	r1, r3
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b16:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b24:	461c      	mov	r4, r3
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b26:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b34:	461d      	mov	r5, r3
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b36:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b44:	461e      	mov	r6, r3
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b46:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b4a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b54:	617b      	str	r3, [r7, #20]
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b56:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b5a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b64:	613b      	str	r3, [r7, #16]
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b66:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b74:	60fb      	str	r3, [r7, #12]
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b76:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b7a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b84:	60bb      	str	r3, [r7, #8]
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b86:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b8a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000b94:	607b      	str	r3, [r7, #4]
            enc_ptr->diaReg[12], enc_ptr->diaReg[11], enc_ptr->diaReg[10], enc_ptr->diaReg[9], enc_ptr->diaReg[8], enc_ptr->diaReg[7], enc_ptr->diaReg[6], enc_ptr->diaReg[5], enc_ptr->diaReg[4], enc_ptr->diaReg[3], enc_ptr->diaReg[2], enc_ptr->diaReg[1], enc_ptr->diaReg[0]);
 8000b96:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000b9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
    sprintf(MSG, "DIA register:\r\nBit 12: %d\r\nBit 11: %d\r\nBit 10: %d\r\nBit 9: %d\r\nBit 8: %d\r\nBit 7: %d\r\nBit 6: %d\r\nBit 5: %d\r\nBit 4: %d\r\nBit 3: %d\r\nBit 2: %d\r\nBit 1: %d\r\nBit 0: %d\r\n\n",
 8000ba4:	f107 0020 	add.w	r0, r7, #32
 8000ba8:	930a      	str	r3, [sp, #40]	; 0x28
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	9309      	str	r3, [sp, #36]	; 0x24
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	9308      	str	r3, [sp, #32]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	9307      	str	r3, [sp, #28]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	9306      	str	r3, [sp, #24]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	9305      	str	r3, [sp, #20]
 8000bbe:	9604      	str	r6, [sp, #16]
 8000bc0:	9503      	str	r5, [sp, #12]
 8000bc2:	9402      	str	r4, [sp, #8]
 8000bc4:	9101      	str	r1, [sp, #4]
 8000bc6:	9200      	str	r2, [sp, #0]
 8000bc8:	4673      	mov	r3, lr
 8000bca:	4662      	mov	r2, ip
 8000bcc:	4909      	ldr	r1, [pc, #36]	; (8000bf4 <AS5x47U_printDIA+0x15c>)
 8000bce:	f006 fe43 	bl	8007858 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*) MSG, sizeof(MSG), 100);    
 8000bd2:	f107 0120 	add.w	r1, r7, #32
 8000bd6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000bda:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8000bde:	2364      	movs	r3, #100	; 0x64
 8000be0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000be4:	6800      	ldr	r0, [r0, #0]
 8000be6:	f004 ff23 	bl	8005a30 <HAL_UART_Transmit>
}
 8000bea:	bf00      	nop
 8000bec:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf4:	08009ab0 	.word	0x08009ab0

08000bf8 <micros>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros(TIM_HandleTypeDef *timer) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(timer);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b0b0      	sub	sp, #192	; 0xc0
 8000c18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1a:	f000 fdaf 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1e:	f000 f881 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c22:	f000 f9ed 	bl	8001000 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c26:	f000 f997 	bl	8000f58 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000c2a:	f000 f9e1 	bl	8000ff0 <MX_USB_OTG_HS_USB_Init>
  MX_SPI4_Init();
 8000c2e:	f000 f8ef 	bl	8000e10 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000c32:	f000 f943 	bl	8000ebc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Set up an AS5x47U instance and initialise it
  AS5x47U* enc_ptr = AS5x47U_init(&hspi4, SPI4_CS_GPIO_Port, SPI4_CS_Pin);
 8000c36:	2210      	movs	r2, #16
 8000c38:	4934      	ldr	r1, [pc, #208]	; (8000d0c <main+0xf8>)
 8000c3a:	4835      	ldr	r0, [pc, #212]	; (8000d10 <main+0xfc>)
 8000c3c:	f7ff fd2e 	bl	800069c <AS5x47U_init>
 8000c40:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  HAL_TIM_Base_Start(&htim2);
 8000c44:	4833      	ldr	r0, [pc, #204]	; (8000d14 <main+0x100>)
 8000c46:	f004 fb75 	bl	8005334 <HAL_TIM_Base_Start>
  // Set up buffer for printing
  float MSG[40] = {'\0'}; // NULL terminated string for printing
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	22a0      	movs	r2, #160	; 0xa0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f006 fe64 	bl	800791e <memset>
  float X = 0.0;
 8000c56:	f04f 0300 	mov.w	r3, #0
 8000c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t ENC_TIME = 1000000; // 1 second
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <main+0x104>)
 8000c60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t prevTime = micros(&htim2);
 8000c64:	482b      	ldr	r0, [pc, #172]	; (8000d14 <main+0x100>)
 8000c66:	f7ff ffc7 	bl	8000bf8 <micros>
 8000c6a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	uint32_t currentTime = micros(&htim2);
 8000c6e:	4829      	ldr	r0, [pc, #164]	; (8000d14 <main+0x100>)
 8000c70:	f7ff ffc2 	bl	8000bf8 <micros>
 8000c74:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	if (currentTime - prevTime >= ENC_TIME) {
 8000c78:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000c7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d8f1      	bhi.n	8000c6e <main+0x5a>

	    // Read the position
	    AS5x47U_readPositionDAE(enc_ptr);
 8000c8a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000c8e:	f7ff fd37 	bl	8000700 <AS5x47U_readPositionDAE>
	    X = enc_ptr->angle_comp;
 8000c92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac


	    HAL_Delay(100);
 8000c9c:	2064      	movs	r0, #100	; 0x64
 8000c9e:	f000 fdff 	bl	80018a0 <HAL_Delay>

		if (!(enc_ptr->errorBit || enc_ptr->warningBit)) {
 8000ca2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d11c      	bne.n	8000ce6 <main+0xd2>
 8000cac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d117      	bne.n	8000ce6 <main+0xd2>
			sprintf(MSG, "X = %.2f\r\nWarning bit: %d\r\nError bit: %d\r\n",
 8000cb6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8000cba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000cc8:	6a12      	ldr	r2, [r2, #32]
 8000cca:	1d38      	adds	r0, r7, #4
 8000ccc:	9201      	str	r2, [sp, #4]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	ec53 2b17 	vmov	r2, r3, d7
 8000cd4:	4911      	ldr	r1, [pc, #68]	; (8000d1c <main+0x108>)
 8000cd6:	f006 fdbf 	bl	8007858 <siprintf>
				  X, enc_ptr->warningBit, enc_ptr->errorBit);
			HAL_UART_Transmit(&huart3, (uint8_t*) MSG, sizeof(MSG), 100);
 8000cda:	1d39      	adds	r1, r7, #4
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	22a0      	movs	r2, #160	; 0xa0
 8000ce0:	480f      	ldr	r0, [pc, #60]	; (8000d20 <main+0x10c>)
 8000ce2:	f004 fea5 	bl	8005a30 <HAL_UART_Transmit>
		}

		HAL_Delay(100);
 8000ce6:	2064      	movs	r0, #100	; 0x64
 8000ce8:	f000 fdda 	bl	80018a0 <HAL_Delay>

	    AS5x47U_printERRFL(enc_ptr, &huart3);
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <main+0x10c>)
 8000cee:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000cf2:	f7ff fe35 	bl	8000960 <AS5x47U_printERRFL>
	    AS5x47U_printDIA(enc_ptr, &huart3);
 8000cf6:	490a      	ldr	r1, [pc, #40]	; (8000d20 <main+0x10c>)
 8000cf8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000cfc:	f7ff fecc 	bl	8000a98 <AS5x47U_printDIA>

	    prevTime = micros(&htim2);
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <main+0x100>)
 8000d02:	f7ff ff79 	bl	8000bf8 <micros>
 8000d06:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  {
 8000d0a:	e7b0      	b.n	8000c6e <main+0x5a>
 8000d0c:	58021000 	.word	0x58021000
 8000d10:	240001f4 	.word	0x240001f4
 8000d14:	2400027c 	.word	0x2400027c
 8000d18:	000f4240 	.word	0x000f4240
 8000d1c:	08009b54 	.word	0x08009b54
 8000d20:	240002c8 	.word	0x240002c8

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b09c      	sub	sp, #112	; 0x70
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	224c      	movs	r2, #76	; 0x4c
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f006 fdf3 	bl	800791e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f006 fded 	bl	800791e <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <SystemClock_Config+0xe4>)
 8000d46:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f001 f878 	bl	8001e44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <SystemClock_Config+0xe8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <SystemClock_Config+0xe8>)
 8000d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <SystemClock_Config+0xe8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d70:	bf00      	nop
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <SystemClock_Config+0xe8>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d7e:	d1f8      	bne.n	8000d72 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d80:	2321      	movs	r3, #33	; 0x21
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	2302      	movs	r3, #2
 8000d94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000d9a:	2318      	movs	r3, #24
 8000d9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da2:	2304      	movs	r3, #4
 8000da4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000daa:	230c      	movs	r3, #12
 8000dac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 f89c 	bl	8001ef8 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000dc6:	f000 fa35 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	233f      	movs	r3, #63	; 0x3f
 8000dcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2102      	movs	r1, #2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fcb4 	bl	800275c <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000dfa:	f000 fa1b 	bl	8001234 <Error_Handler>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3770      	adds	r7, #112	; 0x70
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58024800 	.word	0x58024800

08000e10 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e16:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <MX_SPI4_Init+0xa8>)
 8000e18:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e20:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e3a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e42:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e4a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_SPI4_Init+0xa4>)
 8000ea2:	f003 fdc7 	bl	8004a34 <HAL_SPI_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000eac:	f000 f9c2 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	240001f4 	.word	0x240001f4
 8000eb8:	40013400 	.word	0x40013400

08000ebc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000ee4:	225f      	movs	r2, #95	; 0x5f
 8000ee6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f02:	4814      	ldr	r0, [pc, #80]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000f04:	f004 f9bf 	bl	8005286 <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f0e:	f000 f991 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000f20:	f004 fa78 	bl	8005414 <HAL_TIM_ConfigClockSource>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f2a:	f000 f983 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000f3c:	f004 fc9a 	bl	8005874 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f46:	f000 f975 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2400027c 	.word	0x2400027c

08000f58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <MX_USART3_UART_Init+0x94>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fa0:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000fa2:	f004 fcf5 	bl	8005990 <HAL_UART_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fac:	f000 f942 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000fb4:	f005 fe89 	bl	8006cca <HAL_UARTEx_SetTxFifoThreshold>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fbe:	f000 f939 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000fc6:	f005 febe 	bl	8006d46 <HAL_UARTEx_SetRxFifoThreshold>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fd0:	f000 f930 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_USART3_UART_Init+0x90>)
 8000fd6:	f005 fe3f 	bl	8006c58 <HAL_UARTEx_DisableFifoMode>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fe0:	f000 f928 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	240002c8 	.word	0x240002c8
 8000fec:	40004800 	.word	0x40004800

08000ff0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001016:	4b80      	ldr	r3, [pc, #512]	; (8001218 <MX_GPIO_Init+0x218>)
 8001018:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800101c:	4a7e      	ldr	r2, [pc, #504]	; (8001218 <MX_GPIO_Init+0x218>)
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001026:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <MX_GPIO_Init+0x218>)
 8001028:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	623b      	str	r3, [r7, #32]
 8001032:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b78      	ldr	r3, [pc, #480]	; (8001218 <MX_GPIO_Init+0x218>)
 8001036:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103a:	4a77      	ldr	r2, [pc, #476]	; (8001218 <MX_GPIO_Init+0x218>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001044:	4b74      	ldr	r3, [pc, #464]	; (8001218 <MX_GPIO_Init+0x218>)
 8001046:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001052:	4b71      	ldr	r3, [pc, #452]	; (8001218 <MX_GPIO_Init+0x218>)
 8001054:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001058:	4a6f      	ldr	r2, [pc, #444]	; (8001218 <MX_GPIO_Init+0x218>)
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001062:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <MX_GPIO_Init+0x218>)
 8001064:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001070:	4b69      	ldr	r3, [pc, #420]	; (8001218 <MX_GPIO_Init+0x218>)
 8001072:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001076:	4a68      	ldr	r2, [pc, #416]	; (8001218 <MX_GPIO_Init+0x218>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <MX_GPIO_Init+0x218>)
 8001082:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b62      	ldr	r3, [pc, #392]	; (8001218 <MX_GPIO_Init+0x218>)
 8001090:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001094:	4a60      	ldr	r2, [pc, #384]	; (8001218 <MX_GPIO_Init+0x218>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800109e:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <MX_GPIO_Init+0x218>)
 80010a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ac:	4b5a      	ldr	r3, [pc, #360]	; (8001218 <MX_GPIO_Init+0x218>)
 80010ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b2:	4a59      	ldr	r2, [pc, #356]	; (8001218 <MX_GPIO_Init+0x218>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010bc:	4b56      	ldr	r3, [pc, #344]	; (8001218 <MX_GPIO_Init+0x218>)
 80010be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ca:	4b53      	ldr	r3, [pc, #332]	; (8001218 <MX_GPIO_Init+0x218>)
 80010cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <MX_GPIO_Init+0x218>)
 80010d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010da:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <MX_GPIO_Init+0x218>)
 80010dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <MX_GPIO_Init+0x218>)
 80010ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ee:	4a4a      	ldr	r2, [pc, #296]	; (8001218 <MX_GPIO_Init+0x218>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010f8:	4b47      	ldr	r3, [pc, #284]	; (8001218 <MX_GPIO_Init+0x218>)
 80010fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2112      	movs	r1, #18
 800110a:	4844      	ldr	r0, [pc, #272]	; (800121c <MX_GPIO_Init+0x21c>)
 800110c:	f000 fe80 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001116:	4842      	ldr	r0, [pc, #264]	; (8001220 <MX_GPIO_Init+0x220>)
 8001118:	f000 fe7a 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f244 0141 	movw	r1, #16449	; 0x4041
 8001122:	4840      	ldr	r0, [pc, #256]	; (8001224 <MX_GPIO_Init+0x224>)
 8001124:	f000 fe74 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|LD2_Pin;
 8001128:	2312      	movs	r3, #18
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	4837      	ldr	r0, [pc, #220]	; (800121c <MX_GPIO_Init+0x21c>)
 8001140:	f000 fcb6 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4833      	ldr	r0, [pc, #204]	; (8001228 <MX_GPIO_Init+0x228>)
 800115a:	f000 fca9 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800115e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	482a      	ldr	r0, [pc, #168]	; (8001220 <MX_GPIO_Init+0x220>)
 8001178:	f000 fc9a 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin;
 800117c:	f244 0341 	movw	r3, #16449	; 0x4041
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	4823      	ldr	r0, [pc, #140]	; (8001224 <MX_GPIO_Init+0x224>)
 8001196:	f000 fc8b 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	481f      	ldr	r0, [pc, #124]	; (800122c <MX_GPIO_Init+0x22c>)
 80011b0:	f000 fc7e 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80011b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	4819      	ldr	r0, [pc, #100]	; (8001230 <MX_GPIO_Init+0x230>)
 80011ca:	f000 fc71 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80011ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80011e0:	230a      	movs	r3, #10
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	4811      	ldr	r0, [pc, #68]	; (8001230 <MX_GPIO_Init+0x230>)
 80011ec:	f000 fc60 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80011f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_GPIO_Init+0x230>)
 800120a:	f000 fc51 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800120e:	bf00      	nop
 8001210:	3738      	adds	r7, #56	; 0x38
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	58024400 	.word	0x58024400
 800121c:	58021000 	.word	0x58021000
 8001220:	58021400 	.word	0x58021400
 8001224:	58020400 	.word	0x58020400
 8001228:	58020800 	.word	0x58020800
 800122c:	58021800 	.word	0x58021800
 8001230:	58020000 	.word	0x58020000

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_MspInit+0x30>)
 8001248:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800124c:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_MspInit+0x30>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_MspInit+0x30>)
 8001258:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	58024400 	.word	0x58024400

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0ba      	sub	sp, #232	; 0xe8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	22c0      	movs	r2, #192	; 0xc0
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f006 fb42 	bl	800791e <memset>
  if(hspi->Instance==SPI4)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a26      	ldr	r2, [pc, #152]	; (8001338 <HAL_SPI_MspInit+0xc4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d144      	bne.n	800132e <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80012a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 fddb 	bl	8002e74 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80012c4:	f7ff ffb6 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_SPI_MspInit+0xc8>)
 80012ca:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012ce:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_SPI_MspInit+0xc8>)
 80012d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_SPI_MspInit+0xc8>)
 80012da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_SPI_MspInit+0xc8>)
 80012e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <HAL_SPI_MspInit+0xc8>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_SPI_MspInit+0xc8>)
 80012f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001304:	2364      	movs	r3, #100	; 0x64
 8001306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800131c:	2305      	movs	r3, #5
 800131e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001322:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_SPI_MspInit+0xcc>)
 800132a:	f000 fbc1 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	37e8      	adds	r7, #232	; 0xe8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40013400 	.word	0x40013400
 800133c:	58024400 	.word	0x58024400
 8001340:	58021000 	.word	0x58021000

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d10e      	bne.n	8001374 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_TIM_Base_MspInit+0x3c>)
 8001358:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800135c:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_TIM_Base_MspInit+0x3c>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_TIM_Base_MspInit+0x3c>)
 8001368:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	58024400 	.word	0x58024400

08001384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0ba      	sub	sp, #232	; 0xe8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	22c0      	movs	r2, #192	; 0xc0
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 faba 	bl	800791e <memset>
  if(huart->Instance==USART3)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a27      	ldr	r2, [pc, #156]	; (800144c <HAL_UART_MspInit+0xc8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d146      	bne.n	8001442 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b4:	f04f 0202 	mov.w	r2, #2
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fd52 	bl	8002e74 <HAL_RCCEx_PeriphCLKConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013d6:	f7ff ff2d 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_UART_MspInit+0xcc>)
 80013dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <HAL_UART_MspInit+0xcc>)
 80013e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_UART_MspInit+0xcc>)
 80013ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_UART_MspInit+0xcc>)
 80013fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_UART_MspInit+0xcc>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_UART_MspInit+0xcc>)
 800140a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001430:	2307      	movs	r3, #7
 8001432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001436:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_UART_MspInit+0xd0>)
 800143e:	f000 fb37 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	37e8      	adds	r7, #232	; 0xe8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40004800 	.word	0x40004800
 8001450:	58024400 	.word	0x58024400
 8001454:	58020c00 	.word	0x58020c00

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800145c:	e7fe      	b.n	800145c <NMI_Handler+0x4>

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f9dc 	bl	8001860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	return 1;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_kill>:

int _kill(int pid, int sig)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014c6:	f006 fa7d 	bl	80079c4 <__errno>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2216      	movs	r2, #22
 80014ce:	601a      	str	r2, [r3, #0]
	return -1;
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_exit>:

void _exit (int status)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ffe7 	bl	80014bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ee:	e7fe      	b.n	80014ee <_exit+0x12>

080014f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
	}

return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
	}
	return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158a:	605a      	str	r2, [r3, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_isatty>:

int _isatty(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f006 f9e2 	bl	80079c4 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	24100000 	.word	0x24100000
 800162c:	00000400 	.word	0x00000400
 8001630:	2400035c 	.word	0x2400035c
 8001634:	240004b0 	.word	0x240004b0

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <SystemInit+0xd0>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a31      	ldr	r2, [pc, #196]	; (8001708 <SystemInit+0xd0>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <SystemInit+0xd4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	2b02      	cmp	r3, #2
 8001656:	d807      	bhi.n	8001668 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001658:	4b2c      	ldr	r3, [pc, #176]	; (800170c <SystemInit+0xd4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 030f 	bic.w	r3, r3, #15
 8001660:	4a2a      	ldr	r2, [pc, #168]	; (800170c <SystemInit+0xd4>)
 8001662:	f043 0303 	orr.w	r3, r3, #3
 8001666:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <SystemInit+0xd8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a28      	ldr	r2, [pc, #160]	; (8001710 <SystemInit+0xd8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <SystemInit+0xd8>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <SystemInit+0xd8>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4924      	ldr	r1, [pc, #144]	; (8001710 <SystemInit+0xd8>)
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <SystemInit+0xdc>)
 8001682:	4013      	ands	r3, r2
 8001684:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <SystemInit+0xd4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <SystemInit+0xd4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 030f 	bic.w	r3, r3, #15
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <SystemInit+0xd4>)
 800169c:	f043 0303 	orr.w	r3, r3, #3
 80016a0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <SystemInit+0xd8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <SystemInit+0xd8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <SystemInit+0xd8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <SystemInit+0xd8>)
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <SystemInit+0xe0>)
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <SystemInit+0xd8>)
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <SystemInit+0xe4>)
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <SystemInit+0xd8>)
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <SystemInit+0xe8>)
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <SystemInit+0xd8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <SystemInit+0xd8>)
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <SystemInit+0xe8>)
 80016d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <SystemInit+0xd8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <SystemInit+0xd8>)
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <SystemInit+0xe8>)
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <SystemInit+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <SystemInit+0xd8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <SystemInit+0xd8>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <SystemInit+0xd8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <SystemInit+0xec>)
 80016f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	52002000 	.word	0x52002000
 8001710:	58024400 	.word	0x58024400
 8001714:	eaf6ed7f 	.word	0xeaf6ed7f
 8001718:	02020200 	.word	0x02020200
 800171c:	01ff0000 	.word	0x01ff0000
 8001720:	01010280 	.word	0x01010280
 8001724:	52004000 	.word	0x52004000

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001760 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800172c:	f7ff ff84 	bl	8001638 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	; (8001768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	; (8001774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001756:	f006 f93b 	bl	80079d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff fa5b 	bl	8000c14 <main>
  bx  lr
 800175e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001760:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001764:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001768:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800176c:	08009f3c 	.word	0x08009f3c
  ldr r2, =_sbss
 8001770:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001774:	240004b0 	.word	0x240004b0

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001782:	2003      	movs	r0, #3
 8001784:	f000 f962 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001788:	f001 f99e 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_Init+0x68>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	4913      	ldr	r1, [pc, #76]	; (80017e8 <HAL_Init+0x6c>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
 80017a4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_Init+0x68>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_Init+0x6c>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_Init+0x70>)
 80017be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_Init+0x74>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 f814 	bl	80017f4 <HAL_InitTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e002      	b.n	80017dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017d6:	f7ff fd33 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	58024400 	.word	0x58024400
 80017e8:	08009b80 	.word	0x08009b80
 80017ec:	24000004 	.word	0x24000004
 80017f0:	24000000 	.word	0x24000000

080017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_InitTick+0x60>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e021      	b.n	800184c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_InitTick+0x64>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_InitTick+0x60>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	fbb3 f3f1 	udiv	r3, r3, r1
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f939 	bl	8001a96 <HAL_SYSTICK_Config>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00e      	b.n	800184c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d80a      	bhi.n	800184a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f000 f911 	bl	8001a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <HAL_InitTick+0x68>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	2400000c 	.word	0x2400000c
 8001858:	24000000 	.word	0x24000000
 800185c:	24000008 	.word	0x24000008

08001860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_IncTick+0x20>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x24>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4413      	add	r3, r2
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_IncTick+0x24>)
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2400000c 	.word	0x2400000c
 8001884:	24000360 	.word	0x24000360

08001888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_GetTick+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	24000360 	.word	0x24000360

080018a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff ffee 	bl	8001888 <HAL_GetTick>
 80018ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d005      	beq.n	80018c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_Delay+0x44>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c6:	bf00      	nop
 80018c8:	f7ff ffde 	bl	8001888 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d8f7      	bhi.n	80018c8 <HAL_Delay+0x28>
  {
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2400000c 	.word	0x2400000c

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <__NVIC_SetPriorityGrouping+0x40>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	4313      	orrs	r3, r2
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x40>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	05fa0000 	.word	0x05fa0000

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff47 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff5e 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff90 	bl	80019a0 <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5f 	bl	800194c <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffb2 	bl	8001a08 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001abe:	4b89      	ldr	r3, [pc, #548]	; (8001ce4 <HAL_GPIO_Init+0x234>)
 8001ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ac2:	e194      	b.n	8001dee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8186 	beq.w	8001de8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d005      	beq.n	8001af4 <HAL_GPIO_Init+0x44>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d130      	bne.n	8001b56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 0201 	and.w	r2, r3, #1
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d017      	beq.n	8001b92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d123      	bne.n	8001be6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	69b9      	ldr	r1, [r7, #24]
 8001be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0203 	and.w	r2, r3, #3
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80e0 	beq.w	8001de8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <HAL_GPIO_Init+0x238>)
 8001c2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <HAL_GPIO_Init+0x238>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_GPIO_Init+0x238>)
 8001c3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a29      	ldr	r2, [pc, #164]	; (8001cec <HAL_GPIO_Init+0x23c>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <HAL_GPIO_Init+0x240>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d052      	beq.n	8001d18 <HAL_GPIO_Init+0x268>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_GPIO_Init+0x244>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d031      	beq.n	8001cde <HAL_GPIO_Init+0x22e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_GPIO_Init+0x248>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d02b      	beq.n	8001cda <HAL_GPIO_Init+0x22a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_GPIO_Init+0x24c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d025      	beq.n	8001cd6 <HAL_GPIO_Init+0x226>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_GPIO_Init+0x250>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01f      	beq.n	8001cd2 <HAL_GPIO_Init+0x222>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <HAL_GPIO_Init+0x254>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d019      	beq.n	8001cce <HAL_GPIO_Init+0x21e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	; (8001d08 <HAL_GPIO_Init+0x258>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x21a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_GPIO_Init+0x25c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x216>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <HAL_GPIO_Init+0x260>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_GPIO_Init+0x264>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x20e>
 8001cba:	2309      	movs	r3, #9
 8001cbc:	e02d      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	e02b      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	e029      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e027      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e025      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e023      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e021      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e01f      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e01d      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e01b      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001ce2:	bf00      	nop
 8001ce4:	58000080 	.word	0x58000080
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	58000400 	.word	0x58000400
 8001cf0:	58020000 	.word	0x58020000
 8001cf4:	58020400 	.word	0x58020400
 8001cf8:	58020800 	.word	0x58020800
 8001cfc:	58020c00 	.word	0x58020c00
 8001d00:	58021000 	.word	0x58021000
 8001d04:	58021400 	.word	0x58021400
 8001d08:	58021800 	.word	0x58021800
 8001d0c:	58021c00 	.word	0x58021c00
 8001d10:	58022000 	.word	0x58022000
 8001d14:	58022400 	.word	0x58022400
 8001d18:	2300      	movs	r3, #0
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	f002 0203 	and.w	r2, r2, #3
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	4093      	lsls	r3, r2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2a:	4938      	ldr	r1, [pc, #224]	; (8001e0c <HAL_GPIO_Init+0x35c>)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f47f ae63 	bne.w	8001ac4 <HAL_GPIO_Init+0x14>
  }
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	3724      	adds	r7, #36	; 0x24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	58000400 	.word	0x58000400

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	2b06      	cmp	r3, #6
 8001e56:	d00a      	beq.n	8001e6e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e040      	b.n	8001eec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e03e      	b.n	8001eec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001e76:	491f      	ldr	r1, [pc, #124]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e7e:	f7ff fd03 	bl	8001888 <HAL_GetTick>
 8001e82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e84:	e009      	b.n	8001e9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e86:	f7ff fcff 	bl	8001888 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e94:	d901      	bls.n	8001e9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e028      	b.n	8001eec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b1e      	cmp	r3, #30
 8001eac:	d008      	beq.n	8001ec0 <HAL_PWREx_ConfigSupply+0x7c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8001eb2:	d005      	beq.n	8001ec0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b1d      	cmp	r3, #29
 8001eb8:	d002      	beq.n	8001ec0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b2d      	cmp	r3, #45	; 0x2d
 8001ebe:	d114      	bne.n	8001eea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ec0:	f7ff fce2 	bl	8001888 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ec6:	e009      	b.n	8001edc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ec8:	f7ff fcde 	bl	8001888 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed6:	d901      	bls.n	8001edc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e007      	b.n	8001eec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d1ee      	bne.n	8001ec8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	58024800 	.word	0x58024800

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f000 bc1f 	b.w	800274a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80b3 	beq.w	8002080 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1a:	4b95      	ldr	r3, [pc, #596]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f24:	4b92      	ldr	r3, [pc, #584]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d007      	beq.n	8001f40 <HAL_RCC_OscConfig+0x48>
 8001f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f32:	2b18      	cmp	r3, #24
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64>
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d10d      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b8b      	ldr	r3, [pc, #556]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8098 	beq.w	800207e <HAL_RCC_OscConfig+0x186>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 8093 	bne.w	800207e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e3f6      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x7c>
 8001f66:	4b82      	ldr	r3, [pc, #520]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a81      	ldr	r2, [pc, #516]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e058      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d112      	bne.n	8001fa2 <HAL_RCC_OscConfig+0xaa>
 8001f7c:	4b7c      	ldr	r3, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a7b      	ldr	r2, [pc, #492]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b79      	ldr	r3, [pc, #484]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a78      	ldr	r2, [pc, #480]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a75      	ldr	r2, [pc, #468]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e041      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_OscConfig+0xda>
 8001fac:	4b70      	ldr	r3, [pc, #448]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6f      	ldr	r2, [pc, #444]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b6d      	ldr	r3, [pc, #436]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6c      	ldr	r2, [pc, #432]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a69      	ldr	r2, [pc, #420]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e029      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001fda:	d112      	bne.n	8002002 <HAL_RCC_OscConfig+0x10a>
 8001fdc:	4b64      	ldr	r3, [pc, #400]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b61      	ldr	r3, [pc, #388]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a60      	ldr	r2, [pc, #384]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b5e      	ldr	r3, [pc, #376]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e011      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
 8002002:	4b5b      	ldr	r3, [pc, #364]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b55      	ldr	r3, [pc, #340]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a54      	ldr	r2, [pc, #336]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002020:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002024:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d013      	beq.n	8002056 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff fc2b 	bl	8001888 <HAL_GetTick>
 8002032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002036:	f7ff fc27 	bl	8001888 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	; 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e380      	b.n	800274a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002048:	4b49      	ldr	r3, [pc, #292]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x13e>
 8002054:	e014      	b.n	8002080 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7ff fc17 	bl	8001888 <HAL_GetTick>
 800205a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205e:	f7ff fc13 	bl	8001888 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b64      	cmp	r3, #100	; 0x64
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e36c      	b.n	800274a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x166>
 800207c:	e000      	b.n	8002080 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 808c 	beq.w	80021a6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002096:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1bc>
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	2b18      	cmp	r3, #24
 80020a8:	d137      	bne.n	800211a <HAL_RCC_OscConfig+0x222>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d132      	bne.n	800211a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_OscConfig+0x1d4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e33e      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 0219 	bic.w	r2, r3, #25
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4925      	ldr	r1, [pc, #148]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7ff fbd3 	bl	8001888 <HAL_GetTick>
 80020e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e6:	f7ff fbcf 	bl	8001888 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e328      	b.n	800274a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	4917      	ldr	r1, [pc, #92]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002118:	e045      	b.n	80021a6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d028      	beq.n	8002174 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 0219 	bic.w	r2, r3, #25
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	4910      	ldr	r1, [pc, #64]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff fba8 	bl	8001888 <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213c:	f7ff fba4 	bl	8001888 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e2fd      	b.n	800274a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	061b      	lsls	r3, r3, #24
 8002168:	4901      	ldr	r1, [pc, #4]	; (8002170 <HAL_RCC_OscConfig+0x278>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
 800216e:	e01a      	b.n	80021a6 <HAL_RCC_OscConfig+0x2ae>
 8002170:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002174:	4b97      	ldr	r3, [pc, #604]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a96      	ldr	r2, [pc, #600]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff fb82 	bl	8001888 <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002188:	f7ff fb7e 	bl	8001888 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e2d7      	b.n	800274a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800219a:	4b8e      	ldr	r3, [pc, #568]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d06a      	beq.n	8002288 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b2:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021bc:	4b85      	ldr	r3, [pc, #532]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d007      	beq.n	80021d8 <HAL_RCC_OscConfig+0x2e0>
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b18      	cmp	r3, #24
 80021cc:	d11b      	bne.n	8002206 <HAL_RCC_OscConfig+0x30e>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d116      	bne.n	8002206 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021d8:	4b7e      	ldr	r3, [pc, #504]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2f8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e2ac      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021f0:	4b78      	ldr	r3, [pc, #480]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	4975      	ldr	r1, [pc, #468]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002204:	e040      	b.n	8002288 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d023      	beq.n	8002256 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800220e:	4b71      	ldr	r3, [pc, #452]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a70      	ldr	r2, [pc, #448]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7ff fb35 	bl	8001888 <HAL_GetTick>
 800221e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002222:	f7ff fb31 	bl	8001888 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e28a      	b.n	800274a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002234:	4b67      	ldr	r3, [pc, #412]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002240:	4b64      	ldr	r3, [pc, #400]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	4961      	ldr	r1, [pc, #388]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002250:	4313      	orrs	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
 8002254:	e018      	b.n	8002288 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002256:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a5e      	ldr	r2, [pc, #376]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 800225c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7ff fb11 	bl	8001888 <HAL_GetTick>
 8002266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800226a:	f7ff fb0d 	bl	8001888 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e266      	b.n	800274a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800227c:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d036      	beq.n	8002302 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d019      	beq.n	80022d0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229c:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a0:	4a4c      	ldr	r2, [pc, #304]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7ff faee 	bl	8001888 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7ff faea 	bl	8001888 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e243      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022c2:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80022c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x3b8>
 80022ce:	e018      	b.n	8002302 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d0:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	4a3f      	ldr	r2, [pc, #252]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7ff fad4 	bl	8001888 <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff fad0 	bl	8001888 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e229      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80022f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d036      	beq.n	800237c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d019      	beq.n	800234a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 800231c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002322:	f7ff fab1 	bl	8001888 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800232a:	f7ff faad 	bl	8001888 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e206      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x432>
 8002348:	e018      	b.n	800237c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002354:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002356:	f7ff fa97 	bl	8001888 <HAL_GetTick>
 800235a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800235e:	f7ff fa93 	bl	8001888 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1ec      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80af 	beq.w	80024e8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCC_OscConfig+0x4e0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <HAL_RCC_OscConfig+0x4e0>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002396:	f7ff fa77 	bl	8001888 <HAL_GetTick>
 800239a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239e:	f7ff fa73 	bl	8001888 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1cc      	b.n	800274a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_OscConfig+0x4e0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10b      	bne.n	80023dc <HAL_RCC_OscConfig+0x4e4>
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a02      	ldr	r2, [pc, #8]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	e05b      	b.n	800248a <HAL_RCC_OscConfig+0x592>
 80023d2:	bf00      	nop
 80023d4:	58024400 	.word	0x58024400
 80023d8:	58024800 	.word	0x58024800
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d112      	bne.n	800240a <HAL_RCC_OscConfig+0x512>
 80023e4:	4b9d      	ldr	r3, [pc, #628]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a9c      	ldr	r2, [pc, #624]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	4b9a      	ldr	r3, [pc, #616]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a99      	ldr	r2, [pc, #612]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80023f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	4b97      	ldr	r3, [pc, #604]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a96      	ldr	r2, [pc, #600]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002402:	f023 0304 	bic.w	r3, r3, #4
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	e03f      	b.n	800248a <HAL_RCC_OscConfig+0x592>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b05      	cmp	r3, #5
 8002410:	d112      	bne.n	8002438 <HAL_RCC_OscConfig+0x540>
 8002412:	4b92      	ldr	r3, [pc, #584]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a91      	ldr	r2, [pc, #580]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	4b8f      	ldr	r3, [pc, #572]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a8e      	ldr	r2, [pc, #568]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	4b8c      	ldr	r3, [pc, #560]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a8b      	ldr	r2, [pc, #556]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	e028      	b.n	800248a <HAL_RCC_OscConfig+0x592>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b85      	cmp	r3, #133	; 0x85
 800243e:	d112      	bne.n	8002466 <HAL_RCC_OscConfig+0x56e>
 8002440:	4b86      	ldr	r3, [pc, #536]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a85      	ldr	r2, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
 800244c:	4b83      	ldr	r3, [pc, #524]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	4a82      	ldr	r2, [pc, #520]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002456:	6713      	str	r3, [r2, #112]	; 0x70
 8002458:	4b80      	ldr	r3, [pc, #512]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a7f      	ldr	r2, [pc, #508]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	e011      	b.n	800248a <HAL_RCC_OscConfig+0x592>
 8002466:	4b7d      	ldr	r3, [pc, #500]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	4a7c      	ldr	r2, [pc, #496]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6713      	str	r3, [r2, #112]	; 0x70
 8002472:	4b7a      	ldr	r3, [pc, #488]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a79      	ldr	r2, [pc, #484]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002478:	f023 0304 	bic.w	r3, r3, #4
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b77      	ldr	r3, [pc, #476]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a76      	ldr	r2, [pc, #472]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7ff f9f9 	bl	8001888 <HAL_GetTick>
 8002496:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7ff f9f5 	bl	8001888 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e14c      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x5a2>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7ff f9e3 	bl	8001888 <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff f9df 	bl	8001888 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e136      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024dc:	4b5f      	ldr	r3, [pc, #380]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 812b 	beq.w	8002748 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80024f2:	4b5a      	ldr	r3, [pc, #360]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024fa:	2b18      	cmp	r3, #24
 80024fc:	f000 80bb 	beq.w	8002676 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	2b02      	cmp	r3, #2
 8002506:	f040 8095 	bne.w	8002634 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	4b54      	ldr	r3, [pc, #336]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a53      	ldr	r2, [pc, #332]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7ff f9b7 	bl	8001888 <HAL_GetTick>
 800251a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff f9b3 	bl	8001888 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e10c      	b.n	800274a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002530:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253c:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800253e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002540:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_OscConfig+0x768>)
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800254c:	0112      	lsls	r2, r2, #4
 800254e:	430a      	orrs	r2, r1
 8002550:	4942      	ldr	r1, [pc, #264]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002552:	4313      	orrs	r3, r2
 8002554:	628b      	str	r3, [r1, #40]	; 0x28
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	3b01      	subs	r3, #1
 800255c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002564:	3b01      	subs	r3, #1
 8002566:	025b      	lsls	r3, r3, #9
 8002568:	b29b      	uxth	r3, r3
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	3b01      	subs	r3, #1
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	3b01      	subs	r3, #1
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002586:	4935      	ldr	r1, [pc, #212]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002588:	4313      	orrs	r3, r2
 800258a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800258c:	4b33      	ldr	r3, [pc, #204]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	4a32      	ldr	r2, [pc, #200]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002598:	4b30      	ldr	r3, [pc, #192]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800259a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800259e:	4013      	ands	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025a4:	00d2      	lsls	r2, r2, #3
 80025a6:	492d      	ldr	r1, [pc, #180]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	f023 020c 	bic.w	r2, r3, #12
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	4928      	ldr	r1, [pc, #160]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f023 0202 	bic.w	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4924      	ldr	r1, [pc, #144]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	4a21      	ldr	r2, [pc, #132]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_RCC_OscConfig+0x764>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff f93c 	bl	8001888 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff f938 	bl	8001888 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e091      	b.n	800274a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x71c>
 8002632:	e089      	b.n	8002748 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_OscConfig+0x764>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <HAL_RCC_OscConfig+0x764>)
 800263a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800263e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7ff f922 	bl	8001888 <HAL_GetTick>
 8002644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002646:	e00f      	b.n	8002668 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7ff f91e 	bl	8001888 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d908      	bls.n	8002668 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e077      	b.n	800274a <HAL_RCC_OscConfig+0x852>
 800265a:	bf00      	nop
 800265c:	58024400 	.word	0x58024400
 8002660:	fffffc0c 	.word	0xfffffc0c
 8002664:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002668:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e9      	bne.n	8002648 <HAL_RCC_OscConfig+0x750>
 8002674:	e068      	b.n	8002748 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800267c:	4b35      	ldr	r3, [pc, #212]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	2b01      	cmp	r3, #1
 8002688:	d031      	beq.n	80026ee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d12a      	bne.n	80026ee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d122      	bne.n	80026ee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d11a      	bne.n	80026ee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	0a5b      	lsrs	r3, r3, #9
 80026bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d111      	bne.n	80026ee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d108      	bne.n	80026ee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	0e1b      	lsrs	r3, r3, #24
 80026e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e02b      	b.n	800274a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026fc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	429a      	cmp	r2, r3
 8002706:	d01f      	beq.n	8002748 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002714:	f7ff f8b8 	bl	8001888 <HAL_GetTick>
 8002718:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800271a:	bf00      	nop
 800271c:	f7ff f8b4 	bl	8001888 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	4293      	cmp	r3, r2
 8002726:	d0f9      	beq.n	800271c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 800272a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_OscConfig+0x860>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002734:	00d2      	lsls	r2, r2, #3
 8002736:	4907      	ldr	r1, [pc, #28]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 8002738:	4313      	orrs	r3, r2
 800273a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_RCC_OscConfig+0x85c>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3730      	adds	r7, #48	; 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	58024400 	.word	0x58024400
 8002758:	ffff0007 	.word	0xffff0007

0800275c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e19c      	b.n	8002aaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b8a      	ldr	r3, [pc, #552]	; (800299c <HAL_RCC_ClockConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d910      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b87      	ldr	r3, [pc, #540]	; (800299c <HAL_RCC_ClockConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 020f 	bic.w	r2, r3, #15
 8002786:	4985      	ldr	r1, [pc, #532]	; (800299c <HAL_RCC_ClockConfig+0x240>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b83      	ldr	r3, [pc, #524]	; (800299c <HAL_RCC_ClockConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e184      	b.n	8002aaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d010      	beq.n	80027ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	4b7b      	ldr	r3, [pc, #492]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d908      	bls.n	80027ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027bc:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	4975      	ldr	r1, [pc, #468]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d010      	beq.n	80027fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	4b70      	ldr	r3, [pc, #448]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d908      	bls.n	80027fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027ea:	4b6d      	ldr	r3, [pc, #436]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	496a      	ldr	r1, [pc, #424]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d010      	beq.n	800282a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002814:	429a      	cmp	r2, r3
 8002816:	d908      	bls.n	800282a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	495e      	ldr	r1, [pc, #376]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002826:	4313      	orrs	r3, r2
 8002828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d010      	beq.n	8002858 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002842:	429a      	cmp	r2, r3
 8002844:	d908      	bls.n	8002858 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002846:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4953      	ldr	r1, [pc, #332]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002854:	4313      	orrs	r3, r2
 8002856:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d010      	beq.n	8002886 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	429a      	cmp	r2, r3
 8002872:	d908      	bls.n	8002886 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b4a      	ldr	r3, [pc, #296]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f023 020f 	bic.w	r2, r3, #15
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4947      	ldr	r1, [pc, #284]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002882:	4313      	orrs	r3, r2
 8002884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d055      	beq.n	800293e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	4940      	ldr	r1, [pc, #256]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ac:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d121      	bne.n	80028fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0f6      	b.n	8002aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d115      	bne.n	80028fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0ea      	b.n	8002aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d107      	bne.n	80028ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028dc:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0de      	b.n	8002aaa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ec:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0d6      	b.n	8002aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f023 0207 	bic.w	r2, r3, #7
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4925      	ldr	r1, [pc, #148]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290e:	f7fe ffbb 	bl	8001888 <HAL_GetTick>
 8002912:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002914:	e00a      	b.n	800292c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002916:	f7fe ffb7 	bl	8001888 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e0be      	b.n	8002aaa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	429a      	cmp	r2, r3
 800293c:	d1eb      	bne.n	8002916 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d010      	beq.n	800296c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	429a      	cmp	r2, r3
 8002958:	d208      	bcs.n	800296c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f023 020f 	bic.w	r2, r3, #15
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	490e      	ldr	r1, [pc, #56]	; (80029a0 <HAL_RCC_ClockConfig+0x244>)
 8002968:	4313      	orrs	r3, r2
 800296a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_ClockConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d214      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_RCC_ClockConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 020f 	bic.w	r2, r3, #15
 8002982:	4906      	ldr	r1, [pc, #24]	; (800299c <HAL_RCC_ClockConfig+0x240>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_RCC_ClockConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e086      	b.n	8002aaa <HAL_RCC_ClockConfig+0x34e>
 800299c:	52002000 	.word	0x52002000
 80029a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029bc:	429a      	cmp	r2, r3
 80029be:	d208      	bcs.n	80029d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029c0:	4b3c      	ldr	r3, [pc, #240]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	4939      	ldr	r1, [pc, #228]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d010      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d208      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	492e      	ldr	r1, [pc, #184]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d208      	bcs.n	8002a2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a1c:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4922      	ldr	r1, [pc, #136]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d010      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d208      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4917      	ldr	r1, [pc, #92]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002a5c:	f000 f834 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	4912      	ldr	r1, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x35c>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x358>)
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_RCC_ClockConfig+0x35c>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x360>)
 8002a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a94:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <HAL_RCC_ClockConfig+0x364>)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x368>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fea8 	bl	80017f4 <HAL_InitTick>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	08009b80 	.word	0x08009b80
 8002abc:	24000004 	.word	0x24000004
 8002ac0:	24000000 	.word	0x24000000
 8002ac4:	24000008 	.word	0x24000008

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ace:	4bb3      	ldr	r3, [pc, #716]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ad6:	2b18      	cmp	r3, #24
 8002ad8:	f200 8155 	bhi.w	8002d86 <HAL_RCC_GetSysClockFreq+0x2be>
 8002adc:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae2:	bf00      	nop
 8002ae4:	08002b49 	.word	0x08002b49
 8002ae8:	08002d87 	.word	0x08002d87
 8002aec:	08002d87 	.word	0x08002d87
 8002af0:	08002d87 	.word	0x08002d87
 8002af4:	08002d87 	.word	0x08002d87
 8002af8:	08002d87 	.word	0x08002d87
 8002afc:	08002d87 	.word	0x08002d87
 8002b00:	08002d87 	.word	0x08002d87
 8002b04:	08002b6f 	.word	0x08002b6f
 8002b08:	08002d87 	.word	0x08002d87
 8002b0c:	08002d87 	.word	0x08002d87
 8002b10:	08002d87 	.word	0x08002d87
 8002b14:	08002d87 	.word	0x08002d87
 8002b18:	08002d87 	.word	0x08002d87
 8002b1c:	08002d87 	.word	0x08002d87
 8002b20:	08002d87 	.word	0x08002d87
 8002b24:	08002b75 	.word	0x08002b75
 8002b28:	08002d87 	.word	0x08002d87
 8002b2c:	08002d87 	.word	0x08002d87
 8002b30:	08002d87 	.word	0x08002d87
 8002b34:	08002d87 	.word	0x08002d87
 8002b38:	08002d87 	.word	0x08002d87
 8002b3c:	08002d87 	.word	0x08002d87
 8002b40:	08002d87 	.word	0x08002d87
 8002b44:	08002b7b 	.word	0x08002b7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b48:	4b94      	ldr	r3, [pc, #592]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b54:	4b91      	ldr	r3, [pc, #580]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	4a90      	ldr	r2, [pc, #576]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b66:	e111      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b68:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b6a:	61bb      	str	r3, [r7, #24]
      break;
 8002b6c:	e10e      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b6e:	4b8d      	ldr	r3, [pc, #564]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b70:	61bb      	str	r3, [r7, #24]
      break;
 8002b72:	e10b      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b74:	4b8c      	ldr	r3, [pc, #560]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b76:	61bb      	str	r3, [r7, #24]
      break;
 8002b78:	e108      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b7a:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b84:	4b85      	ldr	r3, [pc, #532]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b90:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b9a:	4b80      	ldr	r3, [pc, #512]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9e:	08db      	lsrs	r3, r3, #3
 8002ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80e1 	beq.w	8002d80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	f000 8083 	beq.w	8002ccc <HAL_RCC_GetSysClockFreq+0x204>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	f200 80a1 	bhi.w	8002d10 <HAL_RCC_GetSysClockFreq+0x248>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x114>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d056      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002bda:	e099      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bdc:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d02d      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002be8:	4b6c      	ldr	r3, [pc, #432]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	08db      	lsrs	r3, r3, #3
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	4a6b      	ldr	r2, [pc, #428]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c12:	4b62      	ldr	r3, [pc, #392]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002c42:	e087      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002db0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c56:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c86:	e065      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c9a:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cca:	e043      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002db8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d0e:	e021      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	0a5b      	lsrs	r3, r3, #9
 8002d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5e:	3301      	adds	r3, #1
 8002d60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d78:	ee17 3a90 	vmov	r3, s15
 8002d7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d7e:	e005      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
      break;
 8002d84:	e002      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d88:	61bb      	str	r3, [r7, #24]
      break;
 8002d8a:	bf00      	nop
  }

  return sysclockfreq;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	; 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	03d09000 	.word	0x03d09000
 8002da4:	003d0900 	.word	0x003d0900
 8002da8:	007a1200 	.word	0x007a1200
 8002dac:	46000000 	.word	0x46000000
 8002db0:	4c742400 	.word	0x4c742400
 8002db4:	4a742400 	.word	0x4a742400
 8002db8:	4af42400 	.word	0x4af42400

08002dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002dc2:	f7ff fe81 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	0a1b      	lsrs	r3, r3, #8
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	490f      	ldr	r1, [pc, #60]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dd4:	5ccb      	ldrb	r3, [r1, r3]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	fa22 f303 	lsr.w	r3, r2, r3
 8002dde:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8002df8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	58024400 	.word	0x58024400
 8002e10:	08009b80 	.word	0x08009b80
 8002e14:	24000004 	.word	0x24000004
 8002e18:	24000000 	.word	0x24000000

08002e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002e20:	f7ff ffcc 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4904      	ldr	r1, [pc, #16]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	58024400 	.word	0x58024400
 8002e44:	08009b80 	.word	0x08009b80

08002e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002e4c:	f7ff ffb6 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4904      	ldr	r1, [pc, #16]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	08009b80 	.word	0x08009b80

08002e74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b0c8      	sub	sp, #288	; 0x120
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002e98:	2500      	movs	r5, #0
 8002e9a:	ea54 0305 	orrs.w	r3, r4, r5
 8002e9e:	d049      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eaa:	d02f      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002eac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eb0:	d828      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb6:	d01a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ebc:	d822      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec6:	d007      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eca:	4ba7      	ldr	r3, [pc, #668]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	4aa6      	ldr	r2, [pc, #664]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ed6:	e01a      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002edc:	3308      	adds	r3, #8
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f001 fc43 	bl	800476c <RCCEx_PLL2_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002eec:	e00f      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef2:	3328      	adds	r3, #40	; 0x28
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 fcea 	bl	80048d0 <RCCEx_PLL3_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f02:	e004      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f0a:	e000      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f16:	4b94      	ldr	r3, [pc, #592]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f24:	4a90      	ldr	r2, [pc, #576]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f26:	430b      	orrs	r3, r1
 8002f28:	6513      	str	r3, [r2, #80]	; 0x50
 8002f2a:	e003      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002f40:	f04f 0900 	mov.w	r9, #0
 8002f44:	ea58 0309 	orrs.w	r3, r8, r9
 8002f48:	d047      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d82a      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f71 	.word	0x08002f71
 8002f60:	08002f7f 	.word	0x08002f7f
 8002f64:	08002f95 	.word	0x08002f95
 8002f68:	08002fb3 	.word	0x08002fb3
 8002f6c:	08002fb3 	.word	0x08002fb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f70:	4b7d      	ldr	r3, [pc, #500]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	4a7c      	ldr	r2, [pc, #496]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f7c:	e01a      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f82:	3308      	adds	r3, #8
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fbf0 	bl	800476c <RCCEx_PLL2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f92:	e00f      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f98:	3328      	adds	r3, #40	; 0x28
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fc97 	bl	80048d0 <RCCEx_PLL3_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fa8:	e004      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	f023 0107 	bic.w	r1, r3, #7
 8002fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	4a67      	ldr	r2, [pc, #412]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6513      	str	r3, [r2, #80]	; 0x50
 8002fd0:	e003      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002fe6:	f04f 0b00 	mov.w	fp, #0
 8002fea:	ea5a 030b 	orrs.w	r3, sl, fp
 8002fee:	d054      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ffa:	d036      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002ffc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003000:	d82f      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003006:	d032      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d829      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800300e:	2bc0      	cmp	r3, #192	; 0xc0
 8003010:	d02f      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003012:	2bc0      	cmp	r3, #192	; 0xc0
 8003014:	d825      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003016:	2b80      	cmp	r3, #128	; 0x80
 8003018:	d018      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	d821      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	d007      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003026:	e01c      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003028:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	4a4e      	ldr	r2, [pc, #312]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800302e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003034:	e01e      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800303a:	3308      	adds	r3, #8
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f001 fb94 	bl	800476c <RCCEx_PLL2_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800304a:	e013      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800304c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003050:	3328      	adds	r3, #40	; 0x28
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f001 fc3b 	bl	80048d0 <RCCEx_PLL3_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003060:	e008      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003068:	e004      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800306a:	bf00      	nop
 800306c:	e002      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003074:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800307c:	4b3a      	ldr	r3, [pc, #232]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800307e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003080:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003084:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	4a37      	ldr	r2, [pc, #220]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800308c:	430b      	orrs	r3, r1
 800308e:	6513      	str	r3, [r2, #80]	; 0x50
 8003090:	e003      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003092:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003096:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800309a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80030a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80030b4:	460b      	mov	r3, r1
 80030b6:	4313      	orrs	r3, r2
 80030b8:	d05c      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80030ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80030c4:	d03b      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80030c6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80030ca:	d834      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d0:	d037      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d6:	d82e      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030dc:	d033      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80030de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030e2:	d828      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e8:	d01a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d822      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80030f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f8:	d007      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80030fa:	e01c      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	4a19      	ldr	r2, [pc, #100]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003108:	e01e      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800310a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800310e:	3308      	adds	r3, #8
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f001 fb2a 	bl	800476c <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800311e:	e013      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003124:	3328      	adds	r3, #40	; 0x28
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fbd1 	bl	80048d0 <RCCEx_PLL3_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003134:	e008      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800313c:	e004      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800313e:	bf00      	nop
 8003140:	e002      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10d      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315e:	4a02      	ldr	r2, [pc, #8]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003160:	430b      	orrs	r3, r1
 8003162:	6513      	str	r3, [r2, #80]	; 0x50
 8003164:	e006      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003166:	bf00      	nop
 8003168:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003170:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003184:	2300      	movs	r3, #0
 8003186:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800318a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800318e:	460b      	mov	r3, r1
 8003190:	4313      	orrs	r3, r2
 8003192:	d03a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	2b30      	cmp	r3, #48	; 0x30
 800319c:	d01f      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800319e:	2b30      	cmp	r3, #48	; 0x30
 80031a0:	d819      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d00c      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d815      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d111      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b2:	4bae      	ldr	r3, [pc, #696]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	4aad      	ldr	r2, [pc, #692]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80031be:	e011      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c4:	3308      	adds	r3, #8
 80031c6:	2102      	movs	r1, #2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f001 facf 	bl	800476c <RCCEx_PLL2_Config>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80031d4:	e006      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031dc:	e002      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80031e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80031ec:	4b9f      	ldr	r3, [pc, #636]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80031f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	4a9c      	ldr	r2, [pc, #624]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031fc:	430b      	orrs	r3, r1
 80031fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003200:	e003      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003202:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003206:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800320a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003216:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800321a:	2300      	movs	r3, #0
 800321c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003220:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003224:	460b      	mov	r3, r1
 8003226:	4313      	orrs	r3, r2
 8003228:	d051      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800322a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800322e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003234:	d035      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800323a:	d82e      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800323c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003240:	d031      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003242:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003246:	d828      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324c:	d01a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003252:	d822      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325c:	d007      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800325e:	e01c      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003260:	4b82      	ldr	r3, [pc, #520]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	4a81      	ldr	r2, [pc, #516]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800326c:	e01c      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800326e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003272:	3308      	adds	r3, #8
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fa78 	bl	800476c <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003282:	e011      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003288:	3328      	adds	r3, #40	; 0x28
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f001 fb1f 	bl	80048d0 <RCCEx_PLL3_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003298:	e006      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032a0:	e002      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80032a2:	bf00      	nop
 80032a4:	e000      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80032a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032b0:	4b6e      	ldr	r3, [pc, #440]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80032b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032be:	4a6b      	ldr	r2, [pc, #428]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6513      	str	r3, [r2, #80]	; 0x50
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80032da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80032e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80032e8:	460b      	mov	r3, r1
 80032ea:	4313      	orrs	r3, r2
 80032ec:	d053      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80032ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f8:	d033      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80032fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fe:	d82c      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003304:	d02f      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800330a:	d826      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800330c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003310:	d02b      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003316:	d820      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800331c:	d012      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800331e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003322:	d81a      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d022      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d115      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800332e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003332:	3308      	adds	r3, #8
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f001 fa18 	bl	800476c <RCCEx_PLL2_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003342:	e015      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003348:	3328      	adds	r3, #40	; 0x28
 800334a:	2101      	movs	r1, #1
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fabf 	bl	80048d0 <RCCEx_PLL3_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003358:	e00a      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003362:	bf00      	nop
 8003364:	e004      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003366:	bf00      	nop
 8003368:	e002      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800336e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003378:	4b3c      	ldr	r3, [pc, #240]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003386:	4a39      	ldr	r2, [pc, #228]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003388:	430b      	orrs	r3, r1
 800338a:	6513      	str	r3, [r2, #80]	; 0x50
 800338c:	e003      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003392:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80033a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033a6:	2300      	movs	r3, #0
 80033a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033ac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4313      	orrs	r3, r2
 80033b4:	d060      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80033b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033be:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80033c2:	d039      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80033c4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80033c8:	d832      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ce:	d035      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80033d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d4:	d82c      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d031      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d826      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033e6:	d02d      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80033e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033ec:	d820      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f2:	d012      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80033f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f8:	d81a      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d024      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80033fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003402:	d115      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003408:	3308      	adds	r3, #8
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f001 f9ad 	bl	800476c <RCCEx_PLL2_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003418:	e017      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800341a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341e:	3328      	adds	r3, #40	; 0x28
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f001 fa54 	bl	80048d0 <RCCEx_PLL3_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800342e:	e00c      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003436:	e008      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003438:	bf00      	nop
 800343a:	e006      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800343c:	bf00      	nop
 800343e:	e004      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003440:	bf00      	nop
 8003442:	e002      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003444:	bf00      	nop
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10e      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003462:	4a02      	ldr	r2, [pc, #8]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003464:	430b      	orrs	r3, r1
 8003466:	6593      	str	r3, [r2, #88]	; 0x58
 8003468:	e006      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003470:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003474:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800348e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003492:	460b      	mov	r3, r1
 8003494:	4313      	orrs	r3, r2
 8003496:	d037      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800349c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800349e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a2:	d00e      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80034a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a8:	d816      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80034ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b2:	d111      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b4:	4bc4      	ldr	r3, [pc, #784]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	4ac3      	ldr	r2, [pc, #780]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034c0:	e00f      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c6:	3308      	adds	r3, #8
 80034c8:	2101      	movs	r1, #1
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 f94e 	bl	800476c <RCCEx_PLL2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034d6:	e004      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80034e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034ea:	4bb7      	ldr	r3, [pc, #732]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80034f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f8:	4ab3      	ldr	r2, [pc, #716]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034fa:	430b      	orrs	r3, r1
 80034fc:	6513      	str	r3, [r2, #80]	; 0x50
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003504:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800351e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003522:	460b      	mov	r3, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	d039      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	2b03      	cmp	r3, #3
 8003530:	d81c      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	08003575 	.word	0x08003575
 800353c:	08003549 	.word	0x08003549
 8003540:	08003557 	.word	0x08003557
 8003544:	08003575 	.word	0x08003575
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b9f      	ldr	r3, [pc, #636]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4a9e      	ldr	r2, [pc, #632]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003554:	e00f      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355a:	3308      	adds	r3, #8
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f001 f904 	bl	800476c <RCCEx_PLL2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003576:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800357e:	4b92      	ldr	r3, [pc, #584]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	f023 0103 	bic.w	r1, r3, #3
 8003586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	4a8e      	ldr	r2, [pc, #568]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800358e:	430b      	orrs	r3, r1
 8003590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003592:	e003      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003598:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800359c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80035a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80035b6:	460b      	mov	r3, r1
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f000 8099 	beq.w	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035be:	4b83      	ldr	r3, [pc, #524]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a82      	ldr	r2, [pc, #520]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ca:	f7fe f95d 	bl	8001888 <HAL_GetTick>
 80035ce:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035d2:	e00b      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d4:	f7fe f958 	bl	8001888 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b64      	cmp	r3, #100	; 0x64
 80035e2:	d903      	bls.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035ea:	e005      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ec:	4b77      	ldr	r3, [pc, #476]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ed      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80035f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d173      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003600:	4b71      	ldr	r3, [pc, #452]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003608:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800360c:	4053      	eors	r3, r2
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d015      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003616:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003622:	4b69      	ldr	r3, [pc, #420]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800362e:	4b66      	ldr	r3, [pc, #408]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a65      	ldr	r2, [pc, #404]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800363a:	4a63      	ldr	r2, [pc, #396]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003646:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800364a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364e:	d118      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe f91a 	bl	8001888 <HAL_GetTick>
 8003654:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003658:	e00d      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fe f915 	bl	8001888 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003664:	1ad2      	subs	r2, r2, r3
 8003666:	f241 3388 	movw	r3, #5000	; 0x1388
 800366a:	429a      	cmp	r2, r3
 800366c:	d903      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003674:	e005      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003676:	4b54      	ldr	r3, [pc, #336]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0eb      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003682:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003686:	2b00      	cmp	r3, #0
 8003688:	d129      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800369a:	d10e      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x846>
 800369c:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80036a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036ac:	091a      	lsrs	r2, r3, #4
 80036ae:	4b48      	ldr	r3, [pc, #288]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	4a45      	ldr	r2, [pc, #276]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6113      	str	r3, [r2, #16]
 80036b8:	e005      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80036ba:	4b43      	ldr	r3, [pc, #268]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	4a42      	ldr	r2, [pc, #264]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036c4:	6113      	str	r3, [r2, #16]
 80036c6:	4b40      	ldr	r3, [pc, #256]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80036ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d6:	4a3c      	ldr	r2, [pc, #240]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	e008      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80036e6:	e003      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80036f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f002 0301 	and.w	r3, r2, #1
 80036fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003706:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800370a:	460b      	mov	r3, r1
 800370c:	4313      	orrs	r3, r2
 800370e:	f000 8090 	beq.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371a:	2b28      	cmp	r3, #40	; 0x28
 800371c:	d870      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800371e:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	08003809 	.word	0x08003809
 8003728:	08003801 	.word	0x08003801
 800372c:	08003801 	.word	0x08003801
 8003730:	08003801 	.word	0x08003801
 8003734:	08003801 	.word	0x08003801
 8003738:	08003801 	.word	0x08003801
 800373c:	08003801 	.word	0x08003801
 8003740:	08003801 	.word	0x08003801
 8003744:	080037d5 	.word	0x080037d5
 8003748:	08003801 	.word	0x08003801
 800374c:	08003801 	.word	0x08003801
 8003750:	08003801 	.word	0x08003801
 8003754:	08003801 	.word	0x08003801
 8003758:	08003801 	.word	0x08003801
 800375c:	08003801 	.word	0x08003801
 8003760:	08003801 	.word	0x08003801
 8003764:	080037eb 	.word	0x080037eb
 8003768:	08003801 	.word	0x08003801
 800376c:	08003801 	.word	0x08003801
 8003770:	08003801 	.word	0x08003801
 8003774:	08003801 	.word	0x08003801
 8003778:	08003801 	.word	0x08003801
 800377c:	08003801 	.word	0x08003801
 8003780:	08003801 	.word	0x08003801
 8003784:	08003809 	.word	0x08003809
 8003788:	08003801 	.word	0x08003801
 800378c:	08003801 	.word	0x08003801
 8003790:	08003801 	.word	0x08003801
 8003794:	08003801 	.word	0x08003801
 8003798:	08003801 	.word	0x08003801
 800379c:	08003801 	.word	0x08003801
 80037a0:	08003801 	.word	0x08003801
 80037a4:	08003809 	.word	0x08003809
 80037a8:	08003801 	.word	0x08003801
 80037ac:	08003801 	.word	0x08003801
 80037b0:	08003801 	.word	0x08003801
 80037b4:	08003801 	.word	0x08003801
 80037b8:	08003801 	.word	0x08003801
 80037bc:	08003801 	.word	0x08003801
 80037c0:	08003801 	.word	0x08003801
 80037c4:	08003809 	.word	0x08003809
 80037c8:	58024400 	.word	0x58024400
 80037cc:	58024800 	.word	0x58024800
 80037d0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d8:	3308      	adds	r3, #8
 80037da:	2101      	movs	r1, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 ffc5 	bl	800476c <RCCEx_PLL2_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037e8:	e00f      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ee:	3328      	adds	r3, #40	; 0x28
 80037f0:	2101      	movs	r1, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 f86c 	bl	80048d0 <RCCEx_PLL3_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037fe:	e004      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003806:	e000      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003812:	4bc0      	ldr	r3, [pc, #768]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800381a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003822:	4abc      	ldr	r2, [pc, #752]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003824:	430b      	orrs	r3, r1
 8003826:	6553      	str	r3, [r2, #84]	; 0x54
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800382e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f002 0302 	and.w	r3, r2, #2
 800383e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003848:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800384c:	460b      	mov	r3, r1
 800384e:	4313      	orrs	r3, r2
 8003850:	d043      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800385a:	2b05      	cmp	r3, #5
 800385c:	d824      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	080038b1 	.word	0x080038b1
 8003868:	0800387d 	.word	0x0800387d
 800386c:	08003893 	.word	0x08003893
 8003870:	080038b1 	.word	0x080038b1
 8003874:	080038b1 	.word	0x080038b1
 8003878:	080038b1 	.word	0x080038b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800387c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003880:	3308      	adds	r3, #8
 8003882:	2101      	movs	r1, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f000 ff71 	bl	800476c <RCCEx_PLL2_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003890:	e00f      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003896:	3328      	adds	r3, #40	; 0x28
 8003898:	2101      	movs	r1, #1
 800389a:	4618      	mov	r0, r3
 800389c:	f001 f818 	bl	80048d0 <RCCEx_PLL3_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038a6:	e004      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038ae:	e000      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80038b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038ba:	4b96      	ldr	r3, [pc, #600]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	f023 0107 	bic.w	r1, r3, #7
 80038c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ca:	4a92      	ldr	r2, [pc, #584]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6553      	str	r3, [r2, #84]	; 0x54
 80038d0:	e003      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f002 0304 	and.w	r3, r2, #4
 80038e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038f0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4313      	orrs	r3, r2
 80038f8:	d043      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80038fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003902:	2b05      	cmp	r3, #5
 8003904:	d824      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003959 	.word	0x08003959
 8003910:	08003925 	.word	0x08003925
 8003914:	0800393b 	.word	0x0800393b
 8003918:	08003959 	.word	0x08003959
 800391c:	08003959 	.word	0x08003959
 8003920:	08003959 	.word	0x08003959
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003928:	3308      	adds	r3, #8
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 ff1d 	bl	800476c <RCCEx_PLL2_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003938:	e00f      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800393a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393e:	3328      	adds	r3, #40	; 0x28
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f000 ffc4 	bl	80048d0 <RCCEx_PLL3_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800394e:	e004      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003956:	e000      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003962:	4b6c      	ldr	r3, [pc, #432]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	f023 0107 	bic.w	r1, r3, #7
 800396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003972:	4a68      	ldr	r2, [pc, #416]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003974:	430b      	orrs	r3, r1
 8003976:	6593      	str	r3, [r2, #88]	; 0x58
 8003978:	e003      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800397e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f002 0320 	and.w	r3, r2, #32
 800398e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800399c:	460b      	mov	r3, r1
 800399e:	4313      	orrs	r3, r2
 80039a0:	d055      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ae:	d033      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80039b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b4:	d82c      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ba:	d02f      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d826      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039c6:	d02b      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80039c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039cc:	d820      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d2:	d012      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80039d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d8:	d81a      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d022      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80039de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e2:	d115      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e8:	3308      	adds	r3, #8
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 febd 	bl	800476c <RCCEx_PLL2_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039f8:	e015      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fe:	3328      	adds	r3, #40	; 0x28
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 ff64 	bl	80048d0 <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a16:	e006      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a18:	bf00      	nop
 8003a1a:	e004      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a1c:	bf00      	nop
 8003a1e:	e002      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a3e:	4a35      	ldr	r2, [pc, #212]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6553      	str	r3, [r2, #84]	; 0x54
 8003a44:	e003      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	d058      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a7a:	d033      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a80:	d82c      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a86:	d02f      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d826      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a92:	d02b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a98:	d820      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9e:	d012      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa4:	d81a      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d022      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d115      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fe57 	bl	800476c <RCCEx_PLL2_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ac4:	e015      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aca:	3328      	adds	r3, #40	; 0x28
 8003acc:	2102      	movs	r1, #2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fefe 	bl	80048d0 <RCCEx_PLL3_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ada:	e00a      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ae2:	e006      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003ae4:	bf00      	nop
 8003ae6:	e004      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003ae8:	bf00      	nop
 8003aea:	e002      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003aec:	bf00      	nop
 8003aee:	e000      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10e      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b0a:	4a02      	ldr	r2, [pc, #8]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b10:	e006      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003b12:	bf00      	nop
 8003b14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	d055      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b4c:	d033      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003b4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b52:	d82c      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d02f      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b5e:	d826      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b64:	d02b      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003b66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b6a:	d820      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b70:	d012      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b76:	d81a      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d022      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b80:	d115      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b86:	3308      	adds	r3, #8
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fdee 	bl	800476c <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b96:	e015      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9c:	3328      	adds	r3, #40	; 0x28
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fe95 	bl	80048d0 <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e004      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bcc:	4ba1      	ldr	r3, [pc, #644]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bdc:	4a9d      	ldr	r2, [pc, #628]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bde:	430b      	orrs	r3, r1
 8003be0:	6593      	str	r3, [r2, #88]	; 0x58
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003be8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f002 0308 	and.w	r3, r2, #8
 8003bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c06:	460b      	mov	r3, r1
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	d01e      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1e:	3328      	adds	r3, #40	; 0x28
 8003c20:	2102      	movs	r1, #2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fe54 	bl	80048d0 <RCCEx_PLL3_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c34:	4b87      	ldr	r3, [pc, #540]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c44:	4a83      	ldr	r2, [pc, #524]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f002 0310 	and.w	r3, r2, #16
 8003c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c64:	460b      	mov	r3, r1
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d01e      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c76:	d10c      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7c:	3328      	adds	r3, #40	; 0x28
 8003c7e:	2102      	movs	r1, #2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fe25 	bl	80048d0 <RCCEx_PLL3_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c92:	4b70      	ldr	r3, [pc, #448]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ca2:	4a6c      	ldr	r2, [pc, #432]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003cb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cbe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	d03e      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ccc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd4:	d022      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cda:	d81b      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003ce6:	e015      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cec:	3308      	adds	r3, #8
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fd3b 	bl	800476c <RCCEx_PLL2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cfc:	e00f      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d02:	3328      	adds	r3, #40	; 0x28
 8003d04:	2102      	movs	r1, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fde2 	bl	80048d0 <RCCEx_PLL3_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d26:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d36:	4a47      	ldr	r2, [pc, #284]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d3c:	e003      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003d52:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d54:	2300      	movs	r3, #0
 8003d56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	d03b      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d6e:	d01f      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003d70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d74:	d818      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d80:	d007      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003d82:	e011      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d84:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d90:	e00f      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d96:	3328      	adds	r3, #40	; 0x28
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fd98 	bl	80048d0 <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003da6:	e004      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6553      	str	r3, [r2, #84]	; 0x54
 8003dd0:	e003      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003de6:	673b      	str	r3, [r7, #112]	; 0x70
 8003de8:	2300      	movs	r3, #0
 8003dea:	677b      	str	r3, [r7, #116]	; 0x74
 8003dec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003df0:	460b      	mov	r3, r1
 8003df2:	4313      	orrs	r3, r2
 8003df4:	d034      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e04:	d007      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003e06:	e011      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	4a11      	ldr	r2, [pc, #68]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e14:	e00e      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fca4 	bl	800476c <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e2a:	e003      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	4a02      	ldr	r2, [pc, #8]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e50:	e006      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003e52:	bf00      	nop
 8003e54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003e6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e6e:	2300      	movs	r3, #0
 8003e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003e76:	460b      	mov	r3, r1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	d00c      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e80:	3328      	adds	r3, #40	; 0x28
 8003e82:	2102      	movs	r1, #2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fd23 	bl	80048d0 <RCCEx_PLL3_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ea8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003eac:	460b      	mov	r3, r1
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	d038      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ebe:	d018      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec4:	d811      	bhi.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eca:	d014      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed0:	d80b      	bhi.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d011      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eda:	d106      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003edc:	4bc3      	ldr	r3, [pc, #780]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	4ac2      	ldr	r2, [pc, #776]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ee8:	e008      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ef0:	e004      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003ef2:	bf00      	nop
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f04:	4bb9      	ldr	r3, [pc, #740]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	4ab5      	ldr	r2, [pc, #724]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f16:	430b      	orrs	r3, r1
 8003f18:	6553      	str	r3, [r2, #84]	; 0x54
 8003f1a:	e003      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f32:	2300      	movs	r3, #0
 8003f34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f40:	4baa      	ldr	r3, [pc, #680]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4e:	4aa7      	ldr	r2, [pc, #668]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003f60:	653b      	str	r3, [r7, #80]	; 0x50
 8003f62:	2300      	movs	r3, #0
 8003f64:	657b      	str	r3, [r7, #84]	; 0x54
 8003f66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f70:	4b9e      	ldr	r3, [pc, #632]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f74:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a9b      	ldr	r2, [pc, #620]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f92:	2300      	movs	r3, #0
 8003f94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f96:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003fa0:	4b92      	ldr	r3, [pc, #584]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fae:	4a8f      	ldr	r2, [pc, #572]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fd0:	4b86      	ldr	r3, [pc, #536]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	4a85      	ldr	r2, [pc, #532]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fda:	6113      	str	r3, [r2, #16]
 8003fdc:	4b83      	ldr	r3, [pc, #524]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fde:	6919      	ldr	r1, [r3, #16]
 8003fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003fe8:	4a80      	ldr	r2, [pc, #512]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004000:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004004:	460b      	mov	r3, r1
 8004006:	4313      	orrs	r3, r2
 8004008:	d009      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800400a:	4b78      	ldr	r3, [pc, #480]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	4a74      	ldr	r2, [pc, #464]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800401a:	430b      	orrs	r3, r1
 800401c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800401e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
 800402c:	2300      	movs	r3, #0
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
 8004030:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800403a:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404a:	4a68      	ldr	r2, [pc, #416]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800404c:	430b      	orrs	r3, r1
 800404e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	2100      	movs	r1, #0
 800405a:	62b9      	str	r1, [r7, #40]	; 0x28
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004062:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004066:	460b      	mov	r3, r1
 8004068:	4313      	orrs	r3, r2
 800406a:	d011      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800406c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004070:	3308      	adds	r3, #8
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fb79 	bl	800476c <RCCEx_PLL2_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004080:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800408c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	2100      	movs	r1, #0
 800409a:	6239      	str	r1, [r7, #32]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
 80040a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	d011      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b0:	3308      	adds	r3, #8
 80040b2:	2101      	movs	r1, #1
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fb59 	bl	800476c <RCCEx_PLL2_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80040c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	2100      	movs	r1, #0
 80040da:	61b9      	str	r1, [r7, #24]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040e6:	460b      	mov	r3, r1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	d011      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f0:	3308      	adds	r3, #8
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fb39 	bl	800476c <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004100:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800410c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	2100      	movs	r1, #0
 800411a:	6139      	str	r1, [r7, #16]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004126:	460b      	mov	r3, r1
 8004128:	4313      	orrs	r3, r2
 800412a:	d011      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800412c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004130:	3328      	adds	r3, #40	; 0x28
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fbcb 	bl	80048d0 <RCCEx_PLL3_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004140:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800414c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	2100      	movs	r1, #0
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004166:	460b      	mov	r3, r1
 8004168:	4313      	orrs	r3, r2
 800416a:	d011      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800416c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004170:	3328      	adds	r3, #40	; 0x28
 8004172:	2101      	movs	r1, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fbab 	bl	80048d0 <RCCEx_PLL3_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004180:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800418c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	2100      	movs	r1, #0
 800419a:	6039      	str	r1, [r7, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d011      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b0:	3328      	adds	r3, #40	; 0x28
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fb8b 	bl	80048d0 <RCCEx_PLL3_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80041c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80041d0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
}
 80041de:	4618      	mov	r0, r3
 80041e0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	58024400 	.word	0x58024400

080041f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80041f4:	f7fe fde2 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4904      	ldr	r1, [pc, #16]	; (8004218 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	58024400 	.word	0x58024400
 8004218:	08009b80 	.word	0x08009b80

0800421c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004224:	4ba1      	ldr	r3, [pc, #644]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800422e:	4b9f      	ldr	r3, [pc, #636]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	0b1b      	lsrs	r3, r3, #12
 8004234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004238:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800423a:	4b9c      	ldr	r3, [pc, #624]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004246:	4b99      	ldr	r3, [pc, #612]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	08db      	lsrs	r3, r3, #3
 800424c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8111 	beq.w	800448c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b02      	cmp	r3, #2
 800426e:	f000 8083 	beq.w	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b02      	cmp	r3, #2
 8004276:	f200 80a1 	bhi.w	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d056      	beq.n	8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004286:	e099      	b.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004288:	4b88      	ldr	r3, [pc, #544]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02d      	beq.n	80042f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004294:	4b85      	ldr	r3, [pc, #532]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	4a84      	ldr	r2, [pc, #528]	; (80044b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b7b      	ldr	r3, [pc, #492]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80042d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80042ee:	e087      	b.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a03 	vldr	s12, [r7, #12]
 8004316:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004332:	e065      	b.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b59      	ldr	r3, [pc, #356]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a03 	vldr	s12, [r7, #12]
 800435a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004376:	e043      	b.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b48      	ldr	r3, [pc, #288]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a03 	vldr	s12, [r7, #12]
 800439e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ba:	e021      	b.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b37      	ldr	r3, [pc, #220]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004400:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	0a5b      	lsrs	r3, r3, #9
 8004406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800441a:	edd7 6a07 	vldr	s13, [r7, #28]
 800441e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004426:	ee17 2a90 	vmov	r2, s15
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800442e:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004444:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004448:	edd7 6a07 	vldr	s13, [r7, #28]
 800444c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004454:	ee17 2a90 	vmov	r2, s15
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800445c:	4b13      	ldr	r3, [pc, #76]	; (80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	0e1b      	lsrs	r3, r3, #24
 8004462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004472:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004476:	edd7 6a07 	vldr	s13, [r7, #28]
 800447a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004482:	ee17 2a90 	vmov	r2, s15
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800448a:	e008      	b.n	800449e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
}
 800449e:	bf00      	nop
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	03d09000 	.word	0x03d09000
 80044b4:	46000000 	.word	0x46000000
 80044b8:	4c742400 	.word	0x4c742400
 80044bc:	4a742400 	.word	0x4a742400
 80044c0:	4af42400 	.word	0x4af42400

080044c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044cc:	4ba1      	ldr	r3, [pc, #644]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80044d6:	4b9f      	ldr	r3, [pc, #636]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	0d1b      	lsrs	r3, r3, #20
 80044dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044e2:	4b9c      	ldr	r3, [pc, #624]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80044ee:	4b99      	ldr	r3, [pc, #612]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	08db      	lsrs	r3, r3, #3
 80044f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8111 	beq.w	8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b02      	cmp	r3, #2
 8004516:	f000 8083 	beq.w	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b02      	cmp	r3, #2
 800451e:	f200 80a1 	bhi.w	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d056      	beq.n	80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800452e:	e099      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004530:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02d      	beq.n	8004598 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800453c:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	08db      	lsrs	r3, r3, #3
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	4a84      	ldr	r2, [pc, #528]	; (8004758 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
 800454c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	ee07 3a90 	vmov	s15, r3
 8004554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004566:	4b7b      	ldr	r3, [pc, #492]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004576:	ed97 6a03 	vldr	s12, [r7, #12]
 800457a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800475c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800457e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800458a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800458e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004592:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004596:	e087      	b.n	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045aa:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80045be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800475c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045da:	e065      	b.n	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b59      	ldr	r3, [pc, #356]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a56 	vldr	s11, [pc, #344]	; 800475c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800461e:	e043      	b.n	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b48      	ldr	r3, [pc, #288]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a03 	vldr	s12, [r7, #12]
 8004646:	eddf 5a45 	vldr	s11, [pc, #276]	; 800475c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004662:	e021      	b.n	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b37      	ldr	r3, [pc, #220]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a03 	vldr	s12, [r7, #12]
 800468a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800475c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80046a8:	4b2a      	ldr	r3, [pc, #168]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	0a5b      	lsrs	r3, r3, #9
 80046ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ce:	ee17 2a90 	vmov	r2, s15
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80046d6:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	0c1b      	lsrs	r3, r3, #16
 80046dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fc:	ee17 2a90 	vmov	r2, s15
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	0e1b      	lsrs	r3, r3, #24
 800470a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800471a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800471e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800472a:	ee17 2a90 	vmov	r2, s15
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004732:	e008      	b.n	8004746 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
}
 8004746:	bf00      	nop
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	58024400 	.word	0x58024400
 8004758:	03d09000 	.word	0x03d09000
 800475c:	46000000 	.word	0x46000000
 8004760:	4c742400 	.word	0x4c742400
 8004764:	4a742400 	.word	0x4a742400
 8004768:	4af42400 	.word	0x4af42400

0800476c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800477a:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b03      	cmp	r3, #3
 8004784:	d101      	bne.n	800478a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e099      	b.n	80048be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800478a:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a4e      	ldr	r2, [pc, #312]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004790:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004796:	f7fd f877 	bl	8001888 <HAL_GetTick>
 800479a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800479c:	e008      	b.n	80047b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800479e:	f7fd f873 	bl	8001888 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e086      	b.n	80048be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047b0:	4b45      	ldr	r3, [pc, #276]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f0      	bne.n	800479e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047bc:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	031b      	lsls	r3, r3, #12
 80047ca:	493f      	ldr	r1, [pc, #252]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	628b      	str	r3, [r1, #40]	; 0x28
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	3b01      	subs	r3, #1
 80047e0:	025b      	lsls	r3, r3, #9
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	061b      	lsls	r3, r3, #24
 80047fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004800:	4931      	ldr	r1, [pc, #196]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004802:	4313      	orrs	r3, r2
 8004804:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004806:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	492d      	ldr	r1, [pc, #180]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004818:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	f023 0220 	bic.w	r2, r3, #32
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	4928      	ldr	r1, [pc, #160]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800482a:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004830:	f023 0310 	bic.w	r3, r3, #16
 8004834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004836:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <RCCEx_PLL2_Config+0x160>)
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	69d2      	ldr	r2, [r2, #28]
 8004842:	00d2      	lsls	r2, r2, #3
 8004844:	4920      	ldr	r1, [pc, #128]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004846:	4313      	orrs	r3, r2
 8004848:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800484a:	4b1f      	ldr	r3, [pc, #124]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004850:	f043 0310 	orr.w	r3, r3, #16
 8004854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800485c:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004868:	e00f      	b.n	800488a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d106      	bne.n	800487e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004870:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800487c:	e005      	b.n	800488a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004888:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004890:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004896:	f7fc fff7 	bl	8001888 <HAL_GetTick>
 800489a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800489c:	e008      	b.n	80048b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800489e:	f7fc fff3 	bl	8001888 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e006      	b.n	80048be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
 80048cc:	ffff0007 	.word	0xffff0007

080048d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048de:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d101      	bne.n	80048ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e099      	b.n	8004a22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048ee:	4b4f      	ldr	r3, [pc, #316]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a4e      	ldr	r2, [pc, #312]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80048f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fa:	f7fc ffc5 	bl	8001888 <HAL_GetTick>
 80048fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004900:	e008      	b.n	8004914 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004902:	f7fc ffc1 	bl	8001888 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e086      	b.n	8004a22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004914:	4b45      	ldr	r3, [pc, #276]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004920:	4b42      	ldr	r3, [pc, #264]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	051b      	lsls	r3, r3, #20
 800492e:	493f      	ldr	r1, [pc, #252]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	628b      	str	r3, [r1, #40]	; 0x28
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	3b01      	subs	r3, #1
 800493a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	3b01      	subs	r3, #1
 8004944:	025b      	lsls	r3, r3, #9
 8004946:	b29b      	uxth	r3, r3
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	3b01      	subs	r3, #1
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	3b01      	subs	r3, #1
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004964:	4931      	ldr	r1, [pc, #196]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800496a:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	492d      	ldr	r1, [pc, #180]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800497c:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	4928      	ldr	r1, [pc, #160]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 800498a:	4313      	orrs	r3, r2
 800498c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800498e:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	4a26      	ldr	r2, [pc, #152]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800499a:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 800499c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800499e:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <RCCEx_PLL3_Config+0x160>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	69d2      	ldr	r2, [r2, #28]
 80049a6:	00d2      	lsls	r2, r2, #3
 80049a8:	4920      	ldr	r1, [pc, #128]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049ae:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	4a1e      	ldr	r2, [pc, #120]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4a19      	ldr	r2, [pc, #100]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049cc:	e00f      	b.n	80049ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d106      	bne.n	80049e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049d4:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	4a14      	ldr	r2, [pc, #80]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049e0:	e005      	b.n	80049ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049e2:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fa:	f7fc ff45 	bl	8001888 <HAL_GetTick>
 80049fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a02:	f7fc ff41 	bl	8001888 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e006      	b.n	8004a22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	ffff0007 	.word	0xffff0007

08004a34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e10f      	b.n	8004c66 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a87      	ldr	r2, [pc, #540]	; (8004c70 <HAL_SPI_Init+0x23c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00f      	beq.n	8004a76 <HAL_SPI_Init+0x42>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a86      	ldr	r2, [pc, #536]	; (8004c74 <HAL_SPI_Init+0x240>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00a      	beq.n	8004a76 <HAL_SPI_Init+0x42>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a84      	ldr	r2, [pc, #528]	; (8004c78 <HAL_SPI_Init+0x244>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d005      	beq.n	8004a76 <HAL_SPI_Init+0x42>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d901      	bls.n	8004a76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0f7      	b.n	8004c66 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fbea 	bl	8005250 <SPI_GetPacketSize>
 8004a7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a7b      	ldr	r2, [pc, #492]	; (8004c70 <HAL_SPI_Init+0x23c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00c      	beq.n	8004aa2 <HAL_SPI_Init+0x6e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a79      	ldr	r2, [pc, #484]	; (8004c74 <HAL_SPI_Init+0x240>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <HAL_SPI_Init+0x6e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a78      	ldr	r2, [pc, #480]	; (8004c78 <HAL_SPI_Init+0x244>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d002      	beq.n	8004aa2 <HAL_SPI_Init+0x6e>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d811      	bhi.n	8004ac6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004aa6:	4a72      	ldr	r2, [pc, #456]	; (8004c70 <HAL_SPI_Init+0x23c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a70      	ldr	r2, [pc, #448]	; (8004c74 <HAL_SPI_Init+0x240>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_SPI_Init+0x8c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a6f      	ldr	r2, [pc, #444]	; (8004c78 <HAL_SPI_Init+0x244>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d104      	bne.n	8004aca <HAL_SPI_Init+0x96>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d901      	bls.n	8004aca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0cd      	b.n	8004c66 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fbc8 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004b06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b10:	d119      	bne.n	8004b46 <HAL_SPI_Init+0x112>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b1a:	d103      	bne.n	8004b24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10c      	bne.n	8004b46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b34:	d107      	bne.n	8004b46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00f      	beq.n	8004b72 <HAL_SPI_Init+0x13e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b06      	cmp	r3, #6
 8004b58:	d90b      	bls.n	8004b72 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e007      	b.n	8004b82 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	ea42 0103 	orr.w	r1, r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be2:	ea42 0103 	orr.w	r1, r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d113      	bne.n	8004c22 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40013000 	.word	0x40013000
 8004c74:	40003800 	.word	0x40003800
 8004c78:	40003c00 	.word	0x40003c00

08004c7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08c      	sub	sp, #48	; 0x30
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3320      	adds	r3, #32
 8004c96:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3330      	adds	r3, #48	; 0x30
 8004c9e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_SPI_TransmitReceive+0x32>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e1fd      	b.n	80050aa <HAL_SPI_TransmitReceive+0x42e>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb6:	f7fc fde7 	bl	8001888 <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8004cbc:	887b      	ldrh	r3, [r7, #2]
 8004cbe:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8004cc0:	887b      	ldrh	r3, [r7, #2]
 8004cc2:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d009      	beq.n	8004ce4 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e1e2      	b.n	80050aa <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0x7a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0x7a>
 8004cf0:	887b      	ldrh	r3, [r7, #2]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d08:	e1cf      	b.n	80050aa <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2205      	movs	r2, #5
 8004d0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	887a      	ldrh	r2, [r7, #2]
 8004d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	887a      	ldrh	r2, [r7, #2]
 8004d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	887a      	ldrh	r2, [r7, #2]
 8004d3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	887a      	ldrh	r2, [r7, #2]
 8004d42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8004d60:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	4b82      	ldr	r3, [pc, #520]	; (8004f74 <HAL_SPI_TransmitReceive+0x2f8>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	8879      	ldrh	r1, [r7, #2]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	430b      	orrs	r3, r1
 8004d74:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0201 	orr.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8e:	d107      	bne.n	8004da0 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b0f      	cmp	r3, #15
 8004da6:	d970      	bls.n	8004e8a <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004da8:	e068      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d11a      	bne.n	8004dee <HAL_SPI_TransmitReceive+0x172>
 8004db8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d017      	beq.n	8004dee <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dce:	1d1a      	adds	r2, r3, #4
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004dec:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	f248 0308 	movw	r3, #32776	; 0x8008
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01a      	beq.n	8004e34 <HAL_SPI_TransmitReceive+0x1b8>
 8004dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e0e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e14:	1d1a      	adds	r2, r3, #4
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e32:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e34:	f7fc fd28 	bl	8001888 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d803      	bhi.n	8004e4c <HAL_SPI_TransmitReceive+0x1d0>
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d102      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0x1d6>
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d114      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f92e 	bl	80050b4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e116      	b.n	80050aa <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004e7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d193      	bne.n	8004daa <HAL_SPI_TransmitReceive+0x12e>
 8004e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d190      	bne.n	8004daa <HAL_SPI_TransmitReceive+0x12e>
 8004e88:	e0e8      	b.n	800505c <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b07      	cmp	r3, #7
 8004e90:	f240 80de 	bls.w	8005050 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004e94:	e066      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d119      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x25c>
 8004ea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ed6:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d11a      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x2a0>
 8004ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d017      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	8812      	ldrh	r2, [r2, #0]
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004f1a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f1c:	f7fc fcb4 	bl	8001888 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d803      	bhi.n	8004f34 <HAL_SPI_TransmitReceive+0x2b8>
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f32:	d102      	bne.n	8004f3a <HAL_SPI_TransmitReceive+0x2be>
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d114      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f8ba 	bl	80050b4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e0a2      	b.n	80050aa <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004f64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d195      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x21a>
 8004f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d192      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x21a>
 8004f70:	e074      	b.n	800505c <HAL_SPI_TransmitReceive+0x3e0>
 8004f72:	bf00      	nop
 8004f74:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d11b      	bne.n	8004fbe <HAL_SPI_TransmitReceive+0x342>
 8004f86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d018      	beq.n	8004fbe <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3320      	adds	r3, #32
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004fbc:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d11d      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x38c>
 8004fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01a      	beq.n	8005008 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fde:	7812      	ldrb	r2, [r2, #0]
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005006:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005008:	f7fc fc3e 	bl	8001888 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005014:	429a      	cmp	r2, r3
 8005016:	d803      	bhi.n	8005020 <HAL_SPI_TransmitReceive+0x3a4>
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d102      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x3aa>
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	2b00      	cmp	r3, #0
 8005024:	d114      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f844 	bl	80050b4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e02c      	b.n	80050aa <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005050:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005052:	2b00      	cmp	r3, #0
 8005054:	d190      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x2fc>
 8005056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d18d      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	2200      	movs	r2, #0
 8005064:	2108      	movs	r1, #8
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f8c4 	bl	80051f4 <SPI_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005078:	f043 0220 	orr.w	r2, r3, #32
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f816 	bl	80050b4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e001      	b.n	80050aa <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 80050a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3728      	adds	r7, #40	; 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop

080050b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0208 	orr.w	r2, r2, #8
 80050d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0210 	orr.w	r2, r2, #16
 80050e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0201 	bic.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6919      	ldr	r1, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b3c      	ldr	r3, [pc, #240]	; (80051f0 <SPI_CloseTransfer+0x13c>)
 8005100:	400b      	ands	r3, r1
 8005102:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005112:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b04      	cmp	r3, #4
 800511e:	d014      	beq.n	800514a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00f      	beq.n	800514a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005130:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0220 	orr.w	r2, r2, #32
 8005148:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d014      	beq.n	8005180 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00f      	beq.n	8005180 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005166:	f043 0204 	orr.w	r2, r3, #4
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800517e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00f      	beq.n	80051aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005190:	f043 0201 	orr.w	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00f      	beq.n	80051d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ba:	f043 0208 	orr.w	r2, r3, #8
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	fffffc90 	.word	0xfffffc90

080051f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005204:	e010      	b.n	8005228 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005206:	f7fc fb3f 	bl	8001888 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d803      	bhi.n	800521e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d102      	bne.n	8005224 <SPI_WaitOnFlagUntilTimeout+0x30>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e00f      	b.n	8005248 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695a      	ldr	r2, [r3, #20]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4013      	ands	r3, r2
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	429a      	cmp	r2, r3
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	429a      	cmp	r2, r3
 8005244:	d0df      	beq.n	8005206 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	3301      	adds	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	3307      	adds	r3, #7
 800526e:	08db      	lsrs	r3, r3, #3
 8005270:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	fb02 f303 	mul.w	r3, r2, r3
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e049      	b.n	800532c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fc f849 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 f99d 	bl	8005604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d001      	beq.n	800534c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e04c      	b.n	80053e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a26      	ldr	r2, [pc, #152]	; (80053f4 <HAL_TIM_Base_Start+0xc0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d022      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d01d      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_TIM_Base_Start+0xc4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d018      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a21      	ldr	r2, [pc, #132]	; (80053fc <HAL_TIM_Base_Start+0xc8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <HAL_TIM_Base_Start+0xcc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00e      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_TIM_Base_Start+0xd0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d009      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_TIM_Base_Start+0xd4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIM_Base_Start+0x70>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_TIM_Base_Start+0xd8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d115      	bne.n	80053d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_TIM_Base_Start+0xdc>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b06      	cmp	r3, #6
 80053b4:	d015      	beq.n	80053e2 <HAL_TIM_Base_Start+0xae>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d011      	beq.n	80053e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	e008      	b.n	80053e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e000      	b.n	80053e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40000c00 	.word	0x40000c00
 8005404:	40010400 	.word	0x40010400
 8005408:	40001800 	.word	0x40001800
 800540c:	40014000 	.word	0x40014000
 8005410:	00010007 	.word	0x00010007

08005414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_TIM_ConfigClockSource+0x1c>
 800542c:	2302      	movs	r3, #2
 800542e:	e0dc      	b.n	80055ea <HAL_TIM_ConfigClockSource+0x1d6>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800544c:	4013      	ands	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a64      	ldr	r2, [pc, #400]	; (80055f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	f000 80a9 	beq.w	80055be <HAL_TIM_ConfigClockSource+0x1aa>
 800546c:	4a62      	ldr	r2, [pc, #392]	; (80055f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	f200 80ae 	bhi.w	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005474:	4a61      	ldr	r2, [pc, #388]	; (80055fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	f000 80a1 	beq.w	80055be <HAL_TIM_ConfigClockSource+0x1aa>
 800547c:	4a5f      	ldr	r2, [pc, #380]	; (80055fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	f200 80a6 	bhi.w	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005484:	4a5e      	ldr	r2, [pc, #376]	; (8005600 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005486:	4293      	cmp	r3, r2
 8005488:	f000 8099 	beq.w	80055be <HAL_TIM_ConfigClockSource+0x1aa>
 800548c:	4a5c      	ldr	r2, [pc, #368]	; (8005600 <HAL_TIM_ConfigClockSource+0x1ec>)
 800548e:	4293      	cmp	r3, r2
 8005490:	f200 809e 	bhi.w	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005494:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005498:	f000 8091 	beq.w	80055be <HAL_TIM_ConfigClockSource+0x1aa>
 800549c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80054a0:	f200 8096 	bhi.w	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80054a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a8:	f000 8089 	beq.w	80055be <HAL_TIM_ConfigClockSource+0x1aa>
 80054ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b0:	f200 808e 	bhi.w	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80054b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b8:	d03e      	beq.n	8005538 <HAL_TIM_ConfigClockSource+0x124>
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054be:	f200 8087 	bhi.w	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	f000 8086 	beq.w	80055d6 <HAL_TIM_ConfigClockSource+0x1c2>
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d87f      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80054d0:	2b70      	cmp	r3, #112	; 0x70
 80054d2:	d01a      	beq.n	800550a <HAL_TIM_ConfigClockSource+0xf6>
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d87b      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80054d8:	2b60      	cmp	r3, #96	; 0x60
 80054da:	d050      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x16a>
 80054dc:	2b60      	cmp	r3, #96	; 0x60
 80054de:	d877      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80054e0:	2b50      	cmp	r3, #80	; 0x50
 80054e2:	d03c      	beq.n	800555e <HAL_TIM_ConfigClockSource+0x14a>
 80054e4:	2b50      	cmp	r3, #80	; 0x50
 80054e6:	d873      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	d058      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x18a>
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d86f      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80054f0:	2b30      	cmp	r3, #48	; 0x30
 80054f2:	d064      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x1aa>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d86b      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d060      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x1aa>
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d867      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05c      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x1aa>
 8005504:	2b10      	cmp	r3, #16
 8005506:	d05a      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x1aa>
 8005508:	e062      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800551a:	f000 f98b 	bl	8005834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800552c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	609a      	str	r2, [r3, #8]
      break;
 8005536:	e04f      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005548:	f000 f974 	bl	8005834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800555a:	609a      	str	r2, [r3, #8]
      break;
 800555c:	e03c      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556a:	461a      	mov	r2, r3
 800556c:	f000 f8e4 	bl	8005738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2150      	movs	r1, #80	; 0x50
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f93e 	bl	80057f8 <TIM_ITRx_SetConfig>
      break;
 800557c:	e02c      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800558a:	461a      	mov	r2, r3
 800558c:	f000 f903 	bl	8005796 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2160      	movs	r1, #96	; 0x60
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f92e 	bl	80057f8 <TIM_ITRx_SetConfig>
      break;
 800559c:	e01c      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055aa:	461a      	mov	r2, r3
 80055ac:	f000 f8c4 	bl	8005738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2140      	movs	r1, #64	; 0x40
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f91e 	bl	80057f8 <TIM_ITRx_SetConfig>
      break;
 80055bc:	e00c      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f000 f915 	bl	80057f8 <TIM_ITRx_SetConfig>
      break;
 80055ce:	e003      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
      break;
 80055d4:	e000      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80055d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	ffceff88 	.word	0xffceff88
 80055f8:	00100040 	.word	0x00100040
 80055fc:	00100030 	.word	0x00100030
 8005600:	00100020 	.word	0x00100020

08005604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a40      	ldr	r2, [pc, #256]	; (8005718 <TIM_Base_SetConfig+0x114>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005622:	d00f      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a3d      	ldr	r2, [pc, #244]	; (800571c <TIM_Base_SetConfig+0x118>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00b      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a3c      	ldr	r2, [pc, #240]	; (8005720 <TIM_Base_SetConfig+0x11c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a3b      	ldr	r2, [pc, #236]	; (8005724 <TIM_Base_SetConfig+0x120>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a3a      	ldr	r2, [pc, #232]	; (8005728 <TIM_Base_SetConfig+0x124>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d108      	bne.n	8005656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2f      	ldr	r2, [pc, #188]	; (8005718 <TIM_Base_SetConfig+0x114>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d01f      	beq.n	800569e <TIM_Base_SetConfig+0x9a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005664:	d01b      	beq.n	800569e <TIM_Base_SetConfig+0x9a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2c      	ldr	r2, [pc, #176]	; (800571c <TIM_Base_SetConfig+0x118>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d017      	beq.n	800569e <TIM_Base_SetConfig+0x9a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a2b      	ldr	r2, [pc, #172]	; (8005720 <TIM_Base_SetConfig+0x11c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d013      	beq.n	800569e <TIM_Base_SetConfig+0x9a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2a      	ldr	r2, [pc, #168]	; (8005724 <TIM_Base_SetConfig+0x120>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00f      	beq.n	800569e <TIM_Base_SetConfig+0x9a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a29      	ldr	r2, [pc, #164]	; (8005728 <TIM_Base_SetConfig+0x124>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00b      	beq.n	800569e <TIM_Base_SetConfig+0x9a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a28      	ldr	r2, [pc, #160]	; (800572c <TIM_Base_SetConfig+0x128>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d007      	beq.n	800569e <TIM_Base_SetConfig+0x9a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a27      	ldr	r2, [pc, #156]	; (8005730 <TIM_Base_SetConfig+0x12c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d003      	beq.n	800569e <TIM_Base_SetConfig+0x9a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a26      	ldr	r2, [pc, #152]	; (8005734 <TIM_Base_SetConfig+0x130>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d108      	bne.n	80056b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a10      	ldr	r2, [pc, #64]	; (8005718 <TIM_Base_SetConfig+0x114>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00f      	beq.n	80056fc <TIM_Base_SetConfig+0xf8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a12      	ldr	r2, [pc, #72]	; (8005728 <TIM_Base_SetConfig+0x124>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00b      	beq.n	80056fc <TIM_Base_SetConfig+0xf8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a11      	ldr	r2, [pc, #68]	; (800572c <TIM_Base_SetConfig+0x128>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d007      	beq.n	80056fc <TIM_Base_SetConfig+0xf8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a10      	ldr	r2, [pc, #64]	; (8005730 <TIM_Base_SetConfig+0x12c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <TIM_Base_SetConfig+0xf8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a0f      	ldr	r2, [pc, #60]	; (8005734 <TIM_Base_SetConfig+0x130>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d103      	bne.n	8005704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	615a      	str	r2, [r3, #20]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40010400 	.word	0x40010400
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0201 	bic.w	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f023 030a 	bic.w	r3, r3, #10
 8005774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005796:	b480      	push	{r7}
 8005798:	b087      	sub	sp, #28
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f023 0210 	bic.w	r2, r3, #16
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4b09      	ldr	r3, [pc, #36]	; (8005830 <TIM_ITRx_SetConfig+0x38>)
 800580c:	4013      	ands	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	f043 0307 	orr.w	r3, r3, #7
 800581a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	609a      	str	r2, [r3, #8]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	ffcfff8f 	.word	0xffcfff8f

08005834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800584e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	021a      	lsls	r2, r3, #8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	431a      	orrs	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4313      	orrs	r3, r2
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	609a      	str	r2, [r3, #8]
}
 8005868:	bf00      	nop
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005888:	2302      	movs	r3, #2
 800588a:	e06d      	b.n	8005968 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a30      	ldr	r2, [pc, #192]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2f      	ldr	r2, [pc, #188]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d108      	bne.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a20      	ldr	r2, [pc, #128]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d022      	beq.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fe:	d01d      	beq.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1d      	ldr	r2, [pc, #116]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d018      	beq.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1a      	ldr	r2, [pc, #104]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00e      	beq.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a15      	ldr	r2, [pc, #84]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a16      	ldr	r2, [pc, #88]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a15      	ldr	r2, [pc, #84]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d10c      	bne.n	8005956 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005942:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	4313      	orrs	r3, r2
 800594c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40010000 	.word	0x40010000
 8005978:	40010400 	.word	0x40010400
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40001800 	.word	0x40001800
 800598c:	40014000 	.word	0x40014000

08005990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e042      	b.n	8005a28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fb fce5 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2224      	movs	r2, #36	; 0x24
 80059be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8ba 	bl	8005b4c <UART_SetConfig>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e022      	b.n	8005a28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 ff1a 	bl	8006824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 ffa1 	bl	8006968 <UART_CheckIdleState>
 8005a26:	4603      	mov	r3, r0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d17b      	bne.n	8005b42 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_UART_Transmit+0x26>
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e074      	b.n	8005b44 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2221      	movs	r2, #33	; 0x21
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a6a:	f7fb ff0d 	bl	8001888 <HAL_GetTick>
 8005a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88fa      	ldrh	r2, [r7, #6]
 8005a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a88:	d108      	bne.n	8005a9c <HAL_UART_Transmit+0x6c>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	e003      	b.n	8005aa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005aa4:	e030      	b.n	8005b08 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2200      	movs	r2, #0
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f001 f803 	bl	8006abc <UART_WaitOnFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e03d      	b.n	8005b44 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10b      	bne.n	8005ae6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e007      	b.n	8005af6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1c8      	bne.n	8005aa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 ffcc 	bl	8006abc <UART_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e006      	b.n	8005b44 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b50:	b092      	sub	sp, #72	; 0x48
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4bbe      	ldr	r3, [pc, #760]	; (8005e74 <UART_SetConfig+0x328>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4ab3      	ldr	r2, [pc, #716]	; (8005e78 <UART_SetConfig+0x32c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	4baf      	ldr	r3, [pc, #700]	; (8005e7c <UART_SetConfig+0x330>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	f023 010f 	bic.w	r1, r3, #15
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4aa6      	ldr	r2, [pc, #664]	; (8005e80 <UART_SetConfig+0x334>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d177      	bne.n	8005cdc <UART_SetConfig+0x190>
 8005bec:	4ba5      	ldr	r3, [pc, #660]	; (8005e84 <UART_SetConfig+0x338>)
 8005bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bf4:	2b28      	cmp	r3, #40	; 0x28
 8005bf6:	d86d      	bhi.n	8005cd4 <UART_SetConfig+0x188>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0xb4>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005ca5 	.word	0x08005ca5
 8005c04:	08005cd5 	.word	0x08005cd5
 8005c08:	08005cd5 	.word	0x08005cd5
 8005c0c:	08005cd5 	.word	0x08005cd5
 8005c10:	08005cd5 	.word	0x08005cd5
 8005c14:	08005cd5 	.word	0x08005cd5
 8005c18:	08005cd5 	.word	0x08005cd5
 8005c1c:	08005cd5 	.word	0x08005cd5
 8005c20:	08005cad 	.word	0x08005cad
 8005c24:	08005cd5 	.word	0x08005cd5
 8005c28:	08005cd5 	.word	0x08005cd5
 8005c2c:	08005cd5 	.word	0x08005cd5
 8005c30:	08005cd5 	.word	0x08005cd5
 8005c34:	08005cd5 	.word	0x08005cd5
 8005c38:	08005cd5 	.word	0x08005cd5
 8005c3c:	08005cd5 	.word	0x08005cd5
 8005c40:	08005cb5 	.word	0x08005cb5
 8005c44:	08005cd5 	.word	0x08005cd5
 8005c48:	08005cd5 	.word	0x08005cd5
 8005c4c:	08005cd5 	.word	0x08005cd5
 8005c50:	08005cd5 	.word	0x08005cd5
 8005c54:	08005cd5 	.word	0x08005cd5
 8005c58:	08005cd5 	.word	0x08005cd5
 8005c5c:	08005cd5 	.word	0x08005cd5
 8005c60:	08005cbd 	.word	0x08005cbd
 8005c64:	08005cd5 	.word	0x08005cd5
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005cd5 	.word	0x08005cd5
 8005c70:	08005cd5 	.word	0x08005cd5
 8005c74:	08005cd5 	.word	0x08005cd5
 8005c78:	08005cd5 	.word	0x08005cd5
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005cc5 	.word	0x08005cc5
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cd5 	.word	0x08005cd5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005caa:	e326      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005cac:	2304      	movs	r3, #4
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb2:	e322      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005cb4:	2308      	movs	r3, #8
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cba:	e31e      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e31a      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cca:	e316      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005ccc:	2340      	movs	r3, #64	; 0x40
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e312      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e30e      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a69      	ldr	r2, [pc, #420]	; (8005e88 <UART_SetConfig+0x33c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d130      	bne.n	8005d48 <UART_SetConfig+0x1fc>
 8005ce6:	4b67      	ldr	r3, [pc, #412]	; (8005e84 <UART_SetConfig+0x338>)
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d826      	bhi.n	8005d40 <UART_SetConfig+0x1f4>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0x1ac>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d11 	.word	0x08005d11
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d21 	.word	0x08005d21
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d16:	e2f0      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e2ec      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e2e8      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e2e4      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d30:	2320      	movs	r3, #32
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e2e0      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e2dc      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d40:	2380      	movs	r3, #128	; 0x80
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e2d8      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a4f      	ldr	r2, [pc, #316]	; (8005e8c <UART_SetConfig+0x340>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d130      	bne.n	8005db4 <UART_SetConfig+0x268>
 8005d52:	4b4c      	ldr	r3, [pc, #304]	; (8005e84 <UART_SetConfig+0x338>)
 8005d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d826      	bhi.n	8005dac <UART_SetConfig+0x260>
 8005d5e:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <UART_SetConfig+0x218>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d7d 	.word	0x08005d7d
 8005d68:	08005d85 	.word	0x08005d85
 8005d6c:	08005d8d 	.word	0x08005d8d
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e2ba      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d84:	2304      	movs	r3, #4
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8a:	e2b6      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e2b2      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d94:	2310      	movs	r3, #16
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e2ae      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005d9c:	2320      	movs	r3, #32
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e2aa      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005da4:	2340      	movs	r3, #64	; 0x40
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e2a6      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005dac:	2380      	movs	r3, #128	; 0x80
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db2:	e2a2      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a35      	ldr	r2, [pc, #212]	; (8005e90 <UART_SetConfig+0x344>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d130      	bne.n	8005e20 <UART_SetConfig+0x2d4>
 8005dbe:	4b31      	ldr	r3, [pc, #196]	; (8005e84 <UART_SetConfig+0x338>)
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d826      	bhi.n	8005e18 <UART_SetConfig+0x2cc>
 8005dca:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <UART_SetConfig+0x284>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005de9 	.word	0x08005de9
 8005dd4:	08005df1 	.word	0x08005df1
 8005dd8:	08005df9 	.word	0x08005df9
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e11 	.word	0x08005e11
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dee:	e284      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005df0:	2304      	movs	r3, #4
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e280      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005df8:	2308      	movs	r3, #8
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e27c      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005e00:	2310      	movs	r3, #16
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e278      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005e08:	2320      	movs	r3, #32
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e274      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005e10:	2340      	movs	r3, #64	; 0x40
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e270      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e26c      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1b      	ldr	r2, [pc, #108]	; (8005e94 <UART_SetConfig+0x348>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d142      	bne.n	8005eb0 <UART_SetConfig+0x364>
 8005e2a:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <UART_SetConfig+0x338>)
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d838      	bhi.n	8005ea8 <UART_SetConfig+0x35c>
 8005e36:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <UART_SetConfig+0x2f0>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e55 	.word	0x08005e55
 8005e40:	08005e5d 	.word	0x08005e5d
 8005e44:	08005e65 	.word	0x08005e65
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e99 	.word	0x08005e99
 8005e50:	08005ea1 	.word	0x08005ea1
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5a:	e24e      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e62:	e24a      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005e64:	2308      	movs	r3, #8
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e246      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e242      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005e74:	cfff69f3 	.word	0xcfff69f3
 8005e78:	58000c00 	.word	0x58000c00
 8005e7c:	11fff4ff 	.word	0x11fff4ff
 8005e80:	40011000 	.word	0x40011000
 8005e84:	58024400 	.word	0x58024400
 8005e88:	40004400 	.word	0x40004400
 8005e8c:	40004800 	.word	0x40004800
 8005e90:	40004c00 	.word	0x40004c00
 8005e94:	40005000 	.word	0x40005000
 8005e98:	2320      	movs	r3, #32
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9e:	e22c      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005ea0:	2340      	movs	r3, #64	; 0x40
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea6:	e228      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eae:	e224      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4ab1      	ldr	r2, [pc, #708]	; (800617c <UART_SetConfig+0x630>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d176      	bne.n	8005fa8 <UART_SetConfig+0x45c>
 8005eba:	4bb1      	ldr	r3, [pc, #708]	; (8006180 <UART_SetConfig+0x634>)
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ec2:	2b28      	cmp	r3, #40	; 0x28
 8005ec4:	d86c      	bhi.n	8005fa0 <UART_SetConfig+0x454>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <UART_SetConfig+0x380>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005f71 	.word	0x08005f71
 8005ed0:	08005fa1 	.word	0x08005fa1
 8005ed4:	08005fa1 	.word	0x08005fa1
 8005ed8:	08005fa1 	.word	0x08005fa1
 8005edc:	08005fa1 	.word	0x08005fa1
 8005ee0:	08005fa1 	.word	0x08005fa1
 8005ee4:	08005fa1 	.word	0x08005fa1
 8005ee8:	08005fa1 	.word	0x08005fa1
 8005eec:	08005f79 	.word	0x08005f79
 8005ef0:	08005fa1 	.word	0x08005fa1
 8005ef4:	08005fa1 	.word	0x08005fa1
 8005ef8:	08005fa1 	.word	0x08005fa1
 8005efc:	08005fa1 	.word	0x08005fa1
 8005f00:	08005fa1 	.word	0x08005fa1
 8005f04:	08005fa1 	.word	0x08005fa1
 8005f08:	08005fa1 	.word	0x08005fa1
 8005f0c:	08005f81 	.word	0x08005f81
 8005f10:	08005fa1 	.word	0x08005fa1
 8005f14:	08005fa1 	.word	0x08005fa1
 8005f18:	08005fa1 	.word	0x08005fa1
 8005f1c:	08005fa1 	.word	0x08005fa1
 8005f20:	08005fa1 	.word	0x08005fa1
 8005f24:	08005fa1 	.word	0x08005fa1
 8005f28:	08005fa1 	.word	0x08005fa1
 8005f2c:	08005f89 	.word	0x08005f89
 8005f30:	08005fa1 	.word	0x08005fa1
 8005f34:	08005fa1 	.word	0x08005fa1
 8005f38:	08005fa1 	.word	0x08005fa1
 8005f3c:	08005fa1 	.word	0x08005fa1
 8005f40:	08005fa1 	.word	0x08005fa1
 8005f44:	08005fa1 	.word	0x08005fa1
 8005f48:	08005fa1 	.word	0x08005fa1
 8005f4c:	08005f91 	.word	0x08005f91
 8005f50:	08005fa1 	.word	0x08005fa1
 8005f54:	08005fa1 	.word	0x08005fa1
 8005f58:	08005fa1 	.word	0x08005fa1
 8005f5c:	08005fa1 	.word	0x08005fa1
 8005f60:	08005fa1 	.word	0x08005fa1
 8005f64:	08005fa1 	.word	0x08005fa1
 8005f68:	08005fa1 	.word	0x08005fa1
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f76:	e1c0      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e1bc      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f86:	e1b8      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e1b4      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005f90:	2320      	movs	r3, #32
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e1b0      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005f98:	2340      	movs	r3, #64	; 0x40
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e1ac      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005fa0:	2380      	movs	r3, #128	; 0x80
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e1a8      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a75      	ldr	r2, [pc, #468]	; (8006184 <UART_SetConfig+0x638>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d130      	bne.n	8006014 <UART_SetConfig+0x4c8>
 8005fb2:	4b73      	ldr	r3, [pc, #460]	; (8006180 <UART_SetConfig+0x634>)
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d826      	bhi.n	800600c <UART_SetConfig+0x4c0>
 8005fbe:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0x478>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005fdd 	.word	0x08005fdd
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	08005fed 	.word	0x08005fed
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e18a      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e186      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005fec:	2308      	movs	r3, #8
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e182      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e17e      	b.n	80062fa <UART_SetConfig+0x7ae>
 8005ffc:	2320      	movs	r3, #32
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e17a      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006004:	2340      	movs	r3, #64	; 0x40
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e176      	b.n	80062fa <UART_SetConfig+0x7ae>
 800600c:	2380      	movs	r3, #128	; 0x80
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e172      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a5b      	ldr	r2, [pc, #364]	; (8006188 <UART_SetConfig+0x63c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d130      	bne.n	8006080 <UART_SetConfig+0x534>
 800601e:	4b58      	ldr	r3, [pc, #352]	; (8006180 <UART_SetConfig+0x634>)
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b05      	cmp	r3, #5
 8006028:	d826      	bhi.n	8006078 <UART_SetConfig+0x52c>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <UART_SetConfig+0x4e4>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006049 	.word	0x08006049
 8006034:	08006051 	.word	0x08006051
 8006038:	08006059 	.word	0x08006059
 800603c:	08006061 	.word	0x08006061
 8006040:	08006069 	.word	0x08006069
 8006044:	08006071 	.word	0x08006071
 8006048:	2300      	movs	r3, #0
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e154      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e150      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e14c      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e148      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006068:	2320      	movs	r3, #32
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e144      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006070:	2340      	movs	r3, #64	; 0x40
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e140      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e13c      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a41      	ldr	r2, [pc, #260]	; (800618c <UART_SetConfig+0x640>)
 8006086:	4293      	cmp	r3, r2
 8006088:	f040 8082 	bne.w	8006190 <UART_SetConfig+0x644>
 800608c:	4b3c      	ldr	r3, [pc, #240]	; (8006180 <UART_SetConfig+0x634>)
 800608e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006090:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006094:	2b28      	cmp	r3, #40	; 0x28
 8006096:	d86d      	bhi.n	8006174 <UART_SetConfig+0x628>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <UART_SetConfig+0x554>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	08006145 	.word	0x08006145
 80060a4:	08006175 	.word	0x08006175
 80060a8:	08006175 	.word	0x08006175
 80060ac:	08006175 	.word	0x08006175
 80060b0:	08006175 	.word	0x08006175
 80060b4:	08006175 	.word	0x08006175
 80060b8:	08006175 	.word	0x08006175
 80060bc:	08006175 	.word	0x08006175
 80060c0:	0800614d 	.word	0x0800614d
 80060c4:	08006175 	.word	0x08006175
 80060c8:	08006175 	.word	0x08006175
 80060cc:	08006175 	.word	0x08006175
 80060d0:	08006175 	.word	0x08006175
 80060d4:	08006175 	.word	0x08006175
 80060d8:	08006175 	.word	0x08006175
 80060dc:	08006175 	.word	0x08006175
 80060e0:	08006155 	.word	0x08006155
 80060e4:	08006175 	.word	0x08006175
 80060e8:	08006175 	.word	0x08006175
 80060ec:	08006175 	.word	0x08006175
 80060f0:	08006175 	.word	0x08006175
 80060f4:	08006175 	.word	0x08006175
 80060f8:	08006175 	.word	0x08006175
 80060fc:	08006175 	.word	0x08006175
 8006100:	0800615d 	.word	0x0800615d
 8006104:	08006175 	.word	0x08006175
 8006108:	08006175 	.word	0x08006175
 800610c:	08006175 	.word	0x08006175
 8006110:	08006175 	.word	0x08006175
 8006114:	08006175 	.word	0x08006175
 8006118:	08006175 	.word	0x08006175
 800611c:	08006175 	.word	0x08006175
 8006120:	08006165 	.word	0x08006165
 8006124:	08006175 	.word	0x08006175
 8006128:	08006175 	.word	0x08006175
 800612c:	08006175 	.word	0x08006175
 8006130:	08006175 	.word	0x08006175
 8006134:	08006175 	.word	0x08006175
 8006138:	08006175 	.word	0x08006175
 800613c:	08006175 	.word	0x08006175
 8006140:	0800616d 	.word	0x0800616d
 8006144:	2301      	movs	r3, #1
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614a:	e0d6      	b.n	80062fa <UART_SetConfig+0x7ae>
 800614c:	2304      	movs	r3, #4
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006152:	e0d2      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006154:	2308      	movs	r3, #8
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615a:	e0ce      	b.n	80062fa <UART_SetConfig+0x7ae>
 800615c:	2310      	movs	r3, #16
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006162:	e0ca      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006164:	2320      	movs	r3, #32
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616a:	e0c6      	b.n	80062fa <UART_SetConfig+0x7ae>
 800616c:	2340      	movs	r3, #64	; 0x40
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006172:	e0c2      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617a:	e0be      	b.n	80062fa <UART_SetConfig+0x7ae>
 800617c:	40011400 	.word	0x40011400
 8006180:	58024400 	.word	0x58024400
 8006184:	40007800 	.word	0x40007800
 8006188:	40007c00 	.word	0x40007c00
 800618c:	40011800 	.word	0x40011800
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4aad      	ldr	r2, [pc, #692]	; (800644c <UART_SetConfig+0x900>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d176      	bne.n	8006288 <UART_SetConfig+0x73c>
 800619a:	4bad      	ldr	r3, [pc, #692]	; (8006450 <UART_SetConfig+0x904>)
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061a2:	2b28      	cmp	r3, #40	; 0x28
 80061a4:	d86c      	bhi.n	8006280 <UART_SetConfig+0x734>
 80061a6:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <UART_SetConfig+0x660>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	08006251 	.word	0x08006251
 80061b0:	08006281 	.word	0x08006281
 80061b4:	08006281 	.word	0x08006281
 80061b8:	08006281 	.word	0x08006281
 80061bc:	08006281 	.word	0x08006281
 80061c0:	08006281 	.word	0x08006281
 80061c4:	08006281 	.word	0x08006281
 80061c8:	08006281 	.word	0x08006281
 80061cc:	08006259 	.word	0x08006259
 80061d0:	08006281 	.word	0x08006281
 80061d4:	08006281 	.word	0x08006281
 80061d8:	08006281 	.word	0x08006281
 80061dc:	08006281 	.word	0x08006281
 80061e0:	08006281 	.word	0x08006281
 80061e4:	08006281 	.word	0x08006281
 80061e8:	08006281 	.word	0x08006281
 80061ec:	08006261 	.word	0x08006261
 80061f0:	08006281 	.word	0x08006281
 80061f4:	08006281 	.word	0x08006281
 80061f8:	08006281 	.word	0x08006281
 80061fc:	08006281 	.word	0x08006281
 8006200:	08006281 	.word	0x08006281
 8006204:	08006281 	.word	0x08006281
 8006208:	08006281 	.word	0x08006281
 800620c:	08006269 	.word	0x08006269
 8006210:	08006281 	.word	0x08006281
 8006214:	08006281 	.word	0x08006281
 8006218:	08006281 	.word	0x08006281
 800621c:	08006281 	.word	0x08006281
 8006220:	08006281 	.word	0x08006281
 8006224:	08006281 	.word	0x08006281
 8006228:	08006281 	.word	0x08006281
 800622c:	08006271 	.word	0x08006271
 8006230:	08006281 	.word	0x08006281
 8006234:	08006281 	.word	0x08006281
 8006238:	08006281 	.word	0x08006281
 800623c:	08006281 	.word	0x08006281
 8006240:	08006281 	.word	0x08006281
 8006244:	08006281 	.word	0x08006281
 8006248:	08006281 	.word	0x08006281
 800624c:	08006279 	.word	0x08006279
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006256:	e050      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006258:	2304      	movs	r3, #4
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625e:	e04c      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006260:	2308      	movs	r3, #8
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006266:	e048      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006268:	2310      	movs	r3, #16
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626e:	e044      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006270:	2320      	movs	r3, #32
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006276:	e040      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006278:	2340      	movs	r3, #64	; 0x40
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e03c      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006280:	2380      	movs	r3, #128	; 0x80
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e038      	b.n	80062fa <UART_SetConfig+0x7ae>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a71      	ldr	r2, [pc, #452]	; (8006454 <UART_SetConfig+0x908>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d130      	bne.n	80062f4 <UART_SetConfig+0x7a8>
 8006292:	4b6f      	ldr	r3, [pc, #444]	; (8006450 <UART_SetConfig+0x904>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	2b05      	cmp	r3, #5
 800629c:	d826      	bhi.n	80062ec <UART_SetConfig+0x7a0>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <UART_SetConfig+0x758>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062bd 	.word	0x080062bd
 80062a8:	080062c5 	.word	0x080062c5
 80062ac:	080062cd 	.word	0x080062cd
 80062b0:	080062d5 	.word	0x080062d5
 80062b4:	080062dd 	.word	0x080062dd
 80062b8:	080062e5 	.word	0x080062e5
 80062bc:	2302      	movs	r3, #2
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c2:	e01a      	b.n	80062fa <UART_SetConfig+0x7ae>
 80062c4:	2304      	movs	r3, #4
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ca:	e016      	b.n	80062fa <UART_SetConfig+0x7ae>
 80062cc:	2308      	movs	r3, #8
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e012      	b.n	80062fa <UART_SetConfig+0x7ae>
 80062d4:	2310      	movs	r3, #16
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e00e      	b.n	80062fa <UART_SetConfig+0x7ae>
 80062dc:	2320      	movs	r3, #32
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e00a      	b.n	80062fa <UART_SetConfig+0x7ae>
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e006      	b.n	80062fa <UART_SetConfig+0x7ae>
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e002      	b.n	80062fa <UART_SetConfig+0x7ae>
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a55      	ldr	r2, [pc, #340]	; (8006454 <UART_SetConfig+0x908>)
 8006300:	4293      	cmp	r3, r2
 8006302:	f040 80f8 	bne.w	80064f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006306:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800630a:	2b20      	cmp	r3, #32
 800630c:	dc46      	bgt.n	800639c <UART_SetConfig+0x850>
 800630e:	2b02      	cmp	r3, #2
 8006310:	db75      	blt.n	80063fe <UART_SetConfig+0x8b2>
 8006312:	3b02      	subs	r3, #2
 8006314:	2b1e      	cmp	r3, #30
 8006316:	d872      	bhi.n	80063fe <UART_SetConfig+0x8b2>
 8006318:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0x7d4>)
 800631a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631e:	bf00      	nop
 8006320:	080063a3 	.word	0x080063a3
 8006324:	080063ff 	.word	0x080063ff
 8006328:	080063ab 	.word	0x080063ab
 800632c:	080063ff 	.word	0x080063ff
 8006330:	080063ff 	.word	0x080063ff
 8006334:	080063ff 	.word	0x080063ff
 8006338:	080063bb 	.word	0x080063bb
 800633c:	080063ff 	.word	0x080063ff
 8006340:	080063ff 	.word	0x080063ff
 8006344:	080063ff 	.word	0x080063ff
 8006348:	080063ff 	.word	0x080063ff
 800634c:	080063ff 	.word	0x080063ff
 8006350:	080063ff 	.word	0x080063ff
 8006354:	080063ff 	.word	0x080063ff
 8006358:	080063cb 	.word	0x080063cb
 800635c:	080063ff 	.word	0x080063ff
 8006360:	080063ff 	.word	0x080063ff
 8006364:	080063ff 	.word	0x080063ff
 8006368:	080063ff 	.word	0x080063ff
 800636c:	080063ff 	.word	0x080063ff
 8006370:	080063ff 	.word	0x080063ff
 8006374:	080063ff 	.word	0x080063ff
 8006378:	080063ff 	.word	0x080063ff
 800637c:	080063ff 	.word	0x080063ff
 8006380:	080063ff 	.word	0x080063ff
 8006384:	080063ff 	.word	0x080063ff
 8006388:	080063ff 	.word	0x080063ff
 800638c:	080063ff 	.word	0x080063ff
 8006390:	080063ff 	.word	0x080063ff
 8006394:	080063ff 	.word	0x080063ff
 8006398:	080063f1 	.word	0x080063f1
 800639c:	2b40      	cmp	r3, #64	; 0x40
 800639e:	d02a      	beq.n	80063f6 <UART_SetConfig+0x8aa>
 80063a0:	e02d      	b.n	80063fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063a2:	f7fd ff25 	bl	80041f0 <HAL_RCCEx_GetD3PCLK1Freq>
 80063a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063a8:	e02f      	b.n	800640a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fd ff34 	bl	800421c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b8:	e027      	b.n	800640a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ba:	f107 0318 	add.w	r3, r7, #24
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe f880 	bl	80044c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063c8:	e01f      	b.n	800640a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ca:	4b21      	ldr	r3, [pc, #132]	; (8006450 <UART_SetConfig+0x904>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063d6:	4b1e      	ldr	r3, [pc, #120]	; (8006450 <UART_SetConfig+0x904>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	08db      	lsrs	r3, r3, #3
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	4a1d      	ldr	r2, [pc, #116]	; (8006458 <UART_SetConfig+0x90c>)
 80063e2:	fa22 f303 	lsr.w	r3, r2, r3
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063e8:	e00f      	b.n	800640a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063ea:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <UART_SetConfig+0x90c>)
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ee:	e00c      	b.n	800640a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063f0:	4b1a      	ldr	r3, [pc, #104]	; (800645c <UART_SetConfig+0x910>)
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f4:	e009      	b.n	800640a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063fc:	e005      	b.n	800640a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800640a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 81ee 	beq.w	80067ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	4a12      	ldr	r2, [pc, #72]	; (8006460 <UART_SetConfig+0x914>)
 8006418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800641c:	461a      	mov	r2, r3
 800641e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006420:	fbb3 f3f2 	udiv	r3, r3, r2
 8006424:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	4413      	add	r3, r2
 8006430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006432:	429a      	cmp	r2, r3
 8006434:	d305      	bcc.n	8006442 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800643c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643e:	429a      	cmp	r2, r3
 8006440:	d910      	bls.n	8006464 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006448:	e1d1      	b.n	80067ee <UART_SetConfig+0xca2>
 800644a:	bf00      	nop
 800644c:	40011c00 	.word	0x40011c00
 8006450:	58024400 	.word	0x58024400
 8006454:	58000c00 	.word	0x58000c00
 8006458:	03d09000 	.word	0x03d09000
 800645c:	003d0900 	.word	0x003d0900
 8006460:	08009b90 	.word	0x08009b90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006466:	2200      	movs	r2, #0
 8006468:	60bb      	str	r3, [r7, #8]
 800646a:	60fa      	str	r2, [r7, #12]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	4ac0      	ldr	r2, [pc, #768]	; (8006774 <UART_SetConfig+0xc28>)
 8006472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006476:	b29b      	uxth	r3, r3
 8006478:	2200      	movs	r2, #0
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	607a      	str	r2, [r7, #4]
 800647e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006486:	f7f9 ff8b 	bl	80003a0 <__aeabi_uldivmod>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	f04f 0200 	mov.w	r2, #0
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	020b      	lsls	r3, r1, #8
 800649c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064a0:	0202      	lsls	r2, r0, #8
 80064a2:	6979      	ldr	r1, [r7, #20]
 80064a4:	6849      	ldr	r1, [r1, #4]
 80064a6:	0849      	lsrs	r1, r1, #1
 80064a8:	2000      	movs	r0, #0
 80064aa:	460c      	mov	r4, r1
 80064ac:	4605      	mov	r5, r0
 80064ae:	eb12 0804 	adds.w	r8, r2, r4
 80064b2:	eb43 0905 	adc.w	r9, r3, r5
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	469a      	mov	sl, r3
 80064be:	4693      	mov	fp, r2
 80064c0:	4652      	mov	r2, sl
 80064c2:	465b      	mov	r3, fp
 80064c4:	4640      	mov	r0, r8
 80064c6:	4649      	mov	r1, r9
 80064c8:	f7f9 ff6a 	bl	80003a0 <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4613      	mov	r3, r2
 80064d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064da:	d308      	bcc.n	80064ee <UART_SetConfig+0x9a2>
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e2:	d204      	bcs.n	80064ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ea:	60da      	str	r2, [r3, #12]
 80064ec:	e17f      	b.n	80067ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064f4:	e17b      	b.n	80067ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064fe:	f040 80bd 	bne.w	800667c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006502:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006506:	2b20      	cmp	r3, #32
 8006508:	dc48      	bgt.n	800659c <UART_SetConfig+0xa50>
 800650a:	2b00      	cmp	r3, #0
 800650c:	db7b      	blt.n	8006606 <UART_SetConfig+0xaba>
 800650e:	2b20      	cmp	r3, #32
 8006510:	d879      	bhi.n	8006606 <UART_SetConfig+0xaba>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0x9cc>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	080065a3 	.word	0x080065a3
 800651c:	080065ab 	.word	0x080065ab
 8006520:	08006607 	.word	0x08006607
 8006524:	08006607 	.word	0x08006607
 8006528:	080065b3 	.word	0x080065b3
 800652c:	08006607 	.word	0x08006607
 8006530:	08006607 	.word	0x08006607
 8006534:	08006607 	.word	0x08006607
 8006538:	080065c3 	.word	0x080065c3
 800653c:	08006607 	.word	0x08006607
 8006540:	08006607 	.word	0x08006607
 8006544:	08006607 	.word	0x08006607
 8006548:	08006607 	.word	0x08006607
 800654c:	08006607 	.word	0x08006607
 8006550:	08006607 	.word	0x08006607
 8006554:	08006607 	.word	0x08006607
 8006558:	080065d3 	.word	0x080065d3
 800655c:	08006607 	.word	0x08006607
 8006560:	08006607 	.word	0x08006607
 8006564:	08006607 	.word	0x08006607
 8006568:	08006607 	.word	0x08006607
 800656c:	08006607 	.word	0x08006607
 8006570:	08006607 	.word	0x08006607
 8006574:	08006607 	.word	0x08006607
 8006578:	08006607 	.word	0x08006607
 800657c:	08006607 	.word	0x08006607
 8006580:	08006607 	.word	0x08006607
 8006584:	08006607 	.word	0x08006607
 8006588:	08006607 	.word	0x08006607
 800658c:	08006607 	.word	0x08006607
 8006590:	08006607 	.word	0x08006607
 8006594:	08006607 	.word	0x08006607
 8006598:	080065f9 	.word	0x080065f9
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d02e      	beq.n	80065fe <UART_SetConfig+0xab2>
 80065a0:	e031      	b.n	8006606 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a2:	f7fc fc3b 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 80065a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065a8:	e033      	b.n	8006612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065aa:	f7fc fc4d 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 80065ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065b0:	e02f      	b.n	8006612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fd fe30 	bl	800421c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c0:	e027      	b.n	8006612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065c2:	f107 0318 	add.w	r3, r7, #24
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fd ff7c 	bl	80044c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d0:	e01f      	b.n	8006612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065d2:	4b69      	ldr	r3, [pc, #420]	; (8006778 <UART_SetConfig+0xc2c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065de:	4b66      	ldr	r3, [pc, #408]	; (8006778 <UART_SetConfig+0xc2c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	08db      	lsrs	r3, r3, #3
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	4a64      	ldr	r2, [pc, #400]	; (800677c <UART_SetConfig+0xc30>)
 80065ea:	fa22 f303 	lsr.w	r3, r2, r3
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065f0:	e00f      	b.n	8006612 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80065f2:	4b62      	ldr	r3, [pc, #392]	; (800677c <UART_SetConfig+0xc30>)
 80065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f6:	e00c      	b.n	8006612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065f8:	4b61      	ldr	r3, [pc, #388]	; (8006780 <UART_SetConfig+0xc34>)
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065fc:	e009      	b.n	8006612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006604:	e005      	b.n	8006612 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 80ea 	beq.w	80067ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	4a55      	ldr	r2, [pc, #340]	; (8006774 <UART_SetConfig+0xc28>)
 8006620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006624:	461a      	mov	r2, r3
 8006626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006628:	fbb3 f3f2 	udiv	r3, r3, r2
 800662c:	005a      	lsls	r2, r3, #1
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	441a      	add	r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	fbb2 f3f3 	udiv	r3, r2, r3
 800663e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	2b0f      	cmp	r3, #15
 8006644:	d916      	bls.n	8006674 <UART_SetConfig+0xb28>
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800664c:	d212      	bcs.n	8006674 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	b29b      	uxth	r3, r3
 8006652:	f023 030f 	bic.w	r3, r3, #15
 8006656:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	b29b      	uxth	r3, r3
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	b29a      	uxth	r2, r3
 8006664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006666:	4313      	orrs	r3, r2
 8006668:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	e0bc      	b.n	80067ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800667a:	e0b8      	b.n	80067ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800667c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006680:	2b20      	cmp	r3, #32
 8006682:	dc4b      	bgt.n	800671c <UART_SetConfig+0xbd0>
 8006684:	2b00      	cmp	r3, #0
 8006686:	f2c0 8087 	blt.w	8006798 <UART_SetConfig+0xc4c>
 800668a:	2b20      	cmp	r3, #32
 800668c:	f200 8084 	bhi.w	8006798 <UART_SetConfig+0xc4c>
 8006690:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <UART_SetConfig+0xb4c>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	08006723 	.word	0x08006723
 800669c:	0800672b 	.word	0x0800672b
 80066a0:	08006799 	.word	0x08006799
 80066a4:	08006799 	.word	0x08006799
 80066a8:	08006733 	.word	0x08006733
 80066ac:	08006799 	.word	0x08006799
 80066b0:	08006799 	.word	0x08006799
 80066b4:	08006799 	.word	0x08006799
 80066b8:	08006743 	.word	0x08006743
 80066bc:	08006799 	.word	0x08006799
 80066c0:	08006799 	.word	0x08006799
 80066c4:	08006799 	.word	0x08006799
 80066c8:	08006799 	.word	0x08006799
 80066cc:	08006799 	.word	0x08006799
 80066d0:	08006799 	.word	0x08006799
 80066d4:	08006799 	.word	0x08006799
 80066d8:	08006753 	.word	0x08006753
 80066dc:	08006799 	.word	0x08006799
 80066e0:	08006799 	.word	0x08006799
 80066e4:	08006799 	.word	0x08006799
 80066e8:	08006799 	.word	0x08006799
 80066ec:	08006799 	.word	0x08006799
 80066f0:	08006799 	.word	0x08006799
 80066f4:	08006799 	.word	0x08006799
 80066f8:	08006799 	.word	0x08006799
 80066fc:	08006799 	.word	0x08006799
 8006700:	08006799 	.word	0x08006799
 8006704:	08006799 	.word	0x08006799
 8006708:	08006799 	.word	0x08006799
 800670c:	08006799 	.word	0x08006799
 8006710:	08006799 	.word	0x08006799
 8006714:	08006799 	.word	0x08006799
 8006718:	0800678b 	.word	0x0800678b
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	d037      	beq.n	8006790 <UART_SetConfig+0xc44>
 8006720:	e03a      	b.n	8006798 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006722:	f7fc fb7b 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8006726:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006728:	e03c      	b.n	80067a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800672a:	f7fc fb8d 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 800672e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006730:	e038      	b.n	80067a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006736:	4618      	mov	r0, r3
 8006738:	f7fd fd70 	bl	800421c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006740:	e030      	b.n	80067a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006742:	f107 0318 	add.w	r3, r7, #24
 8006746:	4618      	mov	r0, r3
 8006748:	f7fd febc 	bl	80044c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006750:	e028      	b.n	80067a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006752:	4b09      	ldr	r3, [pc, #36]	; (8006778 <UART_SetConfig+0xc2c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d012      	beq.n	8006784 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <UART_SetConfig+0xc2c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	08db      	lsrs	r3, r3, #3
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	4a04      	ldr	r2, [pc, #16]	; (800677c <UART_SetConfig+0xc30>)
 800676a:	fa22 f303 	lsr.w	r3, r2, r3
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006770:	e018      	b.n	80067a4 <UART_SetConfig+0xc58>
 8006772:	bf00      	nop
 8006774:	08009b90 	.word	0x08009b90
 8006778:	58024400 	.word	0x58024400
 800677c:	03d09000 	.word	0x03d09000
 8006780:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006784:	4b24      	ldr	r3, [pc, #144]	; (8006818 <UART_SetConfig+0xccc>)
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006788:	e00c      	b.n	80067a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800678a:	4b24      	ldr	r3, [pc, #144]	; (800681c <UART_SetConfig+0xcd0>)
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800678e:	e009      	b.n	80067a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006796:	e005      	b.n	80067a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067a2:	bf00      	nop
    }

    if (pclk != 0U)
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d021      	beq.n	80067ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	4a1c      	ldr	r2, [pc, #112]	; (8006820 <UART_SetConfig+0xcd4>)
 80067b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	441a      	add	r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	2b0f      	cmp	r3, #15
 80067d2:	d909      	bls.n	80067e8 <UART_SetConfig+0xc9c>
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067da:	d205      	bcs.n	80067e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	b29a      	uxth	r2, r3
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	e002      	b.n	80067ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2200      	movs	r2, #0
 8006802:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800680a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800680e:	4618      	mov	r0, r3
 8006810:	3748      	adds	r7, #72	; 0x48
 8006812:	46bd      	mov	sp, r7
 8006814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006818:	03d09000 	.word	0x03d09000
 800681c:	003d0900 	.word	0x003d0900
 8006820:	08009b90 	.word	0x08009b90

08006824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01a      	beq.n	800693a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006922:	d10a      	bne.n	800693a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b098      	sub	sp, #96	; 0x60
 800696c:	af02      	add	r7, sp, #8
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006978:	f7fa ff86 	bl	8001888 <HAL_GetTick>
 800697c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b08      	cmp	r3, #8
 800698a:	d12f      	bne.n	80069ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800698c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006994:	2200      	movs	r2, #0
 8006996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f88e 	bl	8006abc <UART_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d022      	beq.n	80069ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ba:	653b      	str	r3, [r7, #80]	; 0x50
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c4:	647b      	str	r3, [r7, #68]	; 0x44
 80069c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069cc:	e841 2300 	strex	r3, r2, [r1]
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e6      	bne.n	80069a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e063      	b.n	8006ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d149      	bne.n	8006a8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a02:	2200      	movs	r2, #0
 8006a04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f857 	bl	8006abc <UART_WaitOnFlagUntilTimeout>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d03c      	beq.n	8006a8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	623b      	str	r3, [r7, #32]
   return(result);
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a32:	633b      	str	r3, [r7, #48]	; 0x30
 8006a34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e6      	bne.n	8006a14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a66:	61fa      	str	r2, [r7, #28]
 8006a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	69b9      	ldr	r1, [r7, #24]
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	617b      	str	r3, [r7, #20]
   return(result);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e5      	bne.n	8006a46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e012      	b.n	8006ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3758      	adds	r7, #88	; 0x58
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006acc:	e049      	b.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d045      	beq.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad6:	f7fa fed7 	bl	8001888 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d302      	bcc.n	8006aec <UART_WaitOnFlagUntilTimeout+0x30>
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e048      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d031      	beq.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d110      	bne.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2208      	movs	r2, #8
 8006b12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f839 	bl	8006b8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2208      	movs	r2, #8
 8006b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e029      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3c:	d111      	bne.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f81f 	bl	8006b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e00f      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69da      	ldr	r2, [r3, #28]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d0a6      	beq.n	8006ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b095      	sub	sp, #84	; 0x54
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e6      	bne.n	8006b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	4b1e      	ldr	r3, [pc, #120]	; (8006c54 <UART_EndRxTransfer+0xc8>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d118      	bne.n	8006c34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	647b      	str	r3, [r7, #68]	; 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6979      	ldr	r1, [r7, #20]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e6      	bne.n	8006c02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c48:	bf00      	nop
 8006c4a:	3754      	adds	r7, #84	; 0x54
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	effffffe 	.word	0xeffffffe

08006c58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e027      	b.n	8006cbe <HAL_UARTEx_DisableFifoMode+0x66>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2224      	movs	r2, #36	; 0x24
 8006c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0201 	bic.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e02d      	b.n	8006d3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2224      	movs	r2, #36	; 0x24
 8006cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0201 	bic.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f850 	bl	8006dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e02d      	b.n	8006dba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2224      	movs	r2, #36	; 0x24
 8006d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f812 	bl	8006dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d108      	bne.n	8006de6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006de4:	e031      	b.n	8006e4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006de6:	2310      	movs	r3, #16
 8006de8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dea:	2310      	movs	r3, #16
 8006dec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	0e5b      	lsrs	r3, r3, #25
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	0f5b      	lsrs	r3, r3, #29
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	7b3a      	ldrb	r2, [r7, #12]
 8006e12:	4911      	ldr	r1, [pc, #68]	; (8006e58 <UARTEx_SetNbDataToProcess+0x94>)
 8006e14:	5c8a      	ldrb	r2, [r1, r2]
 8006e16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e1a:	7b3a      	ldrb	r2, [r7, #12]
 8006e1c:	490f      	ldr	r1, [pc, #60]	; (8006e5c <UARTEx_SetNbDataToProcess+0x98>)
 8006e1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	7b7a      	ldrb	r2, [r7, #13]
 8006e30:	4909      	ldr	r1, [pc, #36]	; (8006e58 <UARTEx_SetNbDataToProcess+0x94>)
 8006e32:	5c8a      	ldrb	r2, [r1, r2]
 8006e34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e38:	7b7a      	ldrb	r2, [r7, #13]
 8006e3a:	4908      	ldr	r1, [pc, #32]	; (8006e5c <UARTEx_SetNbDataToProcess+0x98>)
 8006e3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	08009ba8 	.word	0x08009ba8
 8006e5c:	08009bb0 	.word	0x08009bb0

08006e60 <__cvt>:
 8006e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e62:	ed2d 8b02 	vpush	{d8}
 8006e66:	eeb0 8b40 	vmov.f64	d8, d0
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	4617      	mov	r7, r2
 8006e6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006e70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006e72:	ee18 2a90 	vmov	r2, s17
 8006e76:	f025 0520 	bic.w	r5, r5, #32
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	bfb6      	itet	lt
 8006e7e:	222d      	movlt	r2, #45	; 0x2d
 8006e80:	2200      	movge	r2, #0
 8006e82:	eeb1 8b40 	vneglt.f64	d8, d0
 8006e86:	2d46      	cmp	r5, #70	; 0x46
 8006e88:	460c      	mov	r4, r1
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	d004      	beq.n	8006e98 <__cvt+0x38>
 8006e8e:	2d45      	cmp	r5, #69	; 0x45
 8006e90:	d100      	bne.n	8006e94 <__cvt+0x34>
 8006e92:	3401      	adds	r4, #1
 8006e94:	2102      	movs	r1, #2
 8006e96:	e000      	b.n	8006e9a <__cvt+0x3a>
 8006e98:	2103      	movs	r1, #3
 8006e9a:	ab03      	add	r3, sp, #12
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	ab02      	add	r3, sp, #8
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	4633      	mov	r3, r6
 8006ea6:	eeb0 0b48 	vmov.f64	d0, d8
 8006eaa:	f000 fe41 	bl	8007b30 <_dtoa_r>
 8006eae:	2d47      	cmp	r5, #71	; 0x47
 8006eb0:	d101      	bne.n	8006eb6 <__cvt+0x56>
 8006eb2:	07fb      	lsls	r3, r7, #31
 8006eb4:	d51a      	bpl.n	8006eec <__cvt+0x8c>
 8006eb6:	2d46      	cmp	r5, #70	; 0x46
 8006eb8:	eb00 0204 	add.w	r2, r0, r4
 8006ebc:	d10c      	bne.n	8006ed8 <__cvt+0x78>
 8006ebe:	7803      	ldrb	r3, [r0, #0]
 8006ec0:	2b30      	cmp	r3, #48	; 0x30
 8006ec2:	d107      	bne.n	8006ed4 <__cvt+0x74>
 8006ec4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ecc:	bf1c      	itt	ne
 8006ece:	f1c4 0401 	rsbne	r4, r4, #1
 8006ed2:	6034      	strne	r4, [r6, #0]
 8006ed4:	6833      	ldr	r3, [r6, #0]
 8006ed6:	441a      	add	r2, r3
 8006ed8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee0:	bf08      	it	eq
 8006ee2:	9203      	streq	r2, [sp, #12]
 8006ee4:	2130      	movs	r1, #48	; 0x30
 8006ee6:	9b03      	ldr	r3, [sp, #12]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d307      	bcc.n	8006efc <__cvt+0x9c>
 8006eec:	9b03      	ldr	r3, [sp, #12]
 8006eee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ef0:	1a1b      	subs	r3, r3, r0
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	b005      	add	sp, #20
 8006ef6:	ecbd 8b02 	vpop	{d8}
 8006efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006efc:	1c5c      	adds	r4, r3, #1
 8006efe:	9403      	str	r4, [sp, #12]
 8006f00:	7019      	strb	r1, [r3, #0]
 8006f02:	e7f0      	b.n	8006ee6 <__cvt+0x86>

08006f04 <__exponent>:
 8006f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f06:	4603      	mov	r3, r0
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	bfb8      	it	lt
 8006f0c:	4249      	neglt	r1, r1
 8006f0e:	f803 2b02 	strb.w	r2, [r3], #2
 8006f12:	bfb4      	ite	lt
 8006f14:	222d      	movlt	r2, #45	; 0x2d
 8006f16:	222b      	movge	r2, #43	; 0x2b
 8006f18:	2909      	cmp	r1, #9
 8006f1a:	7042      	strb	r2, [r0, #1]
 8006f1c:	dd2a      	ble.n	8006f74 <__exponent+0x70>
 8006f1e:	f10d 0207 	add.w	r2, sp, #7
 8006f22:	4617      	mov	r7, r2
 8006f24:	260a      	movs	r6, #10
 8006f26:	4694      	mov	ip, r2
 8006f28:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f2c:	fb06 1415 	mls	r4, r6, r5, r1
 8006f30:	3430      	adds	r4, #48	; 0x30
 8006f32:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f36:	460c      	mov	r4, r1
 8006f38:	2c63      	cmp	r4, #99	; 0x63
 8006f3a:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f3e:	4629      	mov	r1, r5
 8006f40:	dcf1      	bgt.n	8006f26 <__exponent+0x22>
 8006f42:	3130      	adds	r1, #48	; 0x30
 8006f44:	f1ac 0402 	sub.w	r4, ip, #2
 8006f48:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f4c:	1c41      	adds	r1, r0, #1
 8006f4e:	4622      	mov	r2, r4
 8006f50:	42ba      	cmp	r2, r7
 8006f52:	d30a      	bcc.n	8006f6a <__exponent+0x66>
 8006f54:	f10d 0209 	add.w	r2, sp, #9
 8006f58:	eba2 020c 	sub.w	r2, r2, ip
 8006f5c:	42bc      	cmp	r4, r7
 8006f5e:	bf88      	it	hi
 8006f60:	2200      	movhi	r2, #0
 8006f62:	4413      	add	r3, r2
 8006f64:	1a18      	subs	r0, r3, r0
 8006f66:	b003      	add	sp, #12
 8006f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f6a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f6e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f72:	e7ed      	b.n	8006f50 <__exponent+0x4c>
 8006f74:	2330      	movs	r3, #48	; 0x30
 8006f76:	3130      	adds	r1, #48	; 0x30
 8006f78:	7083      	strb	r3, [r0, #2]
 8006f7a:	70c1      	strb	r1, [r0, #3]
 8006f7c:	1d03      	adds	r3, r0, #4
 8006f7e:	e7f1      	b.n	8006f64 <__exponent+0x60>

08006f80 <_printf_float>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	b08b      	sub	sp, #44	; 0x2c
 8006f86:	460c      	mov	r4, r1
 8006f88:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	461f      	mov	r7, r3
 8006f90:	4605      	mov	r5, r0
 8006f92:	f000 fccd 	bl	8007930 <_localeconv_r>
 8006f96:	f8d0 b000 	ldr.w	fp, [r0]
 8006f9a:	4658      	mov	r0, fp
 8006f9c:	f7f9 f9f8 	bl	8000390 <strlen>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9308      	str	r3, [sp, #32]
 8006fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006fac:	6822      	ldr	r2, [r4, #0]
 8006fae:	3307      	adds	r3, #7
 8006fb0:	f023 0307 	bic.w	r3, r3, #7
 8006fb4:	f103 0108 	add.w	r1, r3, #8
 8006fb8:	f8c8 1000 	str.w	r1, [r8]
 8006fbc:	ed93 0b00 	vldr	d0, [r3]
 8006fc0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8007220 <_printf_float+0x2a0>
 8006fc4:	eeb0 7bc0 	vabs.f64	d7, d0
 8006fc8:	eeb4 7b46 	vcmp.f64	d7, d6
 8006fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006fd4:	4682      	mov	sl, r0
 8006fd6:	dd24      	ble.n	8007022 <_printf_float+0xa2>
 8006fd8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe0:	d502      	bpl.n	8006fe8 <_printf_float+0x68>
 8006fe2:	232d      	movs	r3, #45	; 0x2d
 8006fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe8:	498f      	ldr	r1, [pc, #572]	; (8007228 <_printf_float+0x2a8>)
 8006fea:	4b90      	ldr	r3, [pc, #576]	; (800722c <_printf_float+0x2ac>)
 8006fec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006ff0:	bf94      	ite	ls
 8006ff2:	4688      	movls	r8, r1
 8006ff4:	4698      	movhi	r8, r3
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	6123      	str	r3, [r4, #16]
 8006ffa:	f022 0204 	bic.w	r2, r2, #4
 8006ffe:	2300      	movs	r3, #0
 8007000:	6022      	str	r2, [r4, #0]
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	9700      	str	r7, [sp, #0]
 8007006:	4633      	mov	r3, r6
 8007008:	aa09      	add	r2, sp, #36	; 0x24
 800700a:	4621      	mov	r1, r4
 800700c:	4628      	mov	r0, r5
 800700e:	f000 f9d1 	bl	80073b4 <_printf_common>
 8007012:	3001      	adds	r0, #1
 8007014:	f040 808a 	bne.w	800712c <_printf_float+0x1ac>
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	b00b      	add	sp, #44	; 0x2c
 800701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007022:	eeb4 0b40 	vcmp.f64	d0, d0
 8007026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702a:	d709      	bvc.n	8007040 <_printf_float+0xc0>
 800702c:	ee10 3a90 	vmov	r3, s1
 8007030:	2b00      	cmp	r3, #0
 8007032:	bfbc      	itt	lt
 8007034:	232d      	movlt	r3, #45	; 0x2d
 8007036:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800703a:	497d      	ldr	r1, [pc, #500]	; (8007230 <_printf_float+0x2b0>)
 800703c:	4b7d      	ldr	r3, [pc, #500]	; (8007234 <_printf_float+0x2b4>)
 800703e:	e7d5      	b.n	8006fec <_printf_float+0x6c>
 8007040:	6863      	ldr	r3, [r4, #4]
 8007042:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007046:	9104      	str	r1, [sp, #16]
 8007048:	1c59      	adds	r1, r3, #1
 800704a:	d13c      	bne.n	80070c6 <_printf_float+0x146>
 800704c:	2306      	movs	r3, #6
 800704e:	6063      	str	r3, [r4, #4]
 8007050:	2300      	movs	r3, #0
 8007052:	9303      	str	r3, [sp, #12]
 8007054:	ab08      	add	r3, sp, #32
 8007056:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800705a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800705e:	ab07      	add	r3, sp, #28
 8007060:	6861      	ldr	r1, [r4, #4]
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	6022      	str	r2, [r4, #0]
 8007066:	f10d 031b 	add.w	r3, sp, #27
 800706a:	4628      	mov	r0, r5
 800706c:	f7ff fef8 	bl	8006e60 <__cvt>
 8007070:	9b04      	ldr	r3, [sp, #16]
 8007072:	9907      	ldr	r1, [sp, #28]
 8007074:	2b47      	cmp	r3, #71	; 0x47
 8007076:	4680      	mov	r8, r0
 8007078:	d108      	bne.n	800708c <_printf_float+0x10c>
 800707a:	1cc8      	adds	r0, r1, #3
 800707c:	db02      	blt.n	8007084 <_printf_float+0x104>
 800707e:	6863      	ldr	r3, [r4, #4]
 8007080:	4299      	cmp	r1, r3
 8007082:	dd41      	ble.n	8007108 <_printf_float+0x188>
 8007084:	f1a9 0902 	sub.w	r9, r9, #2
 8007088:	fa5f f989 	uxtb.w	r9, r9
 800708c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007090:	d820      	bhi.n	80070d4 <_printf_float+0x154>
 8007092:	3901      	subs	r1, #1
 8007094:	464a      	mov	r2, r9
 8007096:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800709a:	9107      	str	r1, [sp, #28]
 800709c:	f7ff ff32 	bl	8006f04 <__exponent>
 80070a0:	9a08      	ldr	r2, [sp, #32]
 80070a2:	9004      	str	r0, [sp, #16]
 80070a4:	1813      	adds	r3, r2, r0
 80070a6:	2a01      	cmp	r2, #1
 80070a8:	6123      	str	r3, [r4, #16]
 80070aa:	dc02      	bgt.n	80070b2 <_printf_float+0x132>
 80070ac:	6822      	ldr	r2, [r4, #0]
 80070ae:	07d2      	lsls	r2, r2, #31
 80070b0:	d501      	bpl.n	80070b6 <_printf_float+0x136>
 80070b2:	3301      	adds	r3, #1
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0a2      	beq.n	8007004 <_printf_float+0x84>
 80070be:	232d      	movs	r3, #45	; 0x2d
 80070c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c4:	e79e      	b.n	8007004 <_printf_float+0x84>
 80070c6:	9904      	ldr	r1, [sp, #16]
 80070c8:	2947      	cmp	r1, #71	; 0x47
 80070ca:	d1c1      	bne.n	8007050 <_printf_float+0xd0>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1bf      	bne.n	8007050 <_printf_float+0xd0>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e7bc      	b.n	800704e <_printf_float+0xce>
 80070d4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80070d8:	d118      	bne.n	800710c <_printf_float+0x18c>
 80070da:	2900      	cmp	r1, #0
 80070dc:	6863      	ldr	r3, [r4, #4]
 80070de:	dd0b      	ble.n	80070f8 <_printf_float+0x178>
 80070e0:	6121      	str	r1, [r4, #16]
 80070e2:	b913      	cbnz	r3, 80070ea <_printf_float+0x16a>
 80070e4:	6822      	ldr	r2, [r4, #0]
 80070e6:	07d0      	lsls	r0, r2, #31
 80070e8:	d502      	bpl.n	80070f0 <_printf_float+0x170>
 80070ea:	3301      	adds	r3, #1
 80070ec:	440b      	add	r3, r1
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	2300      	movs	r3, #0
 80070f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	e7de      	b.n	80070b6 <_printf_float+0x136>
 80070f8:	b913      	cbnz	r3, 8007100 <_printf_float+0x180>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	07d2      	lsls	r2, r2, #31
 80070fe:	d501      	bpl.n	8007104 <_printf_float+0x184>
 8007100:	3302      	adds	r3, #2
 8007102:	e7f4      	b.n	80070ee <_printf_float+0x16e>
 8007104:	2301      	movs	r3, #1
 8007106:	e7f2      	b.n	80070ee <_printf_float+0x16e>
 8007108:	f04f 0967 	mov.w	r9, #103	; 0x67
 800710c:	9b08      	ldr	r3, [sp, #32]
 800710e:	4299      	cmp	r1, r3
 8007110:	db05      	blt.n	800711e <_printf_float+0x19e>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	6121      	str	r1, [r4, #16]
 8007116:	07d8      	lsls	r0, r3, #31
 8007118:	d5ea      	bpl.n	80070f0 <_printf_float+0x170>
 800711a:	1c4b      	adds	r3, r1, #1
 800711c:	e7e7      	b.n	80070ee <_printf_float+0x16e>
 800711e:	2900      	cmp	r1, #0
 8007120:	bfd4      	ite	le
 8007122:	f1c1 0202 	rsble	r2, r1, #2
 8007126:	2201      	movgt	r2, #1
 8007128:	4413      	add	r3, r2
 800712a:	e7e0      	b.n	80070ee <_printf_float+0x16e>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	055a      	lsls	r2, r3, #21
 8007130:	d407      	bmi.n	8007142 <_printf_float+0x1c2>
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	4642      	mov	r2, r8
 8007136:	4631      	mov	r1, r6
 8007138:	4628      	mov	r0, r5
 800713a:	47b8      	blx	r7
 800713c:	3001      	adds	r0, #1
 800713e:	d12a      	bne.n	8007196 <_printf_float+0x216>
 8007140:	e76a      	b.n	8007018 <_printf_float+0x98>
 8007142:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007146:	f240 80e0 	bls.w	800730a <_printf_float+0x38a>
 800714a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800714e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007156:	d133      	bne.n	80071c0 <_printf_float+0x240>
 8007158:	4a37      	ldr	r2, [pc, #220]	; (8007238 <_printf_float+0x2b8>)
 800715a:	2301      	movs	r3, #1
 800715c:	4631      	mov	r1, r6
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	f43f af58 	beq.w	8007018 <_printf_float+0x98>
 8007168:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800716c:	429a      	cmp	r2, r3
 800716e:	db02      	blt.n	8007176 <_printf_float+0x1f6>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	07d8      	lsls	r0, r3, #31
 8007174:	d50f      	bpl.n	8007196 <_printf_float+0x216>
 8007176:	4653      	mov	r3, sl
 8007178:	465a      	mov	r2, fp
 800717a:	4631      	mov	r1, r6
 800717c:	4628      	mov	r0, r5
 800717e:	47b8      	blx	r7
 8007180:	3001      	adds	r0, #1
 8007182:	f43f af49 	beq.w	8007018 <_printf_float+0x98>
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	f104 091a 	add.w	r9, r4, #26
 800718e:	9b08      	ldr	r3, [sp, #32]
 8007190:	3b01      	subs	r3, #1
 8007192:	4543      	cmp	r3, r8
 8007194:	dc09      	bgt.n	80071aa <_printf_float+0x22a>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	079b      	lsls	r3, r3, #30
 800719a:	f100 8106 	bmi.w	80073aa <_printf_float+0x42a>
 800719e:	68e0      	ldr	r0, [r4, #12]
 80071a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a2:	4298      	cmp	r0, r3
 80071a4:	bfb8      	it	lt
 80071a6:	4618      	movlt	r0, r3
 80071a8:	e738      	b.n	800701c <_printf_float+0x9c>
 80071aa:	2301      	movs	r3, #1
 80071ac:	464a      	mov	r2, r9
 80071ae:	4631      	mov	r1, r6
 80071b0:	4628      	mov	r0, r5
 80071b2:	47b8      	blx	r7
 80071b4:	3001      	adds	r0, #1
 80071b6:	f43f af2f 	beq.w	8007018 <_printf_float+0x98>
 80071ba:	f108 0801 	add.w	r8, r8, #1
 80071be:	e7e6      	b.n	800718e <_printf_float+0x20e>
 80071c0:	9b07      	ldr	r3, [sp, #28]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dc3a      	bgt.n	800723c <_printf_float+0x2bc>
 80071c6:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <_printf_float+0x2b8>)
 80071c8:	2301      	movs	r3, #1
 80071ca:	4631      	mov	r1, r6
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b8      	blx	r7
 80071d0:	3001      	adds	r0, #1
 80071d2:	f43f af21 	beq.w	8007018 <_printf_float+0x98>
 80071d6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80071da:	4313      	orrs	r3, r2
 80071dc:	d102      	bne.n	80071e4 <_printf_float+0x264>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	07d9      	lsls	r1, r3, #31
 80071e2:	d5d8      	bpl.n	8007196 <_printf_float+0x216>
 80071e4:	4653      	mov	r3, sl
 80071e6:	465a      	mov	r2, fp
 80071e8:	4631      	mov	r1, r6
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	f43f af12 	beq.w	8007018 <_printf_float+0x98>
 80071f4:	f04f 0900 	mov.w	r9, #0
 80071f8:	f104 0a1a 	add.w	sl, r4, #26
 80071fc:	9b07      	ldr	r3, [sp, #28]
 80071fe:	425b      	negs	r3, r3
 8007200:	454b      	cmp	r3, r9
 8007202:	dc01      	bgt.n	8007208 <_printf_float+0x288>
 8007204:	9b08      	ldr	r3, [sp, #32]
 8007206:	e795      	b.n	8007134 <_printf_float+0x1b4>
 8007208:	2301      	movs	r3, #1
 800720a:	4652      	mov	r2, sl
 800720c:	4631      	mov	r1, r6
 800720e:	4628      	mov	r0, r5
 8007210:	47b8      	blx	r7
 8007212:	3001      	adds	r0, #1
 8007214:	f43f af00 	beq.w	8007018 <_printf_float+0x98>
 8007218:	f109 0901 	add.w	r9, r9, #1
 800721c:	e7ee      	b.n	80071fc <_printf_float+0x27c>
 800721e:	bf00      	nop
 8007220:	ffffffff 	.word	0xffffffff
 8007224:	7fefffff 	.word	0x7fefffff
 8007228:	08009bb8 	.word	0x08009bb8
 800722c:	08009bbc 	.word	0x08009bbc
 8007230:	08009bc0 	.word	0x08009bc0
 8007234:	08009bc4 	.word	0x08009bc4
 8007238:	08009bc8 	.word	0x08009bc8
 800723c:	9a08      	ldr	r2, [sp, #32]
 800723e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007240:	429a      	cmp	r2, r3
 8007242:	bfa8      	it	ge
 8007244:	461a      	movge	r2, r3
 8007246:	2a00      	cmp	r2, #0
 8007248:	4691      	mov	r9, r2
 800724a:	dc38      	bgt.n	80072be <_printf_float+0x33e>
 800724c:	2300      	movs	r3, #0
 800724e:	9305      	str	r3, [sp, #20]
 8007250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007254:	f104 021a 	add.w	r2, r4, #26
 8007258:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800725a:	9905      	ldr	r1, [sp, #20]
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	eba3 0309 	sub.w	r3, r3, r9
 8007262:	428b      	cmp	r3, r1
 8007264:	dc33      	bgt.n	80072ce <_printf_float+0x34e>
 8007266:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800726a:	429a      	cmp	r2, r3
 800726c:	db3c      	blt.n	80072e8 <_printf_float+0x368>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	07da      	lsls	r2, r3, #31
 8007272:	d439      	bmi.n	80072e8 <_printf_float+0x368>
 8007274:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007278:	eba2 0903 	sub.w	r9, r2, r3
 800727c:	9b04      	ldr	r3, [sp, #16]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	4591      	cmp	r9, r2
 8007282:	bfa8      	it	ge
 8007284:	4691      	movge	r9, r2
 8007286:	f1b9 0f00 	cmp.w	r9, #0
 800728a:	dc35      	bgt.n	80072f8 <_printf_float+0x378>
 800728c:	f04f 0800 	mov.w	r8, #0
 8007290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007294:	f104 0a1a 	add.w	sl, r4, #26
 8007298:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800729c:	1a9b      	subs	r3, r3, r2
 800729e:	eba3 0309 	sub.w	r3, r3, r9
 80072a2:	4543      	cmp	r3, r8
 80072a4:	f77f af77 	ble.w	8007196 <_printf_float+0x216>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4652      	mov	r2, sl
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f aeb0 	beq.w	8007018 <_printf_float+0x98>
 80072b8:	f108 0801 	add.w	r8, r8, #1
 80072bc:	e7ec      	b.n	8007298 <_printf_float+0x318>
 80072be:	4613      	mov	r3, r2
 80072c0:	4631      	mov	r1, r6
 80072c2:	4642      	mov	r2, r8
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	d1bf      	bne.n	800724c <_printf_float+0x2cc>
 80072cc:	e6a4      	b.n	8007018 <_printf_float+0x98>
 80072ce:	2301      	movs	r3, #1
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	9204      	str	r2, [sp, #16]
 80072d6:	47b8      	blx	r7
 80072d8:	3001      	adds	r0, #1
 80072da:	f43f ae9d 	beq.w	8007018 <_printf_float+0x98>
 80072de:	9b05      	ldr	r3, [sp, #20]
 80072e0:	9a04      	ldr	r2, [sp, #16]
 80072e2:	3301      	adds	r3, #1
 80072e4:	9305      	str	r3, [sp, #20]
 80072e6:	e7b7      	b.n	8007258 <_printf_float+0x2d8>
 80072e8:	4653      	mov	r3, sl
 80072ea:	465a      	mov	r2, fp
 80072ec:	4631      	mov	r1, r6
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b8      	blx	r7
 80072f2:	3001      	adds	r0, #1
 80072f4:	d1be      	bne.n	8007274 <_printf_float+0x2f4>
 80072f6:	e68f      	b.n	8007018 <_printf_float+0x98>
 80072f8:	9a04      	ldr	r2, [sp, #16]
 80072fa:	464b      	mov	r3, r9
 80072fc:	4442      	add	r2, r8
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	d1c1      	bne.n	800728c <_printf_float+0x30c>
 8007308:	e686      	b.n	8007018 <_printf_float+0x98>
 800730a:	9a08      	ldr	r2, [sp, #32]
 800730c:	2a01      	cmp	r2, #1
 800730e:	dc01      	bgt.n	8007314 <_printf_float+0x394>
 8007310:	07db      	lsls	r3, r3, #31
 8007312:	d537      	bpl.n	8007384 <_printf_float+0x404>
 8007314:	2301      	movs	r3, #1
 8007316:	4642      	mov	r2, r8
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f ae7a 	beq.w	8007018 <_printf_float+0x98>
 8007324:	4653      	mov	r3, sl
 8007326:	465a      	mov	r2, fp
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f ae72 	beq.w	8007018 <_printf_float+0x98>
 8007334:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007338:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800733c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007340:	9b08      	ldr	r3, [sp, #32]
 8007342:	d01a      	beq.n	800737a <_printf_float+0x3fa>
 8007344:	3b01      	subs	r3, #1
 8007346:	f108 0201 	add.w	r2, r8, #1
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	d10e      	bne.n	8007372 <_printf_float+0x3f2>
 8007354:	e660      	b.n	8007018 <_printf_float+0x98>
 8007356:	2301      	movs	r3, #1
 8007358:	464a      	mov	r2, r9
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	f43f ae59 	beq.w	8007018 <_printf_float+0x98>
 8007366:	f108 0801 	add.w	r8, r8, #1
 800736a:	9b08      	ldr	r3, [sp, #32]
 800736c:	3b01      	subs	r3, #1
 800736e:	4543      	cmp	r3, r8
 8007370:	dcf1      	bgt.n	8007356 <_printf_float+0x3d6>
 8007372:	9b04      	ldr	r3, [sp, #16]
 8007374:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007378:	e6dd      	b.n	8007136 <_printf_float+0x1b6>
 800737a:	f04f 0800 	mov.w	r8, #0
 800737e:	f104 091a 	add.w	r9, r4, #26
 8007382:	e7f2      	b.n	800736a <_printf_float+0x3ea>
 8007384:	2301      	movs	r3, #1
 8007386:	4642      	mov	r2, r8
 8007388:	e7df      	b.n	800734a <_printf_float+0x3ca>
 800738a:	2301      	movs	r3, #1
 800738c:	464a      	mov	r2, r9
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	47b8      	blx	r7
 8007394:	3001      	adds	r0, #1
 8007396:	f43f ae3f 	beq.w	8007018 <_printf_float+0x98>
 800739a:	f108 0801 	add.w	r8, r8, #1
 800739e:	68e3      	ldr	r3, [r4, #12]
 80073a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a2:	1a5b      	subs	r3, r3, r1
 80073a4:	4543      	cmp	r3, r8
 80073a6:	dcf0      	bgt.n	800738a <_printf_float+0x40a>
 80073a8:	e6f9      	b.n	800719e <_printf_float+0x21e>
 80073aa:	f04f 0800 	mov.w	r8, #0
 80073ae:	f104 0919 	add.w	r9, r4, #25
 80073b2:	e7f4      	b.n	800739e <_printf_float+0x41e>

080073b4 <_printf_common>:
 80073b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	4616      	mov	r6, r2
 80073ba:	4699      	mov	r9, r3
 80073bc:	688a      	ldr	r2, [r1, #8]
 80073be:	690b      	ldr	r3, [r1, #16]
 80073c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073c4:	4293      	cmp	r3, r2
 80073c6:	bfb8      	it	lt
 80073c8:	4613      	movlt	r3, r2
 80073ca:	6033      	str	r3, [r6, #0]
 80073cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073d0:	4607      	mov	r7, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	b10a      	cbz	r2, 80073da <_printf_common+0x26>
 80073d6:	3301      	adds	r3, #1
 80073d8:	6033      	str	r3, [r6, #0]
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	0699      	lsls	r1, r3, #26
 80073de:	bf42      	ittt	mi
 80073e0:	6833      	ldrmi	r3, [r6, #0]
 80073e2:	3302      	addmi	r3, #2
 80073e4:	6033      	strmi	r3, [r6, #0]
 80073e6:	6825      	ldr	r5, [r4, #0]
 80073e8:	f015 0506 	ands.w	r5, r5, #6
 80073ec:	d106      	bne.n	80073fc <_printf_common+0x48>
 80073ee:	f104 0a19 	add.w	sl, r4, #25
 80073f2:	68e3      	ldr	r3, [r4, #12]
 80073f4:	6832      	ldr	r2, [r6, #0]
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	42ab      	cmp	r3, r5
 80073fa:	dc26      	bgt.n	800744a <_printf_common+0x96>
 80073fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007400:	1e13      	subs	r3, r2, #0
 8007402:	6822      	ldr	r2, [r4, #0]
 8007404:	bf18      	it	ne
 8007406:	2301      	movne	r3, #1
 8007408:	0692      	lsls	r2, r2, #26
 800740a:	d42b      	bmi.n	8007464 <_printf_common+0xb0>
 800740c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007410:	4649      	mov	r1, r9
 8007412:	4638      	mov	r0, r7
 8007414:	47c0      	blx	r8
 8007416:	3001      	adds	r0, #1
 8007418:	d01e      	beq.n	8007458 <_printf_common+0xa4>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	6922      	ldr	r2, [r4, #16]
 800741e:	f003 0306 	and.w	r3, r3, #6
 8007422:	2b04      	cmp	r3, #4
 8007424:	bf02      	ittt	eq
 8007426:	68e5      	ldreq	r5, [r4, #12]
 8007428:	6833      	ldreq	r3, [r6, #0]
 800742a:	1aed      	subeq	r5, r5, r3
 800742c:	68a3      	ldr	r3, [r4, #8]
 800742e:	bf0c      	ite	eq
 8007430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007434:	2500      	movne	r5, #0
 8007436:	4293      	cmp	r3, r2
 8007438:	bfc4      	itt	gt
 800743a:	1a9b      	subgt	r3, r3, r2
 800743c:	18ed      	addgt	r5, r5, r3
 800743e:	2600      	movs	r6, #0
 8007440:	341a      	adds	r4, #26
 8007442:	42b5      	cmp	r5, r6
 8007444:	d11a      	bne.n	800747c <_printf_common+0xc8>
 8007446:	2000      	movs	r0, #0
 8007448:	e008      	b.n	800745c <_printf_common+0xa8>
 800744a:	2301      	movs	r3, #1
 800744c:	4652      	mov	r2, sl
 800744e:	4649      	mov	r1, r9
 8007450:	4638      	mov	r0, r7
 8007452:	47c0      	blx	r8
 8007454:	3001      	adds	r0, #1
 8007456:	d103      	bne.n	8007460 <_printf_common+0xac>
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007460:	3501      	adds	r5, #1
 8007462:	e7c6      	b.n	80073f2 <_printf_common+0x3e>
 8007464:	18e1      	adds	r1, r4, r3
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	2030      	movs	r0, #48	; 0x30
 800746a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800746e:	4422      	add	r2, r4
 8007470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007478:	3302      	adds	r3, #2
 800747a:	e7c7      	b.n	800740c <_printf_common+0x58>
 800747c:	2301      	movs	r3, #1
 800747e:	4622      	mov	r2, r4
 8007480:	4649      	mov	r1, r9
 8007482:	4638      	mov	r0, r7
 8007484:	47c0      	blx	r8
 8007486:	3001      	adds	r0, #1
 8007488:	d0e6      	beq.n	8007458 <_printf_common+0xa4>
 800748a:	3601      	adds	r6, #1
 800748c:	e7d9      	b.n	8007442 <_printf_common+0x8e>
	...

08007490 <_printf_i>:
 8007490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	7e0f      	ldrb	r7, [r1, #24]
 8007496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007498:	2f78      	cmp	r7, #120	; 0x78
 800749a:	4691      	mov	r9, r2
 800749c:	4680      	mov	r8, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	469a      	mov	sl, r3
 80074a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074a6:	d807      	bhi.n	80074b8 <_printf_i+0x28>
 80074a8:	2f62      	cmp	r7, #98	; 0x62
 80074aa:	d80a      	bhi.n	80074c2 <_printf_i+0x32>
 80074ac:	2f00      	cmp	r7, #0
 80074ae:	f000 80d4 	beq.w	800765a <_printf_i+0x1ca>
 80074b2:	2f58      	cmp	r7, #88	; 0x58
 80074b4:	f000 80c0 	beq.w	8007638 <_printf_i+0x1a8>
 80074b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074c0:	e03a      	b.n	8007538 <_printf_i+0xa8>
 80074c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074c6:	2b15      	cmp	r3, #21
 80074c8:	d8f6      	bhi.n	80074b8 <_printf_i+0x28>
 80074ca:	a101      	add	r1, pc, #4	; (adr r1, 80074d0 <_printf_i+0x40>)
 80074cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074d0:	08007529 	.word	0x08007529
 80074d4:	0800753d 	.word	0x0800753d
 80074d8:	080074b9 	.word	0x080074b9
 80074dc:	080074b9 	.word	0x080074b9
 80074e0:	080074b9 	.word	0x080074b9
 80074e4:	080074b9 	.word	0x080074b9
 80074e8:	0800753d 	.word	0x0800753d
 80074ec:	080074b9 	.word	0x080074b9
 80074f0:	080074b9 	.word	0x080074b9
 80074f4:	080074b9 	.word	0x080074b9
 80074f8:	080074b9 	.word	0x080074b9
 80074fc:	08007641 	.word	0x08007641
 8007500:	08007569 	.word	0x08007569
 8007504:	080075fb 	.word	0x080075fb
 8007508:	080074b9 	.word	0x080074b9
 800750c:	080074b9 	.word	0x080074b9
 8007510:	08007663 	.word	0x08007663
 8007514:	080074b9 	.word	0x080074b9
 8007518:	08007569 	.word	0x08007569
 800751c:	080074b9 	.word	0x080074b9
 8007520:	080074b9 	.word	0x080074b9
 8007524:	08007603 	.word	0x08007603
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	1d1a      	adds	r2, r3, #4
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	602a      	str	r2, [r5, #0]
 8007530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007538:	2301      	movs	r3, #1
 800753a:	e09f      	b.n	800767c <_printf_i+0x1ec>
 800753c:	6820      	ldr	r0, [r4, #0]
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	0607      	lsls	r7, r0, #24
 8007542:	f103 0104 	add.w	r1, r3, #4
 8007546:	6029      	str	r1, [r5, #0]
 8007548:	d501      	bpl.n	800754e <_printf_i+0xbe>
 800754a:	681e      	ldr	r6, [r3, #0]
 800754c:	e003      	b.n	8007556 <_printf_i+0xc6>
 800754e:	0646      	lsls	r6, r0, #25
 8007550:	d5fb      	bpl.n	800754a <_printf_i+0xba>
 8007552:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007556:	2e00      	cmp	r6, #0
 8007558:	da03      	bge.n	8007562 <_printf_i+0xd2>
 800755a:	232d      	movs	r3, #45	; 0x2d
 800755c:	4276      	negs	r6, r6
 800755e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007562:	485a      	ldr	r0, [pc, #360]	; (80076cc <_printf_i+0x23c>)
 8007564:	230a      	movs	r3, #10
 8007566:	e012      	b.n	800758e <_printf_i+0xfe>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	6820      	ldr	r0, [r4, #0]
 800756c:	1d19      	adds	r1, r3, #4
 800756e:	6029      	str	r1, [r5, #0]
 8007570:	0605      	lsls	r5, r0, #24
 8007572:	d501      	bpl.n	8007578 <_printf_i+0xe8>
 8007574:	681e      	ldr	r6, [r3, #0]
 8007576:	e002      	b.n	800757e <_printf_i+0xee>
 8007578:	0641      	lsls	r1, r0, #25
 800757a:	d5fb      	bpl.n	8007574 <_printf_i+0xe4>
 800757c:	881e      	ldrh	r6, [r3, #0]
 800757e:	4853      	ldr	r0, [pc, #332]	; (80076cc <_printf_i+0x23c>)
 8007580:	2f6f      	cmp	r7, #111	; 0x6f
 8007582:	bf0c      	ite	eq
 8007584:	2308      	moveq	r3, #8
 8007586:	230a      	movne	r3, #10
 8007588:	2100      	movs	r1, #0
 800758a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800758e:	6865      	ldr	r5, [r4, #4]
 8007590:	60a5      	str	r5, [r4, #8]
 8007592:	2d00      	cmp	r5, #0
 8007594:	bfa2      	ittt	ge
 8007596:	6821      	ldrge	r1, [r4, #0]
 8007598:	f021 0104 	bicge.w	r1, r1, #4
 800759c:	6021      	strge	r1, [r4, #0]
 800759e:	b90e      	cbnz	r6, 80075a4 <_printf_i+0x114>
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	d04b      	beq.n	800763c <_printf_i+0x1ac>
 80075a4:	4615      	mov	r5, r2
 80075a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80075aa:	fb03 6711 	mls	r7, r3, r1, r6
 80075ae:	5dc7      	ldrb	r7, [r0, r7]
 80075b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075b4:	4637      	mov	r7, r6
 80075b6:	42bb      	cmp	r3, r7
 80075b8:	460e      	mov	r6, r1
 80075ba:	d9f4      	bls.n	80075a6 <_printf_i+0x116>
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d10b      	bne.n	80075d8 <_printf_i+0x148>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	07de      	lsls	r6, r3, #31
 80075c4:	d508      	bpl.n	80075d8 <_printf_i+0x148>
 80075c6:	6923      	ldr	r3, [r4, #16]
 80075c8:	6861      	ldr	r1, [r4, #4]
 80075ca:	4299      	cmp	r1, r3
 80075cc:	bfde      	ittt	le
 80075ce:	2330      	movle	r3, #48	; 0x30
 80075d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075d8:	1b52      	subs	r2, r2, r5
 80075da:	6122      	str	r2, [r4, #16]
 80075dc:	f8cd a000 	str.w	sl, [sp]
 80075e0:	464b      	mov	r3, r9
 80075e2:	aa03      	add	r2, sp, #12
 80075e4:	4621      	mov	r1, r4
 80075e6:	4640      	mov	r0, r8
 80075e8:	f7ff fee4 	bl	80073b4 <_printf_common>
 80075ec:	3001      	adds	r0, #1
 80075ee:	d14a      	bne.n	8007686 <_printf_i+0x1f6>
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	b004      	add	sp, #16
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	f043 0320 	orr.w	r3, r3, #32
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	4833      	ldr	r0, [pc, #204]	; (80076d0 <_printf_i+0x240>)
 8007604:	2778      	movs	r7, #120	; 0x78
 8007606:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	6829      	ldr	r1, [r5, #0]
 800760e:	061f      	lsls	r7, r3, #24
 8007610:	f851 6b04 	ldr.w	r6, [r1], #4
 8007614:	d402      	bmi.n	800761c <_printf_i+0x18c>
 8007616:	065f      	lsls	r7, r3, #25
 8007618:	bf48      	it	mi
 800761a:	b2b6      	uxthmi	r6, r6
 800761c:	07df      	lsls	r7, r3, #31
 800761e:	bf48      	it	mi
 8007620:	f043 0320 	orrmi.w	r3, r3, #32
 8007624:	6029      	str	r1, [r5, #0]
 8007626:	bf48      	it	mi
 8007628:	6023      	strmi	r3, [r4, #0]
 800762a:	b91e      	cbnz	r6, 8007634 <_printf_i+0x1a4>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	f023 0320 	bic.w	r3, r3, #32
 8007632:	6023      	str	r3, [r4, #0]
 8007634:	2310      	movs	r3, #16
 8007636:	e7a7      	b.n	8007588 <_printf_i+0xf8>
 8007638:	4824      	ldr	r0, [pc, #144]	; (80076cc <_printf_i+0x23c>)
 800763a:	e7e4      	b.n	8007606 <_printf_i+0x176>
 800763c:	4615      	mov	r5, r2
 800763e:	e7bd      	b.n	80075bc <_printf_i+0x12c>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	6826      	ldr	r6, [r4, #0]
 8007644:	6961      	ldr	r1, [r4, #20]
 8007646:	1d18      	adds	r0, r3, #4
 8007648:	6028      	str	r0, [r5, #0]
 800764a:	0635      	lsls	r5, r6, #24
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	d501      	bpl.n	8007654 <_printf_i+0x1c4>
 8007650:	6019      	str	r1, [r3, #0]
 8007652:	e002      	b.n	800765a <_printf_i+0x1ca>
 8007654:	0670      	lsls	r0, r6, #25
 8007656:	d5fb      	bpl.n	8007650 <_printf_i+0x1c0>
 8007658:	8019      	strh	r1, [r3, #0]
 800765a:	2300      	movs	r3, #0
 800765c:	6123      	str	r3, [r4, #16]
 800765e:	4615      	mov	r5, r2
 8007660:	e7bc      	b.n	80075dc <_printf_i+0x14c>
 8007662:	682b      	ldr	r3, [r5, #0]
 8007664:	1d1a      	adds	r2, r3, #4
 8007666:	602a      	str	r2, [r5, #0]
 8007668:	681d      	ldr	r5, [r3, #0]
 800766a:	6862      	ldr	r2, [r4, #4]
 800766c:	2100      	movs	r1, #0
 800766e:	4628      	mov	r0, r5
 8007670:	f7f8 fe3e 	bl	80002f0 <memchr>
 8007674:	b108      	cbz	r0, 800767a <_printf_i+0x1ea>
 8007676:	1b40      	subs	r0, r0, r5
 8007678:	6060      	str	r0, [r4, #4]
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	6123      	str	r3, [r4, #16]
 800767e:	2300      	movs	r3, #0
 8007680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007684:	e7aa      	b.n	80075dc <_printf_i+0x14c>
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	462a      	mov	r2, r5
 800768a:	4649      	mov	r1, r9
 800768c:	4640      	mov	r0, r8
 800768e:	47d0      	blx	sl
 8007690:	3001      	adds	r0, #1
 8007692:	d0ad      	beq.n	80075f0 <_printf_i+0x160>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	079b      	lsls	r3, r3, #30
 8007698:	d413      	bmi.n	80076c2 <_printf_i+0x232>
 800769a:	68e0      	ldr	r0, [r4, #12]
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	4298      	cmp	r0, r3
 80076a0:	bfb8      	it	lt
 80076a2:	4618      	movlt	r0, r3
 80076a4:	e7a6      	b.n	80075f4 <_printf_i+0x164>
 80076a6:	2301      	movs	r3, #1
 80076a8:	4632      	mov	r2, r6
 80076aa:	4649      	mov	r1, r9
 80076ac:	4640      	mov	r0, r8
 80076ae:	47d0      	blx	sl
 80076b0:	3001      	adds	r0, #1
 80076b2:	d09d      	beq.n	80075f0 <_printf_i+0x160>
 80076b4:	3501      	adds	r5, #1
 80076b6:	68e3      	ldr	r3, [r4, #12]
 80076b8:	9903      	ldr	r1, [sp, #12]
 80076ba:	1a5b      	subs	r3, r3, r1
 80076bc:	42ab      	cmp	r3, r5
 80076be:	dcf2      	bgt.n	80076a6 <_printf_i+0x216>
 80076c0:	e7eb      	b.n	800769a <_printf_i+0x20a>
 80076c2:	2500      	movs	r5, #0
 80076c4:	f104 0619 	add.w	r6, r4, #25
 80076c8:	e7f5      	b.n	80076b6 <_printf_i+0x226>
 80076ca:	bf00      	nop
 80076cc:	08009bca 	.word	0x08009bca
 80076d0:	08009bdb 	.word	0x08009bdb

080076d4 <std>:
 80076d4:	2300      	movs	r3, #0
 80076d6:	b510      	push	{r4, lr}
 80076d8:	4604      	mov	r4, r0
 80076da:	e9c0 3300 	strd	r3, r3, [r0]
 80076de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076e2:	6083      	str	r3, [r0, #8]
 80076e4:	8181      	strh	r1, [r0, #12]
 80076e6:	6643      	str	r3, [r0, #100]	; 0x64
 80076e8:	81c2      	strh	r2, [r0, #14]
 80076ea:	6183      	str	r3, [r0, #24]
 80076ec:	4619      	mov	r1, r3
 80076ee:	2208      	movs	r2, #8
 80076f0:	305c      	adds	r0, #92	; 0x5c
 80076f2:	f000 f914 	bl	800791e <memset>
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <std+0x58>)
 80076f8:	6263      	str	r3, [r4, #36]	; 0x24
 80076fa:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <std+0x5c>)
 80076fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <std+0x60>)
 8007700:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007702:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <std+0x64>)
 8007704:	6323      	str	r3, [r4, #48]	; 0x30
 8007706:	4b0d      	ldr	r3, [pc, #52]	; (800773c <std+0x68>)
 8007708:	6224      	str	r4, [r4, #32]
 800770a:	429c      	cmp	r4, r3
 800770c:	d006      	beq.n	800771c <std+0x48>
 800770e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007712:	4294      	cmp	r4, r2
 8007714:	d002      	beq.n	800771c <std+0x48>
 8007716:	33d0      	adds	r3, #208	; 0xd0
 8007718:	429c      	cmp	r4, r3
 800771a:	d105      	bne.n	8007728 <std+0x54>
 800771c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007724:	f000 b978 	b.w	8007a18 <__retarget_lock_init_recursive>
 8007728:	bd10      	pop	{r4, pc}
 800772a:	bf00      	nop
 800772c:	08007899 	.word	0x08007899
 8007730:	080078bb 	.word	0x080078bb
 8007734:	080078f3 	.word	0x080078f3
 8007738:	08007917 	.word	0x08007917
 800773c:	24000364 	.word	0x24000364

08007740 <stdio_exit_handler>:
 8007740:	4a02      	ldr	r2, [pc, #8]	; (800774c <stdio_exit_handler+0xc>)
 8007742:	4903      	ldr	r1, [pc, #12]	; (8007750 <stdio_exit_handler+0x10>)
 8007744:	4803      	ldr	r0, [pc, #12]	; (8007754 <stdio_exit_handler+0x14>)
 8007746:	f000 b869 	b.w	800781c <_fwalk_sglue>
 800774a:	bf00      	nop
 800774c:	24000010 	.word	0x24000010
 8007750:	080092bd 	.word	0x080092bd
 8007754:	2400001c 	.word	0x2400001c

08007758 <cleanup_stdio>:
 8007758:	6841      	ldr	r1, [r0, #4]
 800775a:	4b0c      	ldr	r3, [pc, #48]	; (800778c <cleanup_stdio+0x34>)
 800775c:	4299      	cmp	r1, r3
 800775e:	b510      	push	{r4, lr}
 8007760:	4604      	mov	r4, r0
 8007762:	d001      	beq.n	8007768 <cleanup_stdio+0x10>
 8007764:	f001 fdaa 	bl	80092bc <_fflush_r>
 8007768:	68a1      	ldr	r1, [r4, #8]
 800776a:	4b09      	ldr	r3, [pc, #36]	; (8007790 <cleanup_stdio+0x38>)
 800776c:	4299      	cmp	r1, r3
 800776e:	d002      	beq.n	8007776 <cleanup_stdio+0x1e>
 8007770:	4620      	mov	r0, r4
 8007772:	f001 fda3 	bl	80092bc <_fflush_r>
 8007776:	68e1      	ldr	r1, [r4, #12]
 8007778:	4b06      	ldr	r3, [pc, #24]	; (8007794 <cleanup_stdio+0x3c>)
 800777a:	4299      	cmp	r1, r3
 800777c:	d004      	beq.n	8007788 <cleanup_stdio+0x30>
 800777e:	4620      	mov	r0, r4
 8007780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007784:	f001 bd9a 	b.w	80092bc <_fflush_r>
 8007788:	bd10      	pop	{r4, pc}
 800778a:	bf00      	nop
 800778c:	24000364 	.word	0x24000364
 8007790:	240003cc 	.word	0x240003cc
 8007794:	24000434 	.word	0x24000434

08007798 <global_stdio_init.part.0>:
 8007798:	b510      	push	{r4, lr}
 800779a:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <global_stdio_init.part.0+0x30>)
 800779c:	4c0b      	ldr	r4, [pc, #44]	; (80077cc <global_stdio_init.part.0+0x34>)
 800779e:	4a0c      	ldr	r2, [pc, #48]	; (80077d0 <global_stdio_init.part.0+0x38>)
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	4620      	mov	r0, r4
 80077a4:	2200      	movs	r2, #0
 80077a6:	2104      	movs	r1, #4
 80077a8:	f7ff ff94 	bl	80076d4 <std>
 80077ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077b0:	2201      	movs	r2, #1
 80077b2:	2109      	movs	r1, #9
 80077b4:	f7ff ff8e 	bl	80076d4 <std>
 80077b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077bc:	2202      	movs	r2, #2
 80077be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c2:	2112      	movs	r1, #18
 80077c4:	f7ff bf86 	b.w	80076d4 <std>
 80077c8:	2400049c 	.word	0x2400049c
 80077cc:	24000364 	.word	0x24000364
 80077d0:	08007741 	.word	0x08007741

080077d4 <__sfp_lock_acquire>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__sfp_lock_acquire+0x8>)
 80077d6:	f000 b920 	b.w	8007a1a <__retarget_lock_acquire_recursive>
 80077da:	bf00      	nop
 80077dc:	240004a5 	.word	0x240004a5

080077e0 <__sfp_lock_release>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__sfp_lock_release+0x8>)
 80077e2:	f000 b91b 	b.w	8007a1c <__retarget_lock_release_recursive>
 80077e6:	bf00      	nop
 80077e8:	240004a5 	.word	0x240004a5

080077ec <__sinit>:
 80077ec:	b510      	push	{r4, lr}
 80077ee:	4604      	mov	r4, r0
 80077f0:	f7ff fff0 	bl	80077d4 <__sfp_lock_acquire>
 80077f4:	6a23      	ldr	r3, [r4, #32]
 80077f6:	b11b      	cbz	r3, 8007800 <__sinit+0x14>
 80077f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077fc:	f7ff bff0 	b.w	80077e0 <__sfp_lock_release>
 8007800:	4b04      	ldr	r3, [pc, #16]	; (8007814 <__sinit+0x28>)
 8007802:	6223      	str	r3, [r4, #32]
 8007804:	4b04      	ldr	r3, [pc, #16]	; (8007818 <__sinit+0x2c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f5      	bne.n	80077f8 <__sinit+0xc>
 800780c:	f7ff ffc4 	bl	8007798 <global_stdio_init.part.0>
 8007810:	e7f2      	b.n	80077f8 <__sinit+0xc>
 8007812:	bf00      	nop
 8007814:	08007759 	.word	0x08007759
 8007818:	2400049c 	.word	0x2400049c

0800781c <_fwalk_sglue>:
 800781c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007820:	4607      	mov	r7, r0
 8007822:	4688      	mov	r8, r1
 8007824:	4614      	mov	r4, r2
 8007826:	2600      	movs	r6, #0
 8007828:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800782c:	f1b9 0901 	subs.w	r9, r9, #1
 8007830:	d505      	bpl.n	800783e <_fwalk_sglue+0x22>
 8007832:	6824      	ldr	r4, [r4, #0]
 8007834:	2c00      	cmp	r4, #0
 8007836:	d1f7      	bne.n	8007828 <_fwalk_sglue+0xc>
 8007838:	4630      	mov	r0, r6
 800783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783e:	89ab      	ldrh	r3, [r5, #12]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d907      	bls.n	8007854 <_fwalk_sglue+0x38>
 8007844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007848:	3301      	adds	r3, #1
 800784a:	d003      	beq.n	8007854 <_fwalk_sglue+0x38>
 800784c:	4629      	mov	r1, r5
 800784e:	4638      	mov	r0, r7
 8007850:	47c0      	blx	r8
 8007852:	4306      	orrs	r6, r0
 8007854:	3568      	adds	r5, #104	; 0x68
 8007856:	e7e9      	b.n	800782c <_fwalk_sglue+0x10>

08007858 <siprintf>:
 8007858:	b40e      	push	{r1, r2, r3}
 800785a:	b500      	push	{lr}
 800785c:	b09c      	sub	sp, #112	; 0x70
 800785e:	ab1d      	add	r3, sp, #116	; 0x74
 8007860:	9002      	str	r0, [sp, #8]
 8007862:	9006      	str	r0, [sp, #24]
 8007864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007868:	4809      	ldr	r0, [pc, #36]	; (8007890 <siprintf+0x38>)
 800786a:	9107      	str	r1, [sp, #28]
 800786c:	9104      	str	r1, [sp, #16]
 800786e:	4909      	ldr	r1, [pc, #36]	; (8007894 <siprintf+0x3c>)
 8007870:	f853 2b04 	ldr.w	r2, [r3], #4
 8007874:	9105      	str	r1, [sp, #20]
 8007876:	6800      	ldr	r0, [r0, #0]
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	a902      	add	r1, sp, #8
 800787c:	f001 fb9a 	bl	8008fb4 <_svfiprintf_r>
 8007880:	9b02      	ldr	r3, [sp, #8]
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	b01c      	add	sp, #112	; 0x70
 8007888:	f85d eb04 	ldr.w	lr, [sp], #4
 800788c:	b003      	add	sp, #12
 800788e:	4770      	bx	lr
 8007890:	24000068 	.word	0x24000068
 8007894:	ffff0208 	.word	0xffff0208

08007898 <__sread>:
 8007898:	b510      	push	{r4, lr}
 800789a:	460c      	mov	r4, r1
 800789c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a0:	f000 f86c 	bl	800797c <_read_r>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	bfab      	itete	ge
 80078a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078aa:	89a3      	ldrhlt	r3, [r4, #12]
 80078ac:	181b      	addge	r3, r3, r0
 80078ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078b2:	bfac      	ite	ge
 80078b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078b6:	81a3      	strhlt	r3, [r4, #12]
 80078b8:	bd10      	pop	{r4, pc}

080078ba <__swrite>:
 80078ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078be:	461f      	mov	r7, r3
 80078c0:	898b      	ldrh	r3, [r1, #12]
 80078c2:	05db      	lsls	r3, r3, #23
 80078c4:	4605      	mov	r5, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	4616      	mov	r6, r2
 80078ca:	d505      	bpl.n	80078d8 <__swrite+0x1e>
 80078cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d0:	2302      	movs	r3, #2
 80078d2:	2200      	movs	r2, #0
 80078d4:	f000 f840 	bl	8007958 <_lseek_r>
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078e2:	81a3      	strh	r3, [r4, #12]
 80078e4:	4632      	mov	r2, r6
 80078e6:	463b      	mov	r3, r7
 80078e8:	4628      	mov	r0, r5
 80078ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ee:	f000 b857 	b.w	80079a0 <_write_r>

080078f2 <__sseek>:
 80078f2:	b510      	push	{r4, lr}
 80078f4:	460c      	mov	r4, r1
 80078f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fa:	f000 f82d 	bl	8007958 <_lseek_r>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	bf15      	itete	ne
 8007904:	6560      	strne	r0, [r4, #84]	; 0x54
 8007906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800790a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800790e:	81a3      	strheq	r3, [r4, #12]
 8007910:	bf18      	it	ne
 8007912:	81a3      	strhne	r3, [r4, #12]
 8007914:	bd10      	pop	{r4, pc}

08007916 <__sclose>:
 8007916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791a:	f000 b80d 	b.w	8007938 <_close_r>

0800791e <memset>:
 800791e:	4402      	add	r2, r0
 8007920:	4603      	mov	r3, r0
 8007922:	4293      	cmp	r3, r2
 8007924:	d100      	bne.n	8007928 <memset+0xa>
 8007926:	4770      	bx	lr
 8007928:	f803 1b01 	strb.w	r1, [r3], #1
 800792c:	e7f9      	b.n	8007922 <memset+0x4>
	...

08007930 <_localeconv_r>:
 8007930:	4800      	ldr	r0, [pc, #0]	; (8007934 <_localeconv_r+0x4>)
 8007932:	4770      	bx	lr
 8007934:	2400015c 	.word	0x2400015c

08007938 <_close_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d06      	ldr	r5, [pc, #24]	; (8007954 <_close_r+0x1c>)
 800793c:	2300      	movs	r3, #0
 800793e:	4604      	mov	r4, r0
 8007940:	4608      	mov	r0, r1
 8007942:	602b      	str	r3, [r5, #0]
 8007944:	f7f9 fe0d 	bl	8001562 <_close>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_close_r+0x1a>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_close_r+0x1a>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	240004a0 	.word	0x240004a0

08007958 <_lseek_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	; (8007978 <_lseek_r+0x20>)
 800795c:	4604      	mov	r4, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	2200      	movs	r2, #0
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f7f9 fe22 	bl	80015b0 <_lseek>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_lseek_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_lseek_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	240004a0 	.word	0x240004a0

0800797c <_read_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d07      	ldr	r5, [pc, #28]	; (800799c <_read_r+0x20>)
 8007980:	4604      	mov	r4, r0
 8007982:	4608      	mov	r0, r1
 8007984:	4611      	mov	r1, r2
 8007986:	2200      	movs	r2, #0
 8007988:	602a      	str	r2, [r5, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	f7f9 fdb0 	bl	80014f0 <_read>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_read_r+0x1e>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_read_r+0x1e>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	240004a0 	.word	0x240004a0

080079a0 <_write_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d07      	ldr	r5, [pc, #28]	; (80079c0 <_write_r+0x20>)
 80079a4:	4604      	mov	r4, r0
 80079a6:	4608      	mov	r0, r1
 80079a8:	4611      	mov	r1, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	602a      	str	r2, [r5, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f7f9 fdbb 	bl	800152a <_write>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_write_r+0x1e>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_write_r+0x1e>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	240004a0 	.word	0x240004a0

080079c4 <__errno>:
 80079c4:	4b01      	ldr	r3, [pc, #4]	; (80079cc <__errno+0x8>)
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	24000068 	.word	0x24000068

080079d0 <__libc_init_array>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	4d0d      	ldr	r5, [pc, #52]	; (8007a08 <__libc_init_array+0x38>)
 80079d4:	4c0d      	ldr	r4, [pc, #52]	; (8007a0c <__libc_init_array+0x3c>)
 80079d6:	1b64      	subs	r4, r4, r5
 80079d8:	10a4      	asrs	r4, r4, #2
 80079da:	2600      	movs	r6, #0
 80079dc:	42a6      	cmp	r6, r4
 80079de:	d109      	bne.n	80079f4 <__libc_init_array+0x24>
 80079e0:	4d0b      	ldr	r5, [pc, #44]	; (8007a10 <__libc_init_array+0x40>)
 80079e2:	4c0c      	ldr	r4, [pc, #48]	; (8007a14 <__libc_init_array+0x44>)
 80079e4:	f002 f80e 	bl	8009a04 <_init>
 80079e8:	1b64      	subs	r4, r4, r5
 80079ea:	10a4      	asrs	r4, r4, #2
 80079ec:	2600      	movs	r6, #0
 80079ee:	42a6      	cmp	r6, r4
 80079f0:	d105      	bne.n	80079fe <__libc_init_array+0x2e>
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f8:	4798      	blx	r3
 80079fa:	3601      	adds	r6, #1
 80079fc:	e7ee      	b.n	80079dc <__libc_init_array+0xc>
 80079fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a02:	4798      	blx	r3
 8007a04:	3601      	adds	r6, #1
 8007a06:	e7f2      	b.n	80079ee <__libc_init_array+0x1e>
 8007a08:	08009f34 	.word	0x08009f34
 8007a0c:	08009f34 	.word	0x08009f34
 8007a10:	08009f34 	.word	0x08009f34
 8007a14:	08009f38 	.word	0x08009f38

08007a18 <__retarget_lock_init_recursive>:
 8007a18:	4770      	bx	lr

08007a1a <__retarget_lock_acquire_recursive>:
 8007a1a:	4770      	bx	lr

08007a1c <__retarget_lock_release_recursive>:
 8007a1c:	4770      	bx	lr

08007a1e <quorem>:
 8007a1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a22:	6903      	ldr	r3, [r0, #16]
 8007a24:	690c      	ldr	r4, [r1, #16]
 8007a26:	42a3      	cmp	r3, r4
 8007a28:	4607      	mov	r7, r0
 8007a2a:	db7e      	blt.n	8007b2a <quorem+0x10c>
 8007a2c:	3c01      	subs	r4, #1
 8007a2e:	f101 0814 	add.w	r8, r1, #20
 8007a32:	f100 0514 	add.w	r5, r0, #20
 8007a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a44:	3301      	adds	r3, #1
 8007a46:	429a      	cmp	r2, r3
 8007a48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a50:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a54:	d331      	bcc.n	8007aba <quorem+0x9c>
 8007a56:	f04f 0e00 	mov.w	lr, #0
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	46ac      	mov	ip, r5
 8007a5e:	46f2      	mov	sl, lr
 8007a60:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a64:	b293      	uxth	r3, r2
 8007a66:	fb06 e303 	mla	r3, r6, r3, lr
 8007a6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a6e:	0c1a      	lsrs	r2, r3, #16
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	ebaa 0303 	sub.w	r3, sl, r3
 8007a76:	f8dc a000 	ldr.w	sl, [ip]
 8007a7a:	fa13 f38a 	uxtah	r3, r3, sl
 8007a7e:	fb06 220e 	mla	r2, r6, lr, r2
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	9b00      	ldr	r3, [sp, #0]
 8007a86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a8a:	b292      	uxth	r2, r2
 8007a8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a94:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a98:	4581      	cmp	r9, r0
 8007a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a9e:	f84c 3b04 	str.w	r3, [ip], #4
 8007aa2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aa6:	d2db      	bcs.n	8007a60 <quorem+0x42>
 8007aa8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007aac:	b92b      	cbnz	r3, 8007aba <quorem+0x9c>
 8007aae:	9b01      	ldr	r3, [sp, #4]
 8007ab0:	3b04      	subs	r3, #4
 8007ab2:	429d      	cmp	r5, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	d32c      	bcc.n	8007b12 <quorem+0xf4>
 8007ab8:	613c      	str	r4, [r7, #16]
 8007aba:	4638      	mov	r0, r7
 8007abc:	f001 f920 	bl	8008d00 <__mcmp>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	db22      	blt.n	8007b0a <quorem+0xec>
 8007ac4:	3601      	adds	r6, #1
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	2000      	movs	r0, #0
 8007aca:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ace:	f8d1 c000 	ldr.w	ip, [r1]
 8007ad2:	b293      	uxth	r3, r2
 8007ad4:	1ac3      	subs	r3, r0, r3
 8007ad6:	0c12      	lsrs	r2, r2, #16
 8007ad8:	fa13 f38c 	uxtah	r3, r3, ip
 8007adc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007ae0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aea:	45c1      	cmp	r9, r8
 8007aec:	f841 3b04 	str.w	r3, [r1], #4
 8007af0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007af4:	d2e9      	bcs.n	8007aca <quorem+0xac>
 8007af6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007afe:	b922      	cbnz	r2, 8007b0a <quorem+0xec>
 8007b00:	3b04      	subs	r3, #4
 8007b02:	429d      	cmp	r5, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	d30a      	bcc.n	8007b1e <quorem+0x100>
 8007b08:	613c      	str	r4, [r7, #16]
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	b003      	add	sp, #12
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	3b04      	subs	r3, #4
 8007b16:	2a00      	cmp	r2, #0
 8007b18:	d1ce      	bne.n	8007ab8 <quorem+0x9a>
 8007b1a:	3c01      	subs	r4, #1
 8007b1c:	e7c9      	b.n	8007ab2 <quorem+0x94>
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	3b04      	subs	r3, #4
 8007b22:	2a00      	cmp	r2, #0
 8007b24:	d1f0      	bne.n	8007b08 <quorem+0xea>
 8007b26:	3c01      	subs	r4, #1
 8007b28:	e7eb      	b.n	8007b02 <quorem+0xe4>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e7ee      	b.n	8007b0c <quorem+0xee>
	...

08007b30 <_dtoa_r>:
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	ed2d 8b02 	vpush	{d8}
 8007b38:	69c5      	ldr	r5, [r0, #28]
 8007b3a:	b091      	sub	sp, #68	; 0x44
 8007b3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b40:	ec59 8b10 	vmov	r8, r9, d0
 8007b44:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007b46:	9106      	str	r1, [sp, #24]
 8007b48:	4606      	mov	r6, r0
 8007b4a:	9208      	str	r2, [sp, #32]
 8007b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b4e:	b975      	cbnz	r5, 8007b6e <_dtoa_r+0x3e>
 8007b50:	2010      	movs	r0, #16
 8007b52:	f000 fda5 	bl	80086a0 <malloc>
 8007b56:	4602      	mov	r2, r0
 8007b58:	61f0      	str	r0, [r6, #28]
 8007b5a:	b920      	cbnz	r0, 8007b66 <_dtoa_r+0x36>
 8007b5c:	4ba6      	ldr	r3, [pc, #664]	; (8007df8 <_dtoa_r+0x2c8>)
 8007b5e:	21ef      	movs	r1, #239	; 0xef
 8007b60:	48a6      	ldr	r0, [pc, #664]	; (8007dfc <_dtoa_r+0x2cc>)
 8007b62:	f001 fc0b 	bl	800937c <__assert_func>
 8007b66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b6a:	6005      	str	r5, [r0, #0]
 8007b6c:	60c5      	str	r5, [r0, #12]
 8007b6e:	69f3      	ldr	r3, [r6, #28]
 8007b70:	6819      	ldr	r1, [r3, #0]
 8007b72:	b151      	cbz	r1, 8007b8a <_dtoa_r+0x5a>
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	604a      	str	r2, [r1, #4]
 8007b78:	2301      	movs	r3, #1
 8007b7a:	4093      	lsls	r3, r2
 8007b7c:	608b      	str	r3, [r1, #8]
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f000 fe82 	bl	8008888 <_Bfree>
 8007b84:	69f3      	ldr	r3, [r6, #28]
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	f1b9 0300 	subs.w	r3, r9, #0
 8007b8e:	bfbb      	ittet	lt
 8007b90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b94:	9303      	strlt	r3, [sp, #12]
 8007b96:	2300      	movge	r3, #0
 8007b98:	2201      	movlt	r2, #1
 8007b9a:	bfac      	ite	ge
 8007b9c:	6023      	strge	r3, [r4, #0]
 8007b9e:	6022      	strlt	r2, [r4, #0]
 8007ba0:	4b97      	ldr	r3, [pc, #604]	; (8007e00 <_dtoa_r+0x2d0>)
 8007ba2:	9c03      	ldr	r4, [sp, #12]
 8007ba4:	43a3      	bics	r3, r4
 8007ba6:	d11c      	bne.n	8007be2 <_dtoa_r+0xb2>
 8007ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007bb4:	ea53 0308 	orrs.w	r3, r3, r8
 8007bb8:	f000 84fb 	beq.w	80085b2 <_dtoa_r+0xa82>
 8007bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bbe:	b963      	cbnz	r3, 8007bda <_dtoa_r+0xaa>
 8007bc0:	4b90      	ldr	r3, [pc, #576]	; (8007e04 <_dtoa_r+0x2d4>)
 8007bc2:	e020      	b.n	8007c06 <_dtoa_r+0xd6>
 8007bc4:	4b90      	ldr	r3, [pc, #576]	; (8007e08 <_dtoa_r+0x2d8>)
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	9801      	ldr	r0, [sp, #4]
 8007bd0:	b011      	add	sp, #68	; 0x44
 8007bd2:	ecbd 8b02 	vpop	{d8}
 8007bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bda:	4b8a      	ldr	r3, [pc, #552]	; (8007e04 <_dtoa_r+0x2d4>)
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	3303      	adds	r3, #3
 8007be0:	e7f3      	b.n	8007bca <_dtoa_r+0x9a>
 8007be2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007be6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bee:	d10c      	bne.n	8007c0a <_dtoa_r+0xda>
 8007bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 84d7 	beq.w	80085ac <_dtoa_r+0xa7c>
 8007bfe:	4b83      	ldr	r3, [pc, #524]	; (8007e0c <_dtoa_r+0x2dc>)
 8007c00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	e7e1      	b.n	8007bce <_dtoa_r+0x9e>
 8007c0a:	aa0e      	add	r2, sp, #56	; 0x38
 8007c0c:	a90f      	add	r1, sp, #60	; 0x3c
 8007c0e:	4630      	mov	r0, r6
 8007c10:	eeb0 0b48 	vmov.f64	d0, d8
 8007c14:	f001 f91a 	bl	8008e4c <__d2b>
 8007c18:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c1e:	4605      	mov	r5, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d046      	beq.n	8007cb2 <_dtoa_r+0x182>
 8007c24:	eeb0 7b48 	vmov.f64	d7, d8
 8007c28:	ee18 1a90 	vmov	r1, s17
 8007c2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007c30:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007c34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007c38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	ee07 1a90 	vmov	s15, r1
 8007c42:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8007c46:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007de0 <_dtoa_r+0x2b0>
 8007c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007c4e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007de8 <_dtoa_r+0x2b8>
 8007c52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007c56:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007df0 <_dtoa_r+0x2c0>
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007c62:	eeb0 7b46 	vmov.f64	d7, d6
 8007c66:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007c6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007c6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c76:	ee16 ba90 	vmov	fp, s13
 8007c7a:	9009      	str	r0, [sp, #36]	; 0x24
 8007c7c:	d508      	bpl.n	8007c90 <_dtoa_r+0x160>
 8007c7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007c82:	eeb4 6b47 	vcmp.f64	d6, d7
 8007c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8a:	bf18      	it	ne
 8007c8c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007c90:	f1bb 0f16 	cmp.w	fp, #22
 8007c94:	d82b      	bhi.n	8007cee <_dtoa_r+0x1be>
 8007c96:	495e      	ldr	r1, [pc, #376]	; (8007e10 <_dtoa_r+0x2e0>)
 8007c98:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007c9c:	ed91 7b00 	vldr	d7, [r1]
 8007ca0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca8:	d501      	bpl.n	8007cae <_dtoa_r+0x17e>
 8007caa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cae:	2100      	movs	r1, #0
 8007cb0:	e01e      	b.n	8007cf0 <_dtoa_r+0x1c0>
 8007cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007cba:	2920      	cmp	r1, #32
 8007cbc:	bfc1      	itttt	gt
 8007cbe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007cc2:	408c      	lslgt	r4, r1
 8007cc4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007cc8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007ccc:	bfd6      	itet	le
 8007cce:	f1c1 0120 	rsble	r1, r1, #32
 8007cd2:	4321      	orrgt	r1, r4
 8007cd4:	fa08 f101 	lslle.w	r1, r8, r1
 8007cd8:	ee07 1a90 	vmov	s15, r1
 8007cdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	ee17 1a90 	vmov	r1, s15
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007cec:	e7a7      	b.n	8007c3e <_dtoa_r+0x10e>
 8007cee:	2101      	movs	r1, #1
 8007cf0:	1ad2      	subs	r2, r2, r3
 8007cf2:	1e53      	subs	r3, r2, #1
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	bf45      	ittet	mi
 8007cf8:	f1c2 0301 	rsbmi	r3, r2, #1
 8007cfc:	9304      	strmi	r3, [sp, #16]
 8007cfe:	2300      	movpl	r3, #0
 8007d00:	2300      	movmi	r3, #0
 8007d02:	bf4c      	ite	mi
 8007d04:	9305      	strmi	r3, [sp, #20]
 8007d06:	9304      	strpl	r3, [sp, #16]
 8007d08:	f1bb 0f00 	cmp.w	fp, #0
 8007d0c:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d0e:	db18      	blt.n	8007d42 <_dtoa_r+0x212>
 8007d10:	9b05      	ldr	r3, [sp, #20]
 8007d12:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007d16:	445b      	add	r3, fp
 8007d18:	9305      	str	r3, [sp, #20]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9a06      	ldr	r2, [sp, #24]
 8007d1e:	2a09      	cmp	r2, #9
 8007d20:	d848      	bhi.n	8007db4 <_dtoa_r+0x284>
 8007d22:	2a05      	cmp	r2, #5
 8007d24:	bfc4      	itt	gt
 8007d26:	3a04      	subgt	r2, #4
 8007d28:	9206      	strgt	r2, [sp, #24]
 8007d2a:	9a06      	ldr	r2, [sp, #24]
 8007d2c:	f1a2 0202 	sub.w	r2, r2, #2
 8007d30:	bfcc      	ite	gt
 8007d32:	2400      	movgt	r4, #0
 8007d34:	2401      	movle	r4, #1
 8007d36:	2a03      	cmp	r2, #3
 8007d38:	d847      	bhi.n	8007dca <_dtoa_r+0x29a>
 8007d3a:	e8df f002 	tbb	[pc, r2]
 8007d3e:	2d0b      	.short	0x2d0b
 8007d40:	392b      	.short	0x392b
 8007d42:	9b04      	ldr	r3, [sp, #16]
 8007d44:	2200      	movs	r2, #0
 8007d46:	eba3 030b 	sub.w	r3, r3, fp
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	920a      	str	r2, [sp, #40]	; 0x28
 8007d4e:	f1cb 0300 	rsb	r3, fp, #0
 8007d52:	e7e3      	b.n	8007d1c <_dtoa_r+0x1ec>
 8007d54:	2200      	movs	r2, #0
 8007d56:	9207      	str	r2, [sp, #28]
 8007d58:	9a08      	ldr	r2, [sp, #32]
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	dc38      	bgt.n	8007dd0 <_dtoa_r+0x2a0>
 8007d5e:	f04f 0a01 	mov.w	sl, #1
 8007d62:	46d1      	mov	r9, sl
 8007d64:	4652      	mov	r2, sl
 8007d66:	f8cd a020 	str.w	sl, [sp, #32]
 8007d6a:	69f7      	ldr	r7, [r6, #28]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	2004      	movs	r0, #4
 8007d70:	f100 0c14 	add.w	ip, r0, #20
 8007d74:	4594      	cmp	ip, r2
 8007d76:	d930      	bls.n	8007dda <_dtoa_r+0x2aa>
 8007d78:	6079      	str	r1, [r7, #4]
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d7e:	f000 fd43 	bl	8008808 <_Balloc>
 8007d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d84:	9001      	str	r0, [sp, #4]
 8007d86:	4602      	mov	r2, r0
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d145      	bne.n	8007e18 <_dtoa_r+0x2e8>
 8007d8c:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <_dtoa_r+0x2e4>)
 8007d8e:	f240 11af 	movw	r1, #431	; 0x1af
 8007d92:	e6e5      	b.n	8007b60 <_dtoa_r+0x30>
 8007d94:	2201      	movs	r2, #1
 8007d96:	e7de      	b.n	8007d56 <_dtoa_r+0x226>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	9207      	str	r2, [sp, #28]
 8007d9c:	9a08      	ldr	r2, [sp, #32]
 8007d9e:	eb0b 0a02 	add.w	sl, fp, r2
 8007da2:	f10a 0901 	add.w	r9, sl, #1
 8007da6:	464a      	mov	r2, r9
 8007da8:	2a01      	cmp	r2, #1
 8007daa:	bfb8      	it	lt
 8007dac:	2201      	movlt	r2, #1
 8007dae:	e7dc      	b.n	8007d6a <_dtoa_r+0x23a>
 8007db0:	2201      	movs	r2, #1
 8007db2:	e7f2      	b.n	8007d9a <_dtoa_r+0x26a>
 8007db4:	2401      	movs	r4, #1
 8007db6:	2200      	movs	r2, #0
 8007db8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007dbc:	f04f 3aff 	mov.w	sl, #4294967295
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	46d1      	mov	r9, sl
 8007dc4:	2212      	movs	r2, #18
 8007dc6:	9108      	str	r1, [sp, #32]
 8007dc8:	e7cf      	b.n	8007d6a <_dtoa_r+0x23a>
 8007dca:	2201      	movs	r2, #1
 8007dcc:	9207      	str	r2, [sp, #28]
 8007dce:	e7f5      	b.n	8007dbc <_dtoa_r+0x28c>
 8007dd0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007dd4:	46d1      	mov	r9, sl
 8007dd6:	4652      	mov	r2, sl
 8007dd8:	e7c7      	b.n	8007d6a <_dtoa_r+0x23a>
 8007dda:	3101      	adds	r1, #1
 8007ddc:	0040      	lsls	r0, r0, #1
 8007dde:	e7c7      	b.n	8007d70 <_dtoa_r+0x240>
 8007de0:	636f4361 	.word	0x636f4361
 8007de4:	3fd287a7 	.word	0x3fd287a7
 8007de8:	8b60c8b3 	.word	0x8b60c8b3
 8007dec:	3fc68a28 	.word	0x3fc68a28
 8007df0:	509f79fb 	.word	0x509f79fb
 8007df4:	3fd34413 	.word	0x3fd34413
 8007df8:	08009bf9 	.word	0x08009bf9
 8007dfc:	08009c10 	.word	0x08009c10
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	08009bf5 	.word	0x08009bf5
 8007e08:	08009bec 	.word	0x08009bec
 8007e0c:	08009bc9 	.word	0x08009bc9
 8007e10:	08009d00 	.word	0x08009d00
 8007e14:	08009c68 	.word	0x08009c68
 8007e18:	69f2      	ldr	r2, [r6, #28]
 8007e1a:	9901      	ldr	r1, [sp, #4]
 8007e1c:	6011      	str	r1, [r2, #0]
 8007e1e:	f1b9 0f0e 	cmp.w	r9, #14
 8007e22:	d86c      	bhi.n	8007efe <_dtoa_r+0x3ce>
 8007e24:	2c00      	cmp	r4, #0
 8007e26:	d06a      	beq.n	8007efe <_dtoa_r+0x3ce>
 8007e28:	f1bb 0f00 	cmp.w	fp, #0
 8007e2c:	f340 80a0 	ble.w	8007f70 <_dtoa_r+0x440>
 8007e30:	4ac1      	ldr	r2, [pc, #772]	; (8008138 <_dtoa_r+0x608>)
 8007e32:	f00b 010f 	and.w	r1, fp, #15
 8007e36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007e3a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e3e:	ed92 7b00 	vldr	d7, [r2]
 8007e42:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007e46:	f000 8087 	beq.w	8007f58 <_dtoa_r+0x428>
 8007e4a:	49bc      	ldr	r1, [pc, #752]	; (800813c <_dtoa_r+0x60c>)
 8007e4c:	ed91 6b08 	vldr	d6, [r1, #32]
 8007e50:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007e54:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007e58:	f002 020f 	and.w	r2, r2, #15
 8007e5c:	2103      	movs	r1, #3
 8007e5e:	48b7      	ldr	r0, [pc, #732]	; (800813c <_dtoa_r+0x60c>)
 8007e60:	2a00      	cmp	r2, #0
 8007e62:	d17b      	bne.n	8007f5c <_dtoa_r+0x42c>
 8007e64:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007e6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	f000 80a0 	beq.w	8007fbc <_dtoa_r+0x48c>
 8007e7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007e80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e88:	f140 8098 	bpl.w	8007fbc <_dtoa_r+0x48c>
 8007e8c:	f1b9 0f00 	cmp.w	r9, #0
 8007e90:	f000 8094 	beq.w	8007fbc <_dtoa_r+0x48c>
 8007e94:	f1ba 0f00 	cmp.w	sl, #0
 8007e98:	dd2f      	ble.n	8007efa <_dtoa_r+0x3ca>
 8007e9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007e9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ea2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ea6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007eaa:	3101      	adds	r1, #1
 8007eac:	4654      	mov	r4, sl
 8007eae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007eb2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007eb6:	ee07 1a90 	vmov	s15, r1
 8007eba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ebe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007ec2:	ee15 7a90 	vmov	r7, s11
 8007ec6:	ec51 0b15 	vmov	r0, r1, d5
 8007eca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007ece:	2c00      	cmp	r4, #0
 8007ed0:	d177      	bne.n	8007fc2 <_dtoa_r+0x492>
 8007ed2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007ed6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007eda:	ec41 0b17 	vmov	d7, r0, r1
 8007ede:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee6:	f300 826a 	bgt.w	80083be <_dtoa_r+0x88e>
 8007eea:	eeb1 7b47 	vneg.f64	d7, d7
 8007eee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef6:	f100 8260 	bmi.w	80083ba <_dtoa_r+0x88a>
 8007efa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f00:	2a00      	cmp	r2, #0
 8007f02:	f2c0 811d 	blt.w	8008140 <_dtoa_r+0x610>
 8007f06:	f1bb 0f0e 	cmp.w	fp, #14
 8007f0a:	f300 8119 	bgt.w	8008140 <_dtoa_r+0x610>
 8007f0e:	4b8a      	ldr	r3, [pc, #552]	; (8008138 <_dtoa_r+0x608>)
 8007f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f14:	ed93 6b00 	vldr	d6, [r3]
 8007f18:	9b08      	ldr	r3, [sp, #32]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f280 80b7 	bge.w	800808e <_dtoa_r+0x55e>
 8007f20:	f1b9 0f00 	cmp.w	r9, #0
 8007f24:	f300 80b3 	bgt.w	800808e <_dtoa_r+0x55e>
 8007f28:	f040 8246 	bne.w	80083b8 <_dtoa_r+0x888>
 8007f2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007f30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007f34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f40:	464c      	mov	r4, r9
 8007f42:	464f      	mov	r7, r9
 8007f44:	f280 821c 	bge.w	8008380 <_dtoa_r+0x850>
 8007f48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f4c:	2331      	movs	r3, #49	; 0x31
 8007f4e:	f808 3b01 	strb.w	r3, [r8], #1
 8007f52:	f10b 0b01 	add.w	fp, fp, #1
 8007f56:	e218      	b.n	800838a <_dtoa_r+0x85a>
 8007f58:	2102      	movs	r1, #2
 8007f5a:	e780      	b.n	8007e5e <_dtoa_r+0x32e>
 8007f5c:	07d4      	lsls	r4, r2, #31
 8007f5e:	d504      	bpl.n	8007f6a <_dtoa_r+0x43a>
 8007f60:	ed90 6b00 	vldr	d6, [r0]
 8007f64:	3101      	adds	r1, #1
 8007f66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f6a:	1052      	asrs	r2, r2, #1
 8007f6c:	3008      	adds	r0, #8
 8007f6e:	e777      	b.n	8007e60 <_dtoa_r+0x330>
 8007f70:	d022      	beq.n	8007fb8 <_dtoa_r+0x488>
 8007f72:	f1cb 0200 	rsb	r2, fp, #0
 8007f76:	4970      	ldr	r1, [pc, #448]	; (8008138 <_dtoa_r+0x608>)
 8007f78:	f002 000f 	and.w	r0, r2, #15
 8007f7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007f80:	ed91 7b00 	vldr	d7, [r1]
 8007f84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007f88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f8c:	486b      	ldr	r0, [pc, #428]	; (800813c <_dtoa_r+0x60c>)
 8007f8e:	1112      	asrs	r2, r2, #4
 8007f90:	2400      	movs	r4, #0
 8007f92:	2102      	movs	r1, #2
 8007f94:	b92a      	cbnz	r2, 8007fa2 <_dtoa_r+0x472>
 8007f96:	2c00      	cmp	r4, #0
 8007f98:	f43f af6a 	beq.w	8007e70 <_dtoa_r+0x340>
 8007f9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fa0:	e766      	b.n	8007e70 <_dtoa_r+0x340>
 8007fa2:	07d7      	lsls	r7, r2, #31
 8007fa4:	d505      	bpl.n	8007fb2 <_dtoa_r+0x482>
 8007fa6:	ed90 6b00 	vldr	d6, [r0]
 8007faa:	3101      	adds	r1, #1
 8007fac:	2401      	movs	r4, #1
 8007fae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fb2:	1052      	asrs	r2, r2, #1
 8007fb4:	3008      	adds	r0, #8
 8007fb6:	e7ed      	b.n	8007f94 <_dtoa_r+0x464>
 8007fb8:	2102      	movs	r1, #2
 8007fba:	e759      	b.n	8007e70 <_dtoa_r+0x340>
 8007fbc:	465a      	mov	r2, fp
 8007fbe:	464c      	mov	r4, r9
 8007fc0:	e775      	b.n	8007eae <_dtoa_r+0x37e>
 8007fc2:	ec41 0b17 	vmov	d7, r0, r1
 8007fc6:	495c      	ldr	r1, [pc, #368]	; (8008138 <_dtoa_r+0x608>)
 8007fc8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007fcc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007fd0:	9901      	ldr	r1, [sp, #4]
 8007fd2:	440c      	add	r4, r1
 8007fd4:	9907      	ldr	r1, [sp, #28]
 8007fd6:	b351      	cbz	r1, 800802e <_dtoa_r+0x4fe>
 8007fd8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007fdc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007fe0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007fe4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007fe8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007fec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007ff0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ff4:	ee14 1a90 	vmov	r1, s9
 8007ff8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007ffc:	3130      	adds	r1, #48	; 0x30
 8007ffe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008002:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800a:	f808 1b01 	strb.w	r1, [r8], #1
 800800e:	d439      	bmi.n	8008084 <_dtoa_r+0x554>
 8008010:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008014:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801c:	d472      	bmi.n	8008104 <_dtoa_r+0x5d4>
 800801e:	45a0      	cmp	r8, r4
 8008020:	f43f af6b 	beq.w	8007efa <_dtoa_r+0x3ca>
 8008024:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008028:	ee26 6b03 	vmul.f64	d6, d6, d3
 800802c:	e7e0      	b.n	8007ff0 <_dtoa_r+0x4c0>
 800802e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008032:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008036:	4620      	mov	r0, r4
 8008038:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800803c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008040:	ee14 1a90 	vmov	r1, s9
 8008044:	3130      	adds	r1, #48	; 0x30
 8008046:	f808 1b01 	strb.w	r1, [r8], #1
 800804a:	45a0      	cmp	r8, r4
 800804c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008050:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008054:	d118      	bne.n	8008088 <_dtoa_r+0x558>
 8008056:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800805a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800805e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008066:	dc4d      	bgt.n	8008104 <_dtoa_r+0x5d4>
 8008068:	ee35 5b47 	vsub.f64	d5, d5, d7
 800806c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008074:	f57f af41 	bpl.w	8007efa <_dtoa_r+0x3ca>
 8008078:	4680      	mov	r8, r0
 800807a:	3801      	subs	r0, #1
 800807c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008080:	2b30      	cmp	r3, #48	; 0x30
 8008082:	d0f9      	beq.n	8008078 <_dtoa_r+0x548>
 8008084:	4693      	mov	fp, r2
 8008086:	e02a      	b.n	80080de <_dtoa_r+0x5ae>
 8008088:	ee26 6b03 	vmul.f64	d6, d6, d3
 800808c:	e7d6      	b.n	800803c <_dtoa_r+0x50c>
 800808e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008092:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008096:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800809a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800809e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80080a2:	ee15 3a10 	vmov	r3, s10
 80080a6:	3330      	adds	r3, #48	; 0x30
 80080a8:	f808 3b01 	strb.w	r3, [r8], #1
 80080ac:	9b01      	ldr	r3, [sp, #4]
 80080ae:	eba8 0303 	sub.w	r3, r8, r3
 80080b2:	4599      	cmp	r9, r3
 80080b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80080b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80080bc:	d133      	bne.n	8008126 <_dtoa_r+0x5f6>
 80080be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80080c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ca:	dc1a      	bgt.n	8008102 <_dtoa_r+0x5d2>
 80080cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80080d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d4:	d103      	bne.n	80080de <_dtoa_r+0x5ae>
 80080d6:	ee15 3a10 	vmov	r3, s10
 80080da:	07d9      	lsls	r1, r3, #31
 80080dc:	d411      	bmi.n	8008102 <_dtoa_r+0x5d2>
 80080de:	4629      	mov	r1, r5
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 fbd1 	bl	8008888 <_Bfree>
 80080e6:	2300      	movs	r3, #0
 80080e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080ea:	f888 3000 	strb.w	r3, [r8]
 80080ee:	f10b 0301 	add.w	r3, fp, #1
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f43f ad69 	beq.w	8007bce <_dtoa_r+0x9e>
 80080fc:	f8c3 8000 	str.w	r8, [r3]
 8008100:	e565      	b.n	8007bce <_dtoa_r+0x9e>
 8008102:	465a      	mov	r2, fp
 8008104:	4643      	mov	r3, r8
 8008106:	4698      	mov	r8, r3
 8008108:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800810c:	2939      	cmp	r1, #57	; 0x39
 800810e:	d106      	bne.n	800811e <_dtoa_r+0x5ee>
 8008110:	9901      	ldr	r1, [sp, #4]
 8008112:	4299      	cmp	r1, r3
 8008114:	d1f7      	bne.n	8008106 <_dtoa_r+0x5d6>
 8008116:	9801      	ldr	r0, [sp, #4]
 8008118:	2130      	movs	r1, #48	; 0x30
 800811a:	3201      	adds	r2, #1
 800811c:	7001      	strb	r1, [r0, #0]
 800811e:	7819      	ldrb	r1, [r3, #0]
 8008120:	3101      	adds	r1, #1
 8008122:	7019      	strb	r1, [r3, #0]
 8008124:	e7ae      	b.n	8008084 <_dtoa_r+0x554>
 8008126:	ee27 7b04 	vmul.f64	d7, d7, d4
 800812a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800812e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008132:	d1b2      	bne.n	800809a <_dtoa_r+0x56a>
 8008134:	e7d3      	b.n	80080de <_dtoa_r+0x5ae>
 8008136:	bf00      	nop
 8008138:	08009d00 	.word	0x08009d00
 800813c:	08009cd8 	.word	0x08009cd8
 8008140:	9907      	ldr	r1, [sp, #28]
 8008142:	2900      	cmp	r1, #0
 8008144:	f000 80d0 	beq.w	80082e8 <_dtoa_r+0x7b8>
 8008148:	9906      	ldr	r1, [sp, #24]
 800814a:	2901      	cmp	r1, #1
 800814c:	f300 80b4 	bgt.w	80082b8 <_dtoa_r+0x788>
 8008150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008152:	2900      	cmp	r1, #0
 8008154:	f000 80ac 	beq.w	80082b0 <_dtoa_r+0x780>
 8008158:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800815c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008160:	461c      	mov	r4, r3
 8008162:	9309      	str	r3, [sp, #36]	; 0x24
 8008164:	9b04      	ldr	r3, [sp, #16]
 8008166:	4413      	add	r3, r2
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	9b05      	ldr	r3, [sp, #20]
 800816c:	2101      	movs	r1, #1
 800816e:	4413      	add	r3, r2
 8008170:	4630      	mov	r0, r6
 8008172:	9305      	str	r3, [sp, #20]
 8008174:	f000 fc3e 	bl	80089f4 <__i2b>
 8008178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817a:	4607      	mov	r7, r0
 800817c:	f1b8 0f00 	cmp.w	r8, #0
 8008180:	d00d      	beq.n	800819e <_dtoa_r+0x66e>
 8008182:	9a05      	ldr	r2, [sp, #20]
 8008184:	2a00      	cmp	r2, #0
 8008186:	dd0a      	ble.n	800819e <_dtoa_r+0x66e>
 8008188:	4542      	cmp	r2, r8
 800818a:	9904      	ldr	r1, [sp, #16]
 800818c:	bfa8      	it	ge
 800818e:	4642      	movge	r2, r8
 8008190:	1a89      	subs	r1, r1, r2
 8008192:	9104      	str	r1, [sp, #16]
 8008194:	9905      	ldr	r1, [sp, #20]
 8008196:	eba8 0802 	sub.w	r8, r8, r2
 800819a:	1a8a      	subs	r2, r1, r2
 800819c:	9205      	str	r2, [sp, #20]
 800819e:	b303      	cbz	r3, 80081e2 <_dtoa_r+0x6b2>
 80081a0:	9a07      	ldr	r2, [sp, #28]
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	f000 80a5 	beq.w	80082f2 <_dtoa_r+0x7c2>
 80081a8:	2c00      	cmp	r4, #0
 80081aa:	dd13      	ble.n	80081d4 <_dtoa_r+0x6a4>
 80081ac:	4639      	mov	r1, r7
 80081ae:	4622      	mov	r2, r4
 80081b0:	4630      	mov	r0, r6
 80081b2:	930d      	str	r3, [sp, #52]	; 0x34
 80081b4:	f000 fcde 	bl	8008b74 <__pow5mult>
 80081b8:	462a      	mov	r2, r5
 80081ba:	4601      	mov	r1, r0
 80081bc:	4607      	mov	r7, r0
 80081be:	4630      	mov	r0, r6
 80081c0:	f000 fc2e 	bl	8008a20 <__multiply>
 80081c4:	4629      	mov	r1, r5
 80081c6:	9009      	str	r0, [sp, #36]	; 0x24
 80081c8:	4630      	mov	r0, r6
 80081ca:	f000 fb5d 	bl	8008888 <_Bfree>
 80081ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d2:	4615      	mov	r5, r2
 80081d4:	1b1a      	subs	r2, r3, r4
 80081d6:	d004      	beq.n	80081e2 <_dtoa_r+0x6b2>
 80081d8:	4629      	mov	r1, r5
 80081da:	4630      	mov	r0, r6
 80081dc:	f000 fcca 	bl	8008b74 <__pow5mult>
 80081e0:	4605      	mov	r5, r0
 80081e2:	2101      	movs	r1, #1
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 fc05 	bl	80089f4 <__i2b>
 80081ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	4604      	mov	r4, r0
 80081f0:	f340 8081 	ble.w	80082f6 <_dtoa_r+0x7c6>
 80081f4:	461a      	mov	r2, r3
 80081f6:	4601      	mov	r1, r0
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 fcbb 	bl	8008b74 <__pow5mult>
 80081fe:	9b06      	ldr	r3, [sp, #24]
 8008200:	2b01      	cmp	r3, #1
 8008202:	4604      	mov	r4, r0
 8008204:	dd7a      	ble.n	80082fc <_dtoa_r+0x7cc>
 8008206:	2300      	movs	r3, #0
 8008208:	9309      	str	r3, [sp, #36]	; 0x24
 800820a:	6922      	ldr	r2, [r4, #16]
 800820c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008210:	6910      	ldr	r0, [r2, #16]
 8008212:	f000 fba1 	bl	8008958 <__hi0bits>
 8008216:	f1c0 0020 	rsb	r0, r0, #32
 800821a:	9b05      	ldr	r3, [sp, #20]
 800821c:	4418      	add	r0, r3
 800821e:	f010 001f 	ands.w	r0, r0, #31
 8008222:	f000 8093 	beq.w	800834c <_dtoa_r+0x81c>
 8008226:	f1c0 0220 	rsb	r2, r0, #32
 800822a:	2a04      	cmp	r2, #4
 800822c:	f340 8085 	ble.w	800833a <_dtoa_r+0x80a>
 8008230:	9b04      	ldr	r3, [sp, #16]
 8008232:	f1c0 001c 	rsb	r0, r0, #28
 8008236:	4403      	add	r3, r0
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	9b05      	ldr	r3, [sp, #20]
 800823c:	4480      	add	r8, r0
 800823e:	4403      	add	r3, r0
 8008240:	9305      	str	r3, [sp, #20]
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	dd05      	ble.n	8008254 <_dtoa_r+0x724>
 8008248:	4629      	mov	r1, r5
 800824a:	461a      	mov	r2, r3
 800824c:	4630      	mov	r0, r6
 800824e:	f000 fceb 	bl	8008c28 <__lshift>
 8008252:	4605      	mov	r5, r0
 8008254:	9b05      	ldr	r3, [sp, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	dd05      	ble.n	8008266 <_dtoa_r+0x736>
 800825a:	4621      	mov	r1, r4
 800825c:	461a      	mov	r2, r3
 800825e:	4630      	mov	r0, r6
 8008260:	f000 fce2 	bl	8008c28 <__lshift>
 8008264:	4604      	mov	r4, r0
 8008266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d071      	beq.n	8008350 <_dtoa_r+0x820>
 800826c:	4621      	mov	r1, r4
 800826e:	4628      	mov	r0, r5
 8008270:	f000 fd46 	bl	8008d00 <__mcmp>
 8008274:	2800      	cmp	r0, #0
 8008276:	da6b      	bge.n	8008350 <_dtoa_r+0x820>
 8008278:	2300      	movs	r3, #0
 800827a:	4629      	mov	r1, r5
 800827c:	220a      	movs	r2, #10
 800827e:	4630      	mov	r0, r6
 8008280:	f000 fb24 	bl	80088cc <__multadd>
 8008284:	9b07      	ldr	r3, [sp, #28]
 8008286:	f10b 3bff 	add.w	fp, fp, #4294967295
 800828a:	4605      	mov	r5, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8197 	beq.w	80085c0 <_dtoa_r+0xa90>
 8008292:	4639      	mov	r1, r7
 8008294:	2300      	movs	r3, #0
 8008296:	220a      	movs	r2, #10
 8008298:	4630      	mov	r0, r6
 800829a:	f000 fb17 	bl	80088cc <__multadd>
 800829e:	f1ba 0f00 	cmp.w	sl, #0
 80082a2:	4607      	mov	r7, r0
 80082a4:	f300 8093 	bgt.w	80083ce <_dtoa_r+0x89e>
 80082a8:	9b06      	ldr	r3, [sp, #24]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	dc57      	bgt.n	800835e <_dtoa_r+0x82e>
 80082ae:	e08e      	b.n	80083ce <_dtoa_r+0x89e>
 80082b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80082b6:	e751      	b.n	800815c <_dtoa_r+0x62c>
 80082b8:	f109 34ff 	add.w	r4, r9, #4294967295
 80082bc:	42a3      	cmp	r3, r4
 80082be:	bfbf      	itttt	lt
 80082c0:	1ae2      	sublt	r2, r4, r3
 80082c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082c4:	189b      	addlt	r3, r3, r2
 80082c6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082c8:	bfae      	itee	ge
 80082ca:	1b1c      	subge	r4, r3, r4
 80082cc:	4623      	movlt	r3, r4
 80082ce:	2400      	movlt	r4, #0
 80082d0:	f1b9 0f00 	cmp.w	r9, #0
 80082d4:	bfb5      	itete	lt
 80082d6:	9a04      	ldrlt	r2, [sp, #16]
 80082d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80082dc:	eba2 0809 	sublt.w	r8, r2, r9
 80082e0:	464a      	movge	r2, r9
 80082e2:	bfb8      	it	lt
 80082e4:	2200      	movlt	r2, #0
 80082e6:	e73c      	b.n	8008162 <_dtoa_r+0x632>
 80082e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80082ec:	9f07      	ldr	r7, [sp, #28]
 80082ee:	461c      	mov	r4, r3
 80082f0:	e744      	b.n	800817c <_dtoa_r+0x64c>
 80082f2:	461a      	mov	r2, r3
 80082f4:	e770      	b.n	80081d8 <_dtoa_r+0x6a8>
 80082f6:	9b06      	ldr	r3, [sp, #24]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	dc18      	bgt.n	800832e <_dtoa_r+0x7fe>
 80082fc:	9b02      	ldr	r3, [sp, #8]
 80082fe:	b9b3      	cbnz	r3, 800832e <_dtoa_r+0x7fe>
 8008300:	9b03      	ldr	r3, [sp, #12]
 8008302:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008306:	b9a2      	cbnz	r2, 8008332 <_dtoa_r+0x802>
 8008308:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800830c:	0d12      	lsrs	r2, r2, #20
 800830e:	0512      	lsls	r2, r2, #20
 8008310:	b18a      	cbz	r2, 8008336 <_dtoa_r+0x806>
 8008312:	9b04      	ldr	r3, [sp, #16]
 8008314:	3301      	adds	r3, #1
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	9b05      	ldr	r3, [sp, #20]
 800831a:	3301      	adds	r3, #1
 800831c:	9305      	str	r3, [sp, #20]
 800831e:	2301      	movs	r3, #1
 8008320:	9309      	str	r3, [sp, #36]	; 0x24
 8008322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008324:	2b00      	cmp	r3, #0
 8008326:	f47f af70 	bne.w	800820a <_dtoa_r+0x6da>
 800832a:	2001      	movs	r0, #1
 800832c:	e775      	b.n	800821a <_dtoa_r+0x6ea>
 800832e:	2300      	movs	r3, #0
 8008330:	e7f6      	b.n	8008320 <_dtoa_r+0x7f0>
 8008332:	9b02      	ldr	r3, [sp, #8]
 8008334:	e7f4      	b.n	8008320 <_dtoa_r+0x7f0>
 8008336:	9209      	str	r2, [sp, #36]	; 0x24
 8008338:	e7f3      	b.n	8008322 <_dtoa_r+0x7f2>
 800833a:	d082      	beq.n	8008242 <_dtoa_r+0x712>
 800833c:	9b04      	ldr	r3, [sp, #16]
 800833e:	321c      	adds	r2, #28
 8008340:	4413      	add	r3, r2
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	9b05      	ldr	r3, [sp, #20]
 8008346:	4490      	add	r8, r2
 8008348:	4413      	add	r3, r2
 800834a:	e779      	b.n	8008240 <_dtoa_r+0x710>
 800834c:	4602      	mov	r2, r0
 800834e:	e7f5      	b.n	800833c <_dtoa_r+0x80c>
 8008350:	f1b9 0f00 	cmp.w	r9, #0
 8008354:	dc36      	bgt.n	80083c4 <_dtoa_r+0x894>
 8008356:	9b06      	ldr	r3, [sp, #24]
 8008358:	2b02      	cmp	r3, #2
 800835a:	dd33      	ble.n	80083c4 <_dtoa_r+0x894>
 800835c:	46ca      	mov	sl, r9
 800835e:	f1ba 0f00 	cmp.w	sl, #0
 8008362:	d10d      	bne.n	8008380 <_dtoa_r+0x850>
 8008364:	4621      	mov	r1, r4
 8008366:	4653      	mov	r3, sl
 8008368:	2205      	movs	r2, #5
 800836a:	4630      	mov	r0, r6
 800836c:	f000 faae 	bl	80088cc <__multadd>
 8008370:	4601      	mov	r1, r0
 8008372:	4604      	mov	r4, r0
 8008374:	4628      	mov	r0, r5
 8008376:	f000 fcc3 	bl	8008d00 <__mcmp>
 800837a:	2800      	cmp	r0, #0
 800837c:	f73f ade4 	bgt.w	8007f48 <_dtoa_r+0x418>
 8008380:	9b08      	ldr	r3, [sp, #32]
 8008382:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008386:	ea6f 0b03 	mvn.w	fp, r3
 800838a:	f04f 0900 	mov.w	r9, #0
 800838e:	4621      	mov	r1, r4
 8008390:	4630      	mov	r0, r6
 8008392:	f000 fa79 	bl	8008888 <_Bfree>
 8008396:	2f00      	cmp	r7, #0
 8008398:	f43f aea1 	beq.w	80080de <_dtoa_r+0x5ae>
 800839c:	f1b9 0f00 	cmp.w	r9, #0
 80083a0:	d005      	beq.n	80083ae <_dtoa_r+0x87e>
 80083a2:	45b9      	cmp	r9, r7
 80083a4:	d003      	beq.n	80083ae <_dtoa_r+0x87e>
 80083a6:	4649      	mov	r1, r9
 80083a8:	4630      	mov	r0, r6
 80083aa:	f000 fa6d 	bl	8008888 <_Bfree>
 80083ae:	4639      	mov	r1, r7
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 fa69 	bl	8008888 <_Bfree>
 80083b6:	e692      	b.n	80080de <_dtoa_r+0x5ae>
 80083b8:	2400      	movs	r4, #0
 80083ba:	4627      	mov	r7, r4
 80083bc:	e7e0      	b.n	8008380 <_dtoa_r+0x850>
 80083be:	4693      	mov	fp, r2
 80083c0:	4627      	mov	r7, r4
 80083c2:	e5c1      	b.n	8007f48 <_dtoa_r+0x418>
 80083c4:	9b07      	ldr	r3, [sp, #28]
 80083c6:	46ca      	mov	sl, r9
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 8100 	beq.w	80085ce <_dtoa_r+0xa9e>
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	dd05      	ble.n	80083e0 <_dtoa_r+0x8b0>
 80083d4:	4639      	mov	r1, r7
 80083d6:	4642      	mov	r2, r8
 80083d8:	4630      	mov	r0, r6
 80083da:	f000 fc25 	bl	8008c28 <__lshift>
 80083de:	4607      	mov	r7, r0
 80083e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d05d      	beq.n	80084a2 <_dtoa_r+0x972>
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 fa0d 	bl	8008808 <_Balloc>
 80083ee:	4680      	mov	r8, r0
 80083f0:	b928      	cbnz	r0, 80083fe <_dtoa_r+0x8ce>
 80083f2:	4b82      	ldr	r3, [pc, #520]	; (80085fc <_dtoa_r+0xacc>)
 80083f4:	4602      	mov	r2, r0
 80083f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80083fa:	f7ff bbb1 	b.w	8007b60 <_dtoa_r+0x30>
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	3202      	adds	r2, #2
 8008402:	0092      	lsls	r2, r2, #2
 8008404:	f107 010c 	add.w	r1, r7, #12
 8008408:	300c      	adds	r0, #12
 800840a:	f000 ffa9 	bl	8009360 <memcpy>
 800840e:	2201      	movs	r2, #1
 8008410:	4641      	mov	r1, r8
 8008412:	4630      	mov	r0, r6
 8008414:	f000 fc08 	bl	8008c28 <__lshift>
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	3301      	adds	r3, #1
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	4453      	add	r3, sl
 8008422:	9308      	str	r3, [sp, #32]
 8008424:	9b02      	ldr	r3, [sp, #8]
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	46b9      	mov	r9, r7
 800842c:	9307      	str	r3, [sp, #28]
 800842e:	4607      	mov	r7, r0
 8008430:	9b04      	ldr	r3, [sp, #16]
 8008432:	4621      	mov	r1, r4
 8008434:	3b01      	subs	r3, #1
 8008436:	4628      	mov	r0, r5
 8008438:	9302      	str	r3, [sp, #8]
 800843a:	f7ff faf0 	bl	8007a1e <quorem>
 800843e:	4603      	mov	r3, r0
 8008440:	3330      	adds	r3, #48	; 0x30
 8008442:	9005      	str	r0, [sp, #20]
 8008444:	4649      	mov	r1, r9
 8008446:	4628      	mov	r0, r5
 8008448:	9309      	str	r3, [sp, #36]	; 0x24
 800844a:	f000 fc59 	bl	8008d00 <__mcmp>
 800844e:	463a      	mov	r2, r7
 8008450:	4682      	mov	sl, r0
 8008452:	4621      	mov	r1, r4
 8008454:	4630      	mov	r0, r6
 8008456:	f000 fc6f 	bl	8008d38 <__mdiff>
 800845a:	68c2      	ldr	r2, [r0, #12]
 800845c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845e:	4680      	mov	r8, r0
 8008460:	bb0a      	cbnz	r2, 80084a6 <_dtoa_r+0x976>
 8008462:	4601      	mov	r1, r0
 8008464:	4628      	mov	r0, r5
 8008466:	f000 fc4b 	bl	8008d00 <__mcmp>
 800846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846c:	4602      	mov	r2, r0
 800846e:	4641      	mov	r1, r8
 8008470:	4630      	mov	r0, r6
 8008472:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008476:	f000 fa07 	bl	8008888 <_Bfree>
 800847a:	9b06      	ldr	r3, [sp, #24]
 800847c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800847e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008482:	ea43 0102 	orr.w	r1, r3, r2
 8008486:	9b07      	ldr	r3, [sp, #28]
 8008488:	4319      	orrs	r1, r3
 800848a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848c:	d10d      	bne.n	80084aa <_dtoa_r+0x97a>
 800848e:	2b39      	cmp	r3, #57	; 0x39
 8008490:	d029      	beq.n	80084e6 <_dtoa_r+0x9b6>
 8008492:	f1ba 0f00 	cmp.w	sl, #0
 8008496:	dd01      	ble.n	800849c <_dtoa_r+0x96c>
 8008498:	9b05      	ldr	r3, [sp, #20]
 800849a:	3331      	adds	r3, #49	; 0x31
 800849c:	9a02      	ldr	r2, [sp, #8]
 800849e:	7013      	strb	r3, [r2, #0]
 80084a0:	e775      	b.n	800838e <_dtoa_r+0x85e>
 80084a2:	4638      	mov	r0, r7
 80084a4:	e7b8      	b.n	8008418 <_dtoa_r+0x8e8>
 80084a6:	2201      	movs	r2, #1
 80084a8:	e7e1      	b.n	800846e <_dtoa_r+0x93e>
 80084aa:	f1ba 0f00 	cmp.w	sl, #0
 80084ae:	db06      	blt.n	80084be <_dtoa_r+0x98e>
 80084b0:	9906      	ldr	r1, [sp, #24]
 80084b2:	ea41 0a0a 	orr.w	sl, r1, sl
 80084b6:	9907      	ldr	r1, [sp, #28]
 80084b8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80084bc:	d120      	bne.n	8008500 <_dtoa_r+0x9d0>
 80084be:	2a00      	cmp	r2, #0
 80084c0:	ddec      	ble.n	800849c <_dtoa_r+0x96c>
 80084c2:	4629      	mov	r1, r5
 80084c4:	2201      	movs	r2, #1
 80084c6:	4630      	mov	r0, r6
 80084c8:	9304      	str	r3, [sp, #16]
 80084ca:	f000 fbad 	bl	8008c28 <__lshift>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4605      	mov	r5, r0
 80084d2:	f000 fc15 	bl	8008d00 <__mcmp>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	9b04      	ldr	r3, [sp, #16]
 80084da:	dc02      	bgt.n	80084e2 <_dtoa_r+0x9b2>
 80084dc:	d1de      	bne.n	800849c <_dtoa_r+0x96c>
 80084de:	07da      	lsls	r2, r3, #31
 80084e0:	d5dc      	bpl.n	800849c <_dtoa_r+0x96c>
 80084e2:	2b39      	cmp	r3, #57	; 0x39
 80084e4:	d1d8      	bne.n	8008498 <_dtoa_r+0x968>
 80084e6:	9a02      	ldr	r2, [sp, #8]
 80084e8:	2339      	movs	r3, #57	; 0x39
 80084ea:	7013      	strb	r3, [r2, #0]
 80084ec:	4643      	mov	r3, r8
 80084ee:	4698      	mov	r8, r3
 80084f0:	3b01      	subs	r3, #1
 80084f2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80084f6:	2a39      	cmp	r2, #57	; 0x39
 80084f8:	d051      	beq.n	800859e <_dtoa_r+0xa6e>
 80084fa:	3201      	adds	r2, #1
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	e746      	b.n	800838e <_dtoa_r+0x85e>
 8008500:	2a00      	cmp	r2, #0
 8008502:	dd03      	ble.n	800850c <_dtoa_r+0x9dc>
 8008504:	2b39      	cmp	r3, #57	; 0x39
 8008506:	d0ee      	beq.n	80084e6 <_dtoa_r+0x9b6>
 8008508:	3301      	adds	r3, #1
 800850a:	e7c7      	b.n	800849c <_dtoa_r+0x96c>
 800850c:	9a04      	ldr	r2, [sp, #16]
 800850e:	9908      	ldr	r1, [sp, #32]
 8008510:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008514:	428a      	cmp	r2, r1
 8008516:	d02b      	beq.n	8008570 <_dtoa_r+0xa40>
 8008518:	4629      	mov	r1, r5
 800851a:	2300      	movs	r3, #0
 800851c:	220a      	movs	r2, #10
 800851e:	4630      	mov	r0, r6
 8008520:	f000 f9d4 	bl	80088cc <__multadd>
 8008524:	45b9      	cmp	r9, r7
 8008526:	4605      	mov	r5, r0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	f04f 020a 	mov.w	r2, #10
 8008530:	4649      	mov	r1, r9
 8008532:	4630      	mov	r0, r6
 8008534:	d107      	bne.n	8008546 <_dtoa_r+0xa16>
 8008536:	f000 f9c9 	bl	80088cc <__multadd>
 800853a:	4681      	mov	r9, r0
 800853c:	4607      	mov	r7, r0
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	3301      	adds	r3, #1
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	e774      	b.n	8008430 <_dtoa_r+0x900>
 8008546:	f000 f9c1 	bl	80088cc <__multadd>
 800854a:	4639      	mov	r1, r7
 800854c:	4681      	mov	r9, r0
 800854e:	2300      	movs	r3, #0
 8008550:	220a      	movs	r2, #10
 8008552:	4630      	mov	r0, r6
 8008554:	f000 f9ba 	bl	80088cc <__multadd>
 8008558:	4607      	mov	r7, r0
 800855a:	e7f0      	b.n	800853e <_dtoa_r+0xa0e>
 800855c:	f1ba 0f00 	cmp.w	sl, #0
 8008560:	9a01      	ldr	r2, [sp, #4]
 8008562:	bfcc      	ite	gt
 8008564:	46d0      	movgt	r8, sl
 8008566:	f04f 0801 	movle.w	r8, #1
 800856a:	4490      	add	r8, r2
 800856c:	f04f 0900 	mov.w	r9, #0
 8008570:	4629      	mov	r1, r5
 8008572:	2201      	movs	r2, #1
 8008574:	4630      	mov	r0, r6
 8008576:	9302      	str	r3, [sp, #8]
 8008578:	f000 fb56 	bl	8008c28 <__lshift>
 800857c:	4621      	mov	r1, r4
 800857e:	4605      	mov	r5, r0
 8008580:	f000 fbbe 	bl	8008d00 <__mcmp>
 8008584:	2800      	cmp	r0, #0
 8008586:	dcb1      	bgt.n	80084ec <_dtoa_r+0x9bc>
 8008588:	d102      	bne.n	8008590 <_dtoa_r+0xa60>
 800858a:	9b02      	ldr	r3, [sp, #8]
 800858c:	07db      	lsls	r3, r3, #31
 800858e:	d4ad      	bmi.n	80084ec <_dtoa_r+0x9bc>
 8008590:	4643      	mov	r3, r8
 8008592:	4698      	mov	r8, r3
 8008594:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008598:	2a30      	cmp	r2, #48	; 0x30
 800859a:	d0fa      	beq.n	8008592 <_dtoa_r+0xa62>
 800859c:	e6f7      	b.n	800838e <_dtoa_r+0x85e>
 800859e:	9a01      	ldr	r2, [sp, #4]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d1a4      	bne.n	80084ee <_dtoa_r+0x9be>
 80085a4:	f10b 0b01 	add.w	fp, fp, #1
 80085a8:	2331      	movs	r3, #49	; 0x31
 80085aa:	e778      	b.n	800849e <_dtoa_r+0x96e>
 80085ac:	4b14      	ldr	r3, [pc, #80]	; (8008600 <_dtoa_r+0xad0>)
 80085ae:	f7ff bb2a 	b.w	8007c06 <_dtoa_r+0xd6>
 80085b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f47f ab05 	bne.w	8007bc4 <_dtoa_r+0x94>
 80085ba:	4b12      	ldr	r3, [pc, #72]	; (8008604 <_dtoa_r+0xad4>)
 80085bc:	f7ff bb23 	b.w	8007c06 <_dtoa_r+0xd6>
 80085c0:	f1ba 0f00 	cmp.w	sl, #0
 80085c4:	dc03      	bgt.n	80085ce <_dtoa_r+0xa9e>
 80085c6:	9b06      	ldr	r3, [sp, #24]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	f73f aec8 	bgt.w	800835e <_dtoa_r+0x82e>
 80085ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80085d2:	4621      	mov	r1, r4
 80085d4:	4628      	mov	r0, r5
 80085d6:	f7ff fa22 	bl	8007a1e <quorem>
 80085da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80085de:	f808 3b01 	strb.w	r3, [r8], #1
 80085e2:	9a01      	ldr	r2, [sp, #4]
 80085e4:	eba8 0202 	sub.w	r2, r8, r2
 80085e8:	4592      	cmp	sl, r2
 80085ea:	ddb7      	ble.n	800855c <_dtoa_r+0xa2c>
 80085ec:	4629      	mov	r1, r5
 80085ee:	2300      	movs	r3, #0
 80085f0:	220a      	movs	r2, #10
 80085f2:	4630      	mov	r0, r6
 80085f4:	f000 f96a 	bl	80088cc <__multadd>
 80085f8:	4605      	mov	r5, r0
 80085fa:	e7ea      	b.n	80085d2 <_dtoa_r+0xaa2>
 80085fc:	08009c68 	.word	0x08009c68
 8008600:	08009bc8 	.word	0x08009bc8
 8008604:	08009bec 	.word	0x08009bec

08008608 <_free_r>:
 8008608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800860a:	2900      	cmp	r1, #0
 800860c:	d044      	beq.n	8008698 <_free_r+0x90>
 800860e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008612:	9001      	str	r0, [sp, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	f1a1 0404 	sub.w	r4, r1, #4
 800861a:	bfb8      	it	lt
 800861c:	18e4      	addlt	r4, r4, r3
 800861e:	f000 f8e7 	bl	80087f0 <__malloc_lock>
 8008622:	4a1e      	ldr	r2, [pc, #120]	; (800869c <_free_r+0x94>)
 8008624:	9801      	ldr	r0, [sp, #4]
 8008626:	6813      	ldr	r3, [r2, #0]
 8008628:	b933      	cbnz	r3, 8008638 <_free_r+0x30>
 800862a:	6063      	str	r3, [r4, #4]
 800862c:	6014      	str	r4, [r2, #0]
 800862e:	b003      	add	sp, #12
 8008630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008634:	f000 b8e2 	b.w	80087fc <__malloc_unlock>
 8008638:	42a3      	cmp	r3, r4
 800863a:	d908      	bls.n	800864e <_free_r+0x46>
 800863c:	6825      	ldr	r5, [r4, #0]
 800863e:	1961      	adds	r1, r4, r5
 8008640:	428b      	cmp	r3, r1
 8008642:	bf01      	itttt	eq
 8008644:	6819      	ldreq	r1, [r3, #0]
 8008646:	685b      	ldreq	r3, [r3, #4]
 8008648:	1949      	addeq	r1, r1, r5
 800864a:	6021      	streq	r1, [r4, #0]
 800864c:	e7ed      	b.n	800862a <_free_r+0x22>
 800864e:	461a      	mov	r2, r3
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	b10b      	cbz	r3, 8008658 <_free_r+0x50>
 8008654:	42a3      	cmp	r3, r4
 8008656:	d9fa      	bls.n	800864e <_free_r+0x46>
 8008658:	6811      	ldr	r1, [r2, #0]
 800865a:	1855      	adds	r5, r2, r1
 800865c:	42a5      	cmp	r5, r4
 800865e:	d10b      	bne.n	8008678 <_free_r+0x70>
 8008660:	6824      	ldr	r4, [r4, #0]
 8008662:	4421      	add	r1, r4
 8008664:	1854      	adds	r4, r2, r1
 8008666:	42a3      	cmp	r3, r4
 8008668:	6011      	str	r1, [r2, #0]
 800866a:	d1e0      	bne.n	800862e <_free_r+0x26>
 800866c:	681c      	ldr	r4, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	6053      	str	r3, [r2, #4]
 8008672:	440c      	add	r4, r1
 8008674:	6014      	str	r4, [r2, #0]
 8008676:	e7da      	b.n	800862e <_free_r+0x26>
 8008678:	d902      	bls.n	8008680 <_free_r+0x78>
 800867a:	230c      	movs	r3, #12
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	e7d6      	b.n	800862e <_free_r+0x26>
 8008680:	6825      	ldr	r5, [r4, #0]
 8008682:	1961      	adds	r1, r4, r5
 8008684:	428b      	cmp	r3, r1
 8008686:	bf04      	itt	eq
 8008688:	6819      	ldreq	r1, [r3, #0]
 800868a:	685b      	ldreq	r3, [r3, #4]
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	bf04      	itt	eq
 8008690:	1949      	addeq	r1, r1, r5
 8008692:	6021      	streq	r1, [r4, #0]
 8008694:	6054      	str	r4, [r2, #4]
 8008696:	e7ca      	b.n	800862e <_free_r+0x26>
 8008698:	b003      	add	sp, #12
 800869a:	bd30      	pop	{r4, r5, pc}
 800869c:	240004a8 	.word	0x240004a8

080086a0 <malloc>:
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <malloc+0xc>)
 80086a2:	4601      	mov	r1, r0
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	f000 b823 	b.w	80086f0 <_malloc_r>
 80086aa:	bf00      	nop
 80086ac:	24000068 	.word	0x24000068

080086b0 <sbrk_aligned>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4e0e      	ldr	r6, [pc, #56]	; (80086ec <sbrk_aligned+0x3c>)
 80086b4:	460c      	mov	r4, r1
 80086b6:	6831      	ldr	r1, [r6, #0]
 80086b8:	4605      	mov	r5, r0
 80086ba:	b911      	cbnz	r1, 80086c2 <sbrk_aligned+0x12>
 80086bc:	f000 fe40 	bl	8009340 <_sbrk_r>
 80086c0:	6030      	str	r0, [r6, #0]
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	f000 fe3b 	bl	8009340 <_sbrk_r>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d00a      	beq.n	80086e4 <sbrk_aligned+0x34>
 80086ce:	1cc4      	adds	r4, r0, #3
 80086d0:	f024 0403 	bic.w	r4, r4, #3
 80086d4:	42a0      	cmp	r0, r4
 80086d6:	d007      	beq.n	80086e8 <sbrk_aligned+0x38>
 80086d8:	1a21      	subs	r1, r4, r0
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 fe30 	bl	8009340 <_sbrk_r>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d101      	bne.n	80086e8 <sbrk_aligned+0x38>
 80086e4:	f04f 34ff 	mov.w	r4, #4294967295
 80086e8:	4620      	mov	r0, r4
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	240004ac 	.word	0x240004ac

080086f0 <_malloc_r>:
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f4:	1ccd      	adds	r5, r1, #3
 80086f6:	f025 0503 	bic.w	r5, r5, #3
 80086fa:	3508      	adds	r5, #8
 80086fc:	2d0c      	cmp	r5, #12
 80086fe:	bf38      	it	cc
 8008700:	250c      	movcc	r5, #12
 8008702:	2d00      	cmp	r5, #0
 8008704:	4607      	mov	r7, r0
 8008706:	db01      	blt.n	800870c <_malloc_r+0x1c>
 8008708:	42a9      	cmp	r1, r5
 800870a:	d905      	bls.n	8008718 <_malloc_r+0x28>
 800870c:	230c      	movs	r3, #12
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	2600      	movs	r6, #0
 8008712:	4630      	mov	r0, r6
 8008714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087ec <_malloc_r+0xfc>
 800871c:	f000 f868 	bl	80087f0 <__malloc_lock>
 8008720:	f8d8 3000 	ldr.w	r3, [r8]
 8008724:	461c      	mov	r4, r3
 8008726:	bb5c      	cbnz	r4, 8008780 <_malloc_r+0x90>
 8008728:	4629      	mov	r1, r5
 800872a:	4638      	mov	r0, r7
 800872c:	f7ff ffc0 	bl	80086b0 <sbrk_aligned>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	4604      	mov	r4, r0
 8008734:	d155      	bne.n	80087e2 <_malloc_r+0xf2>
 8008736:	f8d8 4000 	ldr.w	r4, [r8]
 800873a:	4626      	mov	r6, r4
 800873c:	2e00      	cmp	r6, #0
 800873e:	d145      	bne.n	80087cc <_malloc_r+0xdc>
 8008740:	2c00      	cmp	r4, #0
 8008742:	d048      	beq.n	80087d6 <_malloc_r+0xe6>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	4631      	mov	r1, r6
 8008748:	4638      	mov	r0, r7
 800874a:	eb04 0903 	add.w	r9, r4, r3
 800874e:	f000 fdf7 	bl	8009340 <_sbrk_r>
 8008752:	4581      	cmp	r9, r0
 8008754:	d13f      	bne.n	80087d6 <_malloc_r+0xe6>
 8008756:	6821      	ldr	r1, [r4, #0]
 8008758:	1a6d      	subs	r5, r5, r1
 800875a:	4629      	mov	r1, r5
 800875c:	4638      	mov	r0, r7
 800875e:	f7ff ffa7 	bl	80086b0 <sbrk_aligned>
 8008762:	3001      	adds	r0, #1
 8008764:	d037      	beq.n	80087d6 <_malloc_r+0xe6>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	442b      	add	r3, r5
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	f8d8 3000 	ldr.w	r3, [r8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d038      	beq.n	80087e6 <_malloc_r+0xf6>
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	42a2      	cmp	r2, r4
 8008778:	d12b      	bne.n	80087d2 <_malloc_r+0xe2>
 800877a:	2200      	movs	r2, #0
 800877c:	605a      	str	r2, [r3, #4]
 800877e:	e00f      	b.n	80087a0 <_malloc_r+0xb0>
 8008780:	6822      	ldr	r2, [r4, #0]
 8008782:	1b52      	subs	r2, r2, r5
 8008784:	d41f      	bmi.n	80087c6 <_malloc_r+0xd6>
 8008786:	2a0b      	cmp	r2, #11
 8008788:	d917      	bls.n	80087ba <_malloc_r+0xca>
 800878a:	1961      	adds	r1, r4, r5
 800878c:	42a3      	cmp	r3, r4
 800878e:	6025      	str	r5, [r4, #0]
 8008790:	bf18      	it	ne
 8008792:	6059      	strne	r1, [r3, #4]
 8008794:	6863      	ldr	r3, [r4, #4]
 8008796:	bf08      	it	eq
 8008798:	f8c8 1000 	streq.w	r1, [r8]
 800879c:	5162      	str	r2, [r4, r5]
 800879e:	604b      	str	r3, [r1, #4]
 80087a0:	4638      	mov	r0, r7
 80087a2:	f104 060b 	add.w	r6, r4, #11
 80087a6:	f000 f829 	bl	80087fc <__malloc_unlock>
 80087aa:	f026 0607 	bic.w	r6, r6, #7
 80087ae:	1d23      	adds	r3, r4, #4
 80087b0:	1af2      	subs	r2, r6, r3
 80087b2:	d0ae      	beq.n	8008712 <_malloc_r+0x22>
 80087b4:	1b9b      	subs	r3, r3, r6
 80087b6:	50a3      	str	r3, [r4, r2]
 80087b8:	e7ab      	b.n	8008712 <_malloc_r+0x22>
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	6862      	ldr	r2, [r4, #4]
 80087be:	d1dd      	bne.n	800877c <_malloc_r+0x8c>
 80087c0:	f8c8 2000 	str.w	r2, [r8]
 80087c4:	e7ec      	b.n	80087a0 <_malloc_r+0xb0>
 80087c6:	4623      	mov	r3, r4
 80087c8:	6864      	ldr	r4, [r4, #4]
 80087ca:	e7ac      	b.n	8008726 <_malloc_r+0x36>
 80087cc:	4634      	mov	r4, r6
 80087ce:	6876      	ldr	r6, [r6, #4]
 80087d0:	e7b4      	b.n	800873c <_malloc_r+0x4c>
 80087d2:	4613      	mov	r3, r2
 80087d4:	e7cc      	b.n	8008770 <_malloc_r+0x80>
 80087d6:	230c      	movs	r3, #12
 80087d8:	603b      	str	r3, [r7, #0]
 80087da:	4638      	mov	r0, r7
 80087dc:	f000 f80e 	bl	80087fc <__malloc_unlock>
 80087e0:	e797      	b.n	8008712 <_malloc_r+0x22>
 80087e2:	6025      	str	r5, [r4, #0]
 80087e4:	e7dc      	b.n	80087a0 <_malloc_r+0xb0>
 80087e6:	605b      	str	r3, [r3, #4]
 80087e8:	deff      	udf	#255	; 0xff
 80087ea:	bf00      	nop
 80087ec:	240004a8 	.word	0x240004a8

080087f0 <__malloc_lock>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__malloc_lock+0x8>)
 80087f2:	f7ff b912 	b.w	8007a1a <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	240004a4 	.word	0x240004a4

080087fc <__malloc_unlock>:
 80087fc:	4801      	ldr	r0, [pc, #4]	; (8008804 <__malloc_unlock+0x8>)
 80087fe:	f7ff b90d 	b.w	8007a1c <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	240004a4 	.word	0x240004a4

08008808 <_Balloc>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	69c6      	ldr	r6, [r0, #28]
 800880c:	4604      	mov	r4, r0
 800880e:	460d      	mov	r5, r1
 8008810:	b976      	cbnz	r6, 8008830 <_Balloc+0x28>
 8008812:	2010      	movs	r0, #16
 8008814:	f7ff ff44 	bl	80086a0 <malloc>
 8008818:	4602      	mov	r2, r0
 800881a:	61e0      	str	r0, [r4, #28]
 800881c:	b920      	cbnz	r0, 8008828 <_Balloc+0x20>
 800881e:	4b18      	ldr	r3, [pc, #96]	; (8008880 <_Balloc+0x78>)
 8008820:	4818      	ldr	r0, [pc, #96]	; (8008884 <_Balloc+0x7c>)
 8008822:	216b      	movs	r1, #107	; 0x6b
 8008824:	f000 fdaa 	bl	800937c <__assert_func>
 8008828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800882c:	6006      	str	r6, [r0, #0]
 800882e:	60c6      	str	r6, [r0, #12]
 8008830:	69e6      	ldr	r6, [r4, #28]
 8008832:	68f3      	ldr	r3, [r6, #12]
 8008834:	b183      	cbz	r3, 8008858 <_Balloc+0x50>
 8008836:	69e3      	ldr	r3, [r4, #28]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800883e:	b9b8      	cbnz	r0, 8008870 <_Balloc+0x68>
 8008840:	2101      	movs	r1, #1
 8008842:	fa01 f605 	lsl.w	r6, r1, r5
 8008846:	1d72      	adds	r2, r6, #5
 8008848:	0092      	lsls	r2, r2, #2
 800884a:	4620      	mov	r0, r4
 800884c:	f000 fdb4 	bl	80093b8 <_calloc_r>
 8008850:	b160      	cbz	r0, 800886c <_Balloc+0x64>
 8008852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008856:	e00e      	b.n	8008876 <_Balloc+0x6e>
 8008858:	2221      	movs	r2, #33	; 0x21
 800885a:	2104      	movs	r1, #4
 800885c:	4620      	mov	r0, r4
 800885e:	f000 fdab 	bl	80093b8 <_calloc_r>
 8008862:	69e3      	ldr	r3, [r4, #28]
 8008864:	60f0      	str	r0, [r6, #12]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e4      	bne.n	8008836 <_Balloc+0x2e>
 800886c:	2000      	movs	r0, #0
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	6802      	ldr	r2, [r0, #0]
 8008872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008876:	2300      	movs	r3, #0
 8008878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800887c:	e7f7      	b.n	800886e <_Balloc+0x66>
 800887e:	bf00      	nop
 8008880:	08009bf9 	.word	0x08009bf9
 8008884:	08009c79 	.word	0x08009c79

08008888 <_Bfree>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	69c6      	ldr	r6, [r0, #28]
 800888c:	4605      	mov	r5, r0
 800888e:	460c      	mov	r4, r1
 8008890:	b976      	cbnz	r6, 80088b0 <_Bfree+0x28>
 8008892:	2010      	movs	r0, #16
 8008894:	f7ff ff04 	bl	80086a0 <malloc>
 8008898:	4602      	mov	r2, r0
 800889a:	61e8      	str	r0, [r5, #28]
 800889c:	b920      	cbnz	r0, 80088a8 <_Bfree+0x20>
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <_Bfree+0x3c>)
 80088a0:	4809      	ldr	r0, [pc, #36]	; (80088c8 <_Bfree+0x40>)
 80088a2:	218f      	movs	r1, #143	; 0x8f
 80088a4:	f000 fd6a 	bl	800937c <__assert_func>
 80088a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088ac:	6006      	str	r6, [r0, #0]
 80088ae:	60c6      	str	r6, [r0, #12]
 80088b0:	b13c      	cbz	r4, 80088c2 <_Bfree+0x3a>
 80088b2:	69eb      	ldr	r3, [r5, #28]
 80088b4:	6862      	ldr	r2, [r4, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088bc:	6021      	str	r1, [r4, #0]
 80088be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
 80088c4:	08009bf9 	.word	0x08009bf9
 80088c8:	08009c79 	.word	0x08009c79

080088cc <__multadd>:
 80088cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	690d      	ldr	r5, [r1, #16]
 80088d2:	4607      	mov	r7, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	461e      	mov	r6, r3
 80088d8:	f101 0c14 	add.w	ip, r1, #20
 80088dc:	2000      	movs	r0, #0
 80088de:	f8dc 3000 	ldr.w	r3, [ip]
 80088e2:	b299      	uxth	r1, r3
 80088e4:	fb02 6101 	mla	r1, r2, r1, r6
 80088e8:	0c1e      	lsrs	r6, r3, #16
 80088ea:	0c0b      	lsrs	r3, r1, #16
 80088ec:	fb02 3306 	mla	r3, r2, r6, r3
 80088f0:	b289      	uxth	r1, r1
 80088f2:	3001      	adds	r0, #1
 80088f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088f8:	4285      	cmp	r5, r0
 80088fa:	f84c 1b04 	str.w	r1, [ip], #4
 80088fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008902:	dcec      	bgt.n	80088de <__multadd+0x12>
 8008904:	b30e      	cbz	r6, 800894a <__multadd+0x7e>
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	42ab      	cmp	r3, r5
 800890a:	dc19      	bgt.n	8008940 <__multadd+0x74>
 800890c:	6861      	ldr	r1, [r4, #4]
 800890e:	4638      	mov	r0, r7
 8008910:	3101      	adds	r1, #1
 8008912:	f7ff ff79 	bl	8008808 <_Balloc>
 8008916:	4680      	mov	r8, r0
 8008918:	b928      	cbnz	r0, 8008926 <__multadd+0x5a>
 800891a:	4602      	mov	r2, r0
 800891c:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <__multadd+0x84>)
 800891e:	480d      	ldr	r0, [pc, #52]	; (8008954 <__multadd+0x88>)
 8008920:	21ba      	movs	r1, #186	; 0xba
 8008922:	f000 fd2b 	bl	800937c <__assert_func>
 8008926:	6922      	ldr	r2, [r4, #16]
 8008928:	3202      	adds	r2, #2
 800892a:	f104 010c 	add.w	r1, r4, #12
 800892e:	0092      	lsls	r2, r2, #2
 8008930:	300c      	adds	r0, #12
 8008932:	f000 fd15 	bl	8009360 <memcpy>
 8008936:	4621      	mov	r1, r4
 8008938:	4638      	mov	r0, r7
 800893a:	f7ff ffa5 	bl	8008888 <_Bfree>
 800893e:	4644      	mov	r4, r8
 8008940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008944:	3501      	adds	r5, #1
 8008946:	615e      	str	r6, [r3, #20]
 8008948:	6125      	str	r5, [r4, #16]
 800894a:	4620      	mov	r0, r4
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	08009c68 	.word	0x08009c68
 8008954:	08009c79 	.word	0x08009c79

08008958 <__hi0bits>:
 8008958:	0c03      	lsrs	r3, r0, #16
 800895a:	041b      	lsls	r3, r3, #16
 800895c:	b9d3      	cbnz	r3, 8008994 <__hi0bits+0x3c>
 800895e:	0400      	lsls	r0, r0, #16
 8008960:	2310      	movs	r3, #16
 8008962:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008966:	bf04      	itt	eq
 8008968:	0200      	lsleq	r0, r0, #8
 800896a:	3308      	addeq	r3, #8
 800896c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008970:	bf04      	itt	eq
 8008972:	0100      	lsleq	r0, r0, #4
 8008974:	3304      	addeq	r3, #4
 8008976:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800897a:	bf04      	itt	eq
 800897c:	0080      	lsleq	r0, r0, #2
 800897e:	3302      	addeq	r3, #2
 8008980:	2800      	cmp	r0, #0
 8008982:	db05      	blt.n	8008990 <__hi0bits+0x38>
 8008984:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008988:	f103 0301 	add.w	r3, r3, #1
 800898c:	bf08      	it	eq
 800898e:	2320      	moveq	r3, #32
 8008990:	4618      	mov	r0, r3
 8008992:	4770      	bx	lr
 8008994:	2300      	movs	r3, #0
 8008996:	e7e4      	b.n	8008962 <__hi0bits+0xa>

08008998 <__lo0bits>:
 8008998:	6803      	ldr	r3, [r0, #0]
 800899a:	f013 0207 	ands.w	r2, r3, #7
 800899e:	d00c      	beq.n	80089ba <__lo0bits+0x22>
 80089a0:	07d9      	lsls	r1, r3, #31
 80089a2:	d422      	bmi.n	80089ea <__lo0bits+0x52>
 80089a4:	079a      	lsls	r2, r3, #30
 80089a6:	bf49      	itett	mi
 80089a8:	085b      	lsrmi	r3, r3, #1
 80089aa:	089b      	lsrpl	r3, r3, #2
 80089ac:	6003      	strmi	r3, [r0, #0]
 80089ae:	2201      	movmi	r2, #1
 80089b0:	bf5c      	itt	pl
 80089b2:	6003      	strpl	r3, [r0, #0]
 80089b4:	2202      	movpl	r2, #2
 80089b6:	4610      	mov	r0, r2
 80089b8:	4770      	bx	lr
 80089ba:	b299      	uxth	r1, r3
 80089bc:	b909      	cbnz	r1, 80089c2 <__lo0bits+0x2a>
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	2210      	movs	r2, #16
 80089c2:	b2d9      	uxtb	r1, r3
 80089c4:	b909      	cbnz	r1, 80089ca <__lo0bits+0x32>
 80089c6:	3208      	adds	r2, #8
 80089c8:	0a1b      	lsrs	r3, r3, #8
 80089ca:	0719      	lsls	r1, r3, #28
 80089cc:	bf04      	itt	eq
 80089ce:	091b      	lsreq	r3, r3, #4
 80089d0:	3204      	addeq	r2, #4
 80089d2:	0799      	lsls	r1, r3, #30
 80089d4:	bf04      	itt	eq
 80089d6:	089b      	lsreq	r3, r3, #2
 80089d8:	3202      	addeq	r2, #2
 80089da:	07d9      	lsls	r1, r3, #31
 80089dc:	d403      	bmi.n	80089e6 <__lo0bits+0x4e>
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	f102 0201 	add.w	r2, r2, #1
 80089e4:	d003      	beq.n	80089ee <__lo0bits+0x56>
 80089e6:	6003      	str	r3, [r0, #0]
 80089e8:	e7e5      	b.n	80089b6 <__lo0bits+0x1e>
 80089ea:	2200      	movs	r2, #0
 80089ec:	e7e3      	b.n	80089b6 <__lo0bits+0x1e>
 80089ee:	2220      	movs	r2, #32
 80089f0:	e7e1      	b.n	80089b6 <__lo0bits+0x1e>
	...

080089f4 <__i2b>:
 80089f4:	b510      	push	{r4, lr}
 80089f6:	460c      	mov	r4, r1
 80089f8:	2101      	movs	r1, #1
 80089fa:	f7ff ff05 	bl	8008808 <_Balloc>
 80089fe:	4602      	mov	r2, r0
 8008a00:	b928      	cbnz	r0, 8008a0e <__i2b+0x1a>
 8008a02:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <__i2b+0x24>)
 8008a04:	4805      	ldr	r0, [pc, #20]	; (8008a1c <__i2b+0x28>)
 8008a06:	f240 1145 	movw	r1, #325	; 0x145
 8008a0a:	f000 fcb7 	bl	800937c <__assert_func>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	6144      	str	r4, [r0, #20]
 8008a12:	6103      	str	r3, [r0, #16]
 8008a14:	bd10      	pop	{r4, pc}
 8008a16:	bf00      	nop
 8008a18:	08009c68 	.word	0x08009c68
 8008a1c:	08009c79 	.word	0x08009c79

08008a20 <__multiply>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	4691      	mov	r9, r2
 8008a26:	690a      	ldr	r2, [r1, #16]
 8008a28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	bfb8      	it	lt
 8008a30:	460b      	movlt	r3, r1
 8008a32:	460c      	mov	r4, r1
 8008a34:	bfbc      	itt	lt
 8008a36:	464c      	movlt	r4, r9
 8008a38:	4699      	movlt	r9, r3
 8008a3a:	6927      	ldr	r7, [r4, #16]
 8008a3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a40:	68a3      	ldr	r3, [r4, #8]
 8008a42:	6861      	ldr	r1, [r4, #4]
 8008a44:	eb07 060a 	add.w	r6, r7, sl
 8008a48:	42b3      	cmp	r3, r6
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	bfb8      	it	lt
 8008a4e:	3101      	addlt	r1, #1
 8008a50:	f7ff feda 	bl	8008808 <_Balloc>
 8008a54:	b930      	cbnz	r0, 8008a64 <__multiply+0x44>
 8008a56:	4602      	mov	r2, r0
 8008a58:	4b44      	ldr	r3, [pc, #272]	; (8008b6c <__multiply+0x14c>)
 8008a5a:	4845      	ldr	r0, [pc, #276]	; (8008b70 <__multiply+0x150>)
 8008a5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008a60:	f000 fc8c 	bl	800937c <__assert_func>
 8008a64:	f100 0514 	add.w	r5, r0, #20
 8008a68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	2200      	movs	r2, #0
 8008a70:	4543      	cmp	r3, r8
 8008a72:	d321      	bcc.n	8008ab8 <__multiply+0x98>
 8008a74:	f104 0314 	add.w	r3, r4, #20
 8008a78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a7c:	f109 0314 	add.w	r3, r9, #20
 8008a80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a84:	9202      	str	r2, [sp, #8]
 8008a86:	1b3a      	subs	r2, r7, r4
 8008a88:	3a15      	subs	r2, #21
 8008a8a:	f022 0203 	bic.w	r2, r2, #3
 8008a8e:	3204      	adds	r2, #4
 8008a90:	f104 0115 	add.w	r1, r4, #21
 8008a94:	428f      	cmp	r7, r1
 8008a96:	bf38      	it	cc
 8008a98:	2204      	movcc	r2, #4
 8008a9a:	9201      	str	r2, [sp, #4]
 8008a9c:	9a02      	ldr	r2, [sp, #8]
 8008a9e:	9303      	str	r3, [sp, #12]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d80c      	bhi.n	8008abe <__multiply+0x9e>
 8008aa4:	2e00      	cmp	r6, #0
 8008aa6:	dd03      	ble.n	8008ab0 <__multiply+0x90>
 8008aa8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d05b      	beq.n	8008b68 <__multiply+0x148>
 8008ab0:	6106      	str	r6, [r0, #16]
 8008ab2:	b005      	add	sp, #20
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab8:	f843 2b04 	str.w	r2, [r3], #4
 8008abc:	e7d8      	b.n	8008a70 <__multiply+0x50>
 8008abe:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ac2:	f1ba 0f00 	cmp.w	sl, #0
 8008ac6:	d024      	beq.n	8008b12 <__multiply+0xf2>
 8008ac8:	f104 0e14 	add.w	lr, r4, #20
 8008acc:	46a9      	mov	r9, r5
 8008ace:	f04f 0c00 	mov.w	ip, #0
 8008ad2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ad6:	f8d9 1000 	ldr.w	r1, [r9]
 8008ada:	fa1f fb82 	uxth.w	fp, r2
 8008ade:	b289      	uxth	r1, r1
 8008ae0:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ae4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008ae8:	f8d9 2000 	ldr.w	r2, [r9]
 8008aec:	4461      	add	r1, ip
 8008aee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008af2:	fb0a c20b 	mla	r2, sl, fp, ip
 8008af6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008afa:	b289      	uxth	r1, r1
 8008afc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b00:	4577      	cmp	r7, lr
 8008b02:	f849 1b04 	str.w	r1, [r9], #4
 8008b06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b0a:	d8e2      	bhi.n	8008ad2 <__multiply+0xb2>
 8008b0c:	9a01      	ldr	r2, [sp, #4]
 8008b0e:	f845 c002 	str.w	ip, [r5, r2]
 8008b12:	9a03      	ldr	r2, [sp, #12]
 8008b14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b18:	3304      	adds	r3, #4
 8008b1a:	f1b9 0f00 	cmp.w	r9, #0
 8008b1e:	d021      	beq.n	8008b64 <__multiply+0x144>
 8008b20:	6829      	ldr	r1, [r5, #0]
 8008b22:	f104 0c14 	add.w	ip, r4, #20
 8008b26:	46ae      	mov	lr, r5
 8008b28:	f04f 0a00 	mov.w	sl, #0
 8008b2c:	f8bc b000 	ldrh.w	fp, [ip]
 8008b30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b34:	fb09 220b 	mla	r2, r9, fp, r2
 8008b38:	4452      	add	r2, sl
 8008b3a:	b289      	uxth	r1, r1
 8008b3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b40:	f84e 1b04 	str.w	r1, [lr], #4
 8008b44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008b48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b4c:	f8be 1000 	ldrh.w	r1, [lr]
 8008b50:	fb09 110a 	mla	r1, r9, sl, r1
 8008b54:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008b58:	4567      	cmp	r7, ip
 8008b5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b5e:	d8e5      	bhi.n	8008b2c <__multiply+0x10c>
 8008b60:	9a01      	ldr	r2, [sp, #4]
 8008b62:	50a9      	str	r1, [r5, r2]
 8008b64:	3504      	adds	r5, #4
 8008b66:	e799      	b.n	8008a9c <__multiply+0x7c>
 8008b68:	3e01      	subs	r6, #1
 8008b6a:	e79b      	b.n	8008aa4 <__multiply+0x84>
 8008b6c:	08009c68 	.word	0x08009c68
 8008b70:	08009c79 	.word	0x08009c79

08008b74 <__pow5mult>:
 8008b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b78:	4615      	mov	r5, r2
 8008b7a:	f012 0203 	ands.w	r2, r2, #3
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460f      	mov	r7, r1
 8008b82:	d007      	beq.n	8008b94 <__pow5mult+0x20>
 8008b84:	4c25      	ldr	r4, [pc, #148]	; (8008c1c <__pow5mult+0xa8>)
 8008b86:	3a01      	subs	r2, #1
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b8e:	f7ff fe9d 	bl	80088cc <__multadd>
 8008b92:	4607      	mov	r7, r0
 8008b94:	10ad      	asrs	r5, r5, #2
 8008b96:	d03d      	beq.n	8008c14 <__pow5mult+0xa0>
 8008b98:	69f4      	ldr	r4, [r6, #28]
 8008b9a:	b97c      	cbnz	r4, 8008bbc <__pow5mult+0x48>
 8008b9c:	2010      	movs	r0, #16
 8008b9e:	f7ff fd7f 	bl	80086a0 <malloc>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	61f0      	str	r0, [r6, #28]
 8008ba6:	b928      	cbnz	r0, 8008bb4 <__pow5mult+0x40>
 8008ba8:	4b1d      	ldr	r3, [pc, #116]	; (8008c20 <__pow5mult+0xac>)
 8008baa:	481e      	ldr	r0, [pc, #120]	; (8008c24 <__pow5mult+0xb0>)
 8008bac:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008bb0:	f000 fbe4 	bl	800937c <__assert_func>
 8008bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bb8:	6004      	str	r4, [r0, #0]
 8008bba:	60c4      	str	r4, [r0, #12]
 8008bbc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008bc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bc4:	b94c      	cbnz	r4, 8008bda <__pow5mult+0x66>
 8008bc6:	f240 2171 	movw	r1, #625	; 0x271
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7ff ff12 	bl	80089f4 <__i2b>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	f04f 0900 	mov.w	r9, #0
 8008bde:	07eb      	lsls	r3, r5, #31
 8008be0:	d50a      	bpl.n	8008bf8 <__pow5mult+0x84>
 8008be2:	4639      	mov	r1, r7
 8008be4:	4622      	mov	r2, r4
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7ff ff1a 	bl	8008a20 <__multiply>
 8008bec:	4639      	mov	r1, r7
 8008bee:	4680      	mov	r8, r0
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7ff fe49 	bl	8008888 <_Bfree>
 8008bf6:	4647      	mov	r7, r8
 8008bf8:	106d      	asrs	r5, r5, #1
 8008bfa:	d00b      	beq.n	8008c14 <__pow5mult+0xa0>
 8008bfc:	6820      	ldr	r0, [r4, #0]
 8008bfe:	b938      	cbnz	r0, 8008c10 <__pow5mult+0x9c>
 8008c00:	4622      	mov	r2, r4
 8008c02:	4621      	mov	r1, r4
 8008c04:	4630      	mov	r0, r6
 8008c06:	f7ff ff0b 	bl	8008a20 <__multiply>
 8008c0a:	6020      	str	r0, [r4, #0]
 8008c0c:	f8c0 9000 	str.w	r9, [r0]
 8008c10:	4604      	mov	r4, r0
 8008c12:	e7e4      	b.n	8008bde <__pow5mult+0x6a>
 8008c14:	4638      	mov	r0, r7
 8008c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1a:	bf00      	nop
 8008c1c:	08009dc8 	.word	0x08009dc8
 8008c20:	08009bf9 	.word	0x08009bf9
 8008c24:	08009c79 	.word	0x08009c79

08008c28 <__lshift>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	6849      	ldr	r1, [r1, #4]
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c36:	68a3      	ldr	r3, [r4, #8]
 8008c38:	4607      	mov	r7, r0
 8008c3a:	4691      	mov	r9, r2
 8008c3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c40:	f108 0601 	add.w	r6, r8, #1
 8008c44:	42b3      	cmp	r3, r6
 8008c46:	db0b      	blt.n	8008c60 <__lshift+0x38>
 8008c48:	4638      	mov	r0, r7
 8008c4a:	f7ff fddd 	bl	8008808 <_Balloc>
 8008c4e:	4605      	mov	r5, r0
 8008c50:	b948      	cbnz	r0, 8008c66 <__lshift+0x3e>
 8008c52:	4602      	mov	r2, r0
 8008c54:	4b28      	ldr	r3, [pc, #160]	; (8008cf8 <__lshift+0xd0>)
 8008c56:	4829      	ldr	r0, [pc, #164]	; (8008cfc <__lshift+0xd4>)
 8008c58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008c5c:	f000 fb8e 	bl	800937c <__assert_func>
 8008c60:	3101      	adds	r1, #1
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	e7ee      	b.n	8008c44 <__lshift+0x1c>
 8008c66:	2300      	movs	r3, #0
 8008c68:	f100 0114 	add.w	r1, r0, #20
 8008c6c:	f100 0210 	add.w	r2, r0, #16
 8008c70:	4618      	mov	r0, r3
 8008c72:	4553      	cmp	r3, sl
 8008c74:	db33      	blt.n	8008cde <__lshift+0xb6>
 8008c76:	6920      	ldr	r0, [r4, #16]
 8008c78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c7c:	f104 0314 	add.w	r3, r4, #20
 8008c80:	f019 091f 	ands.w	r9, r9, #31
 8008c84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c8c:	d02b      	beq.n	8008ce6 <__lshift+0xbe>
 8008c8e:	f1c9 0e20 	rsb	lr, r9, #32
 8008c92:	468a      	mov	sl, r1
 8008c94:	2200      	movs	r2, #0
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	fa00 f009 	lsl.w	r0, r0, r9
 8008c9c:	4310      	orrs	r0, r2
 8008c9e:	f84a 0b04 	str.w	r0, [sl], #4
 8008ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca6:	459c      	cmp	ip, r3
 8008ca8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cac:	d8f3      	bhi.n	8008c96 <__lshift+0x6e>
 8008cae:	ebac 0304 	sub.w	r3, ip, r4
 8008cb2:	3b15      	subs	r3, #21
 8008cb4:	f023 0303 	bic.w	r3, r3, #3
 8008cb8:	3304      	adds	r3, #4
 8008cba:	f104 0015 	add.w	r0, r4, #21
 8008cbe:	4584      	cmp	ip, r0
 8008cc0:	bf38      	it	cc
 8008cc2:	2304      	movcc	r3, #4
 8008cc4:	50ca      	str	r2, [r1, r3]
 8008cc6:	b10a      	cbz	r2, 8008ccc <__lshift+0xa4>
 8008cc8:	f108 0602 	add.w	r6, r8, #2
 8008ccc:	3e01      	subs	r6, #1
 8008cce:	4638      	mov	r0, r7
 8008cd0:	612e      	str	r6, [r5, #16]
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	f7ff fdd8 	bl	8008888 <_Bfree>
 8008cd8:	4628      	mov	r0, r5
 8008cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cde:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	e7c5      	b.n	8008c72 <__lshift+0x4a>
 8008ce6:	3904      	subs	r1, #4
 8008ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cec:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cf0:	459c      	cmp	ip, r3
 8008cf2:	d8f9      	bhi.n	8008ce8 <__lshift+0xc0>
 8008cf4:	e7ea      	b.n	8008ccc <__lshift+0xa4>
 8008cf6:	bf00      	nop
 8008cf8:	08009c68 	.word	0x08009c68
 8008cfc:	08009c79 	.word	0x08009c79

08008d00 <__mcmp>:
 8008d00:	b530      	push	{r4, r5, lr}
 8008d02:	6902      	ldr	r2, [r0, #16]
 8008d04:	690c      	ldr	r4, [r1, #16]
 8008d06:	1b12      	subs	r2, r2, r4
 8008d08:	d10e      	bne.n	8008d28 <__mcmp+0x28>
 8008d0a:	f100 0314 	add.w	r3, r0, #20
 8008d0e:	3114      	adds	r1, #20
 8008d10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d20:	42a5      	cmp	r5, r4
 8008d22:	d003      	beq.n	8008d2c <__mcmp+0x2c>
 8008d24:	d305      	bcc.n	8008d32 <__mcmp+0x32>
 8008d26:	2201      	movs	r2, #1
 8008d28:	4610      	mov	r0, r2
 8008d2a:	bd30      	pop	{r4, r5, pc}
 8008d2c:	4283      	cmp	r3, r0
 8008d2e:	d3f3      	bcc.n	8008d18 <__mcmp+0x18>
 8008d30:	e7fa      	b.n	8008d28 <__mcmp+0x28>
 8008d32:	f04f 32ff 	mov.w	r2, #4294967295
 8008d36:	e7f7      	b.n	8008d28 <__mcmp+0x28>

08008d38 <__mdiff>:
 8008d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	4606      	mov	r6, r0
 8008d40:	4611      	mov	r1, r2
 8008d42:	4620      	mov	r0, r4
 8008d44:	4690      	mov	r8, r2
 8008d46:	f7ff ffdb 	bl	8008d00 <__mcmp>
 8008d4a:	1e05      	subs	r5, r0, #0
 8008d4c:	d110      	bne.n	8008d70 <__mdiff+0x38>
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7ff fd59 	bl	8008808 <_Balloc>
 8008d56:	b930      	cbnz	r0, 8008d66 <__mdiff+0x2e>
 8008d58:	4b3a      	ldr	r3, [pc, #232]	; (8008e44 <__mdiff+0x10c>)
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	f240 2137 	movw	r1, #567	; 0x237
 8008d60:	4839      	ldr	r0, [pc, #228]	; (8008e48 <__mdiff+0x110>)
 8008d62:	f000 fb0b 	bl	800937c <__assert_func>
 8008d66:	2301      	movs	r3, #1
 8008d68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	bfa4      	itt	ge
 8008d72:	4643      	movge	r3, r8
 8008d74:	46a0      	movge	r8, r4
 8008d76:	4630      	mov	r0, r6
 8008d78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d7c:	bfa6      	itte	ge
 8008d7e:	461c      	movge	r4, r3
 8008d80:	2500      	movge	r5, #0
 8008d82:	2501      	movlt	r5, #1
 8008d84:	f7ff fd40 	bl	8008808 <_Balloc>
 8008d88:	b920      	cbnz	r0, 8008d94 <__mdiff+0x5c>
 8008d8a:	4b2e      	ldr	r3, [pc, #184]	; (8008e44 <__mdiff+0x10c>)
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	f240 2145 	movw	r1, #581	; 0x245
 8008d92:	e7e5      	b.n	8008d60 <__mdiff+0x28>
 8008d94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d98:	6926      	ldr	r6, [r4, #16]
 8008d9a:	60c5      	str	r5, [r0, #12]
 8008d9c:	f104 0914 	add.w	r9, r4, #20
 8008da0:	f108 0514 	add.w	r5, r8, #20
 8008da4:	f100 0e14 	add.w	lr, r0, #20
 8008da8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008db0:	f108 0210 	add.w	r2, r8, #16
 8008db4:	46f2      	mov	sl, lr
 8008db6:	2100      	movs	r1, #0
 8008db8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008dbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008dc0:	fa11 f88b 	uxtah	r8, r1, fp
 8008dc4:	b299      	uxth	r1, r3
 8008dc6:	0c1b      	lsrs	r3, r3, #16
 8008dc8:	eba8 0801 	sub.w	r8, r8, r1
 8008dcc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dd0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008dd4:	fa1f f888 	uxth.w	r8, r8
 8008dd8:	1419      	asrs	r1, r3, #16
 8008dda:	454e      	cmp	r6, r9
 8008ddc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008de0:	f84a 3b04 	str.w	r3, [sl], #4
 8008de4:	d8e8      	bhi.n	8008db8 <__mdiff+0x80>
 8008de6:	1b33      	subs	r3, r6, r4
 8008de8:	3b15      	subs	r3, #21
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	3304      	adds	r3, #4
 8008df0:	3415      	adds	r4, #21
 8008df2:	42a6      	cmp	r6, r4
 8008df4:	bf38      	it	cc
 8008df6:	2304      	movcc	r3, #4
 8008df8:	441d      	add	r5, r3
 8008dfa:	4473      	add	r3, lr
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	462e      	mov	r6, r5
 8008e00:	4566      	cmp	r6, ip
 8008e02:	d30e      	bcc.n	8008e22 <__mdiff+0xea>
 8008e04:	f10c 0203 	add.w	r2, ip, #3
 8008e08:	1b52      	subs	r2, r2, r5
 8008e0a:	f022 0203 	bic.w	r2, r2, #3
 8008e0e:	3d03      	subs	r5, #3
 8008e10:	45ac      	cmp	ip, r5
 8008e12:	bf38      	it	cc
 8008e14:	2200      	movcc	r2, #0
 8008e16:	4413      	add	r3, r2
 8008e18:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008e1c:	b17a      	cbz	r2, 8008e3e <__mdiff+0x106>
 8008e1e:	6107      	str	r7, [r0, #16]
 8008e20:	e7a4      	b.n	8008d6c <__mdiff+0x34>
 8008e22:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e26:	fa11 f288 	uxtah	r2, r1, r8
 8008e2a:	1414      	asrs	r4, r2, #16
 8008e2c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e30:	b292      	uxth	r2, r2
 8008e32:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e36:	f84e 2b04 	str.w	r2, [lr], #4
 8008e3a:	1421      	asrs	r1, r4, #16
 8008e3c:	e7e0      	b.n	8008e00 <__mdiff+0xc8>
 8008e3e:	3f01      	subs	r7, #1
 8008e40:	e7ea      	b.n	8008e18 <__mdiff+0xe0>
 8008e42:	bf00      	nop
 8008e44:	08009c68 	.word	0x08009c68
 8008e48:	08009c79 	.word	0x08009c79

08008e4c <__d2b>:
 8008e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e50:	460f      	mov	r7, r1
 8008e52:	2101      	movs	r1, #1
 8008e54:	ec59 8b10 	vmov	r8, r9, d0
 8008e58:	4616      	mov	r6, r2
 8008e5a:	f7ff fcd5 	bl	8008808 <_Balloc>
 8008e5e:	4604      	mov	r4, r0
 8008e60:	b930      	cbnz	r0, 8008e70 <__d2b+0x24>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <__d2b+0xac>)
 8008e66:	4825      	ldr	r0, [pc, #148]	; (8008efc <__d2b+0xb0>)
 8008e68:	f240 310f 	movw	r1, #783	; 0x30f
 8008e6c:	f000 fa86 	bl	800937c <__assert_func>
 8008e70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e78:	bb2d      	cbnz	r5, 8008ec6 <__d2b+0x7a>
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	f1b8 0300 	subs.w	r3, r8, #0
 8008e80:	d026      	beq.n	8008ed0 <__d2b+0x84>
 8008e82:	4668      	mov	r0, sp
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	f7ff fd87 	bl	8008998 <__lo0bits>
 8008e8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e8e:	b1e8      	cbz	r0, 8008ecc <__d2b+0x80>
 8008e90:	f1c0 0320 	rsb	r3, r0, #32
 8008e94:	fa02 f303 	lsl.w	r3, r2, r3
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	40c2      	lsrs	r2, r0
 8008e9c:	6163      	str	r3, [r4, #20]
 8008e9e:	9201      	str	r2, [sp, #4]
 8008ea0:	9b01      	ldr	r3, [sp, #4]
 8008ea2:	61a3      	str	r3, [r4, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	bf14      	ite	ne
 8008ea8:	2202      	movne	r2, #2
 8008eaa:	2201      	moveq	r2, #1
 8008eac:	6122      	str	r2, [r4, #16]
 8008eae:	b1bd      	cbz	r5, 8008ee0 <__d2b+0x94>
 8008eb0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008eb4:	4405      	add	r5, r0
 8008eb6:	603d      	str	r5, [r7, #0]
 8008eb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ebc:	6030      	str	r0, [r6, #0]
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	b003      	add	sp, #12
 8008ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008eca:	e7d6      	b.n	8008e7a <__d2b+0x2e>
 8008ecc:	6161      	str	r1, [r4, #20]
 8008ece:	e7e7      	b.n	8008ea0 <__d2b+0x54>
 8008ed0:	a801      	add	r0, sp, #4
 8008ed2:	f7ff fd61 	bl	8008998 <__lo0bits>
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	6163      	str	r3, [r4, #20]
 8008eda:	3020      	adds	r0, #32
 8008edc:	2201      	movs	r2, #1
 8008ede:	e7e5      	b.n	8008eac <__d2b+0x60>
 8008ee0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ee4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ee8:	6038      	str	r0, [r7, #0]
 8008eea:	6918      	ldr	r0, [r3, #16]
 8008eec:	f7ff fd34 	bl	8008958 <__hi0bits>
 8008ef0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ef4:	e7e2      	b.n	8008ebc <__d2b+0x70>
 8008ef6:	bf00      	nop
 8008ef8:	08009c68 	.word	0x08009c68
 8008efc:	08009c79 	.word	0x08009c79

08008f00 <__ssputs_r>:
 8008f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f04:	688e      	ldr	r6, [r1, #8]
 8008f06:	461f      	mov	r7, r3
 8008f08:	42be      	cmp	r6, r7
 8008f0a:	680b      	ldr	r3, [r1, #0]
 8008f0c:	4682      	mov	sl, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	4690      	mov	r8, r2
 8008f12:	d82c      	bhi.n	8008f6e <__ssputs_r+0x6e>
 8008f14:	898a      	ldrh	r2, [r1, #12]
 8008f16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f1a:	d026      	beq.n	8008f6a <__ssputs_r+0x6a>
 8008f1c:	6965      	ldr	r5, [r4, #20]
 8008f1e:	6909      	ldr	r1, [r1, #16]
 8008f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f24:	eba3 0901 	sub.w	r9, r3, r1
 8008f28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f2c:	1c7b      	adds	r3, r7, #1
 8008f2e:	444b      	add	r3, r9
 8008f30:	106d      	asrs	r5, r5, #1
 8008f32:	429d      	cmp	r5, r3
 8008f34:	bf38      	it	cc
 8008f36:	461d      	movcc	r5, r3
 8008f38:	0553      	lsls	r3, r2, #21
 8008f3a:	d527      	bpl.n	8008f8c <__ssputs_r+0x8c>
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f7ff fbd7 	bl	80086f0 <_malloc_r>
 8008f42:	4606      	mov	r6, r0
 8008f44:	b360      	cbz	r0, 8008fa0 <__ssputs_r+0xa0>
 8008f46:	6921      	ldr	r1, [r4, #16]
 8008f48:	464a      	mov	r2, r9
 8008f4a:	f000 fa09 	bl	8009360 <memcpy>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	6126      	str	r6, [r4, #16]
 8008f5c:	6165      	str	r5, [r4, #20]
 8008f5e:	444e      	add	r6, r9
 8008f60:	eba5 0509 	sub.w	r5, r5, r9
 8008f64:	6026      	str	r6, [r4, #0]
 8008f66:	60a5      	str	r5, [r4, #8]
 8008f68:	463e      	mov	r6, r7
 8008f6a:	42be      	cmp	r6, r7
 8008f6c:	d900      	bls.n	8008f70 <__ssputs_r+0x70>
 8008f6e:	463e      	mov	r6, r7
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	4632      	mov	r2, r6
 8008f74:	4641      	mov	r1, r8
 8008f76:	f000 f9c9 	bl	800930c <memmove>
 8008f7a:	68a3      	ldr	r3, [r4, #8]
 8008f7c:	1b9b      	subs	r3, r3, r6
 8008f7e:	60a3      	str	r3, [r4, #8]
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	4433      	add	r3, r6
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	2000      	movs	r0, #0
 8008f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	f000 fa3b 	bl	8009408 <_realloc_r>
 8008f92:	4606      	mov	r6, r0
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d1e0      	bne.n	8008f5a <__ssputs_r+0x5a>
 8008f98:	6921      	ldr	r1, [r4, #16]
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	f7ff fb34 	bl	8008608 <_free_r>
 8008fa0:	230c      	movs	r3, #12
 8008fa2:	f8ca 3000 	str.w	r3, [sl]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb2:	e7e9      	b.n	8008f88 <__ssputs_r+0x88>

08008fb4 <_svfiprintf_r>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	4698      	mov	r8, r3
 8008fba:	898b      	ldrh	r3, [r1, #12]
 8008fbc:	061b      	lsls	r3, r3, #24
 8008fbe:	b09d      	sub	sp, #116	; 0x74
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	d50e      	bpl.n	8008fe6 <_svfiprintf_r+0x32>
 8008fc8:	690b      	ldr	r3, [r1, #16]
 8008fca:	b963      	cbnz	r3, 8008fe6 <_svfiprintf_r+0x32>
 8008fcc:	2140      	movs	r1, #64	; 0x40
 8008fce:	f7ff fb8f 	bl	80086f0 <_malloc_r>
 8008fd2:	6028      	str	r0, [r5, #0]
 8008fd4:	6128      	str	r0, [r5, #16]
 8008fd6:	b920      	cbnz	r0, 8008fe2 <_svfiprintf_r+0x2e>
 8008fd8:	230c      	movs	r3, #12
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe0:	e0d0      	b.n	8009184 <_svfiprintf_r+0x1d0>
 8008fe2:	2340      	movs	r3, #64	; 0x40
 8008fe4:	616b      	str	r3, [r5, #20]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fea:	2320      	movs	r3, #32
 8008fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff4:	2330      	movs	r3, #48	; 0x30
 8008ff6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800919c <_svfiprintf_r+0x1e8>
 8008ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ffe:	f04f 0901 	mov.w	r9, #1
 8009002:	4623      	mov	r3, r4
 8009004:	469a      	mov	sl, r3
 8009006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800900a:	b10a      	cbz	r2, 8009010 <_svfiprintf_r+0x5c>
 800900c:	2a25      	cmp	r2, #37	; 0x25
 800900e:	d1f9      	bne.n	8009004 <_svfiprintf_r+0x50>
 8009010:	ebba 0b04 	subs.w	fp, sl, r4
 8009014:	d00b      	beq.n	800902e <_svfiprintf_r+0x7a>
 8009016:	465b      	mov	r3, fp
 8009018:	4622      	mov	r2, r4
 800901a:	4629      	mov	r1, r5
 800901c:	4638      	mov	r0, r7
 800901e:	f7ff ff6f 	bl	8008f00 <__ssputs_r>
 8009022:	3001      	adds	r0, #1
 8009024:	f000 80a9 	beq.w	800917a <_svfiprintf_r+0x1c6>
 8009028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800902a:	445a      	add	r2, fp
 800902c:	9209      	str	r2, [sp, #36]	; 0x24
 800902e:	f89a 3000 	ldrb.w	r3, [sl]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 80a1 	beq.w	800917a <_svfiprintf_r+0x1c6>
 8009038:	2300      	movs	r3, #0
 800903a:	f04f 32ff 	mov.w	r2, #4294967295
 800903e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009042:	f10a 0a01 	add.w	sl, sl, #1
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	9307      	str	r3, [sp, #28]
 800904a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800904e:	931a      	str	r3, [sp, #104]	; 0x68
 8009050:	4654      	mov	r4, sl
 8009052:	2205      	movs	r2, #5
 8009054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009058:	4850      	ldr	r0, [pc, #320]	; (800919c <_svfiprintf_r+0x1e8>)
 800905a:	f7f7 f949 	bl	80002f0 <memchr>
 800905e:	9a04      	ldr	r2, [sp, #16]
 8009060:	b9d8      	cbnz	r0, 800909a <_svfiprintf_r+0xe6>
 8009062:	06d0      	lsls	r0, r2, #27
 8009064:	bf44      	itt	mi
 8009066:	2320      	movmi	r3, #32
 8009068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800906c:	0711      	lsls	r1, r2, #28
 800906e:	bf44      	itt	mi
 8009070:	232b      	movmi	r3, #43	; 0x2b
 8009072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009076:	f89a 3000 	ldrb.w	r3, [sl]
 800907a:	2b2a      	cmp	r3, #42	; 0x2a
 800907c:	d015      	beq.n	80090aa <_svfiprintf_r+0xf6>
 800907e:	9a07      	ldr	r2, [sp, #28]
 8009080:	4654      	mov	r4, sl
 8009082:	2000      	movs	r0, #0
 8009084:	f04f 0c0a 	mov.w	ip, #10
 8009088:	4621      	mov	r1, r4
 800908a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908e:	3b30      	subs	r3, #48	; 0x30
 8009090:	2b09      	cmp	r3, #9
 8009092:	d94d      	bls.n	8009130 <_svfiprintf_r+0x17c>
 8009094:	b1b0      	cbz	r0, 80090c4 <_svfiprintf_r+0x110>
 8009096:	9207      	str	r2, [sp, #28]
 8009098:	e014      	b.n	80090c4 <_svfiprintf_r+0x110>
 800909a:	eba0 0308 	sub.w	r3, r0, r8
 800909e:	fa09 f303 	lsl.w	r3, r9, r3
 80090a2:	4313      	orrs	r3, r2
 80090a4:	9304      	str	r3, [sp, #16]
 80090a6:	46a2      	mov	sl, r4
 80090a8:	e7d2      	b.n	8009050 <_svfiprintf_r+0x9c>
 80090aa:	9b03      	ldr	r3, [sp, #12]
 80090ac:	1d19      	adds	r1, r3, #4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	9103      	str	r1, [sp, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bfbb      	ittet	lt
 80090b6:	425b      	neglt	r3, r3
 80090b8:	f042 0202 	orrlt.w	r2, r2, #2
 80090bc:	9307      	strge	r3, [sp, #28]
 80090be:	9307      	strlt	r3, [sp, #28]
 80090c0:	bfb8      	it	lt
 80090c2:	9204      	strlt	r2, [sp, #16]
 80090c4:	7823      	ldrb	r3, [r4, #0]
 80090c6:	2b2e      	cmp	r3, #46	; 0x2e
 80090c8:	d10c      	bne.n	80090e4 <_svfiprintf_r+0x130>
 80090ca:	7863      	ldrb	r3, [r4, #1]
 80090cc:	2b2a      	cmp	r3, #42	; 0x2a
 80090ce:	d134      	bne.n	800913a <_svfiprintf_r+0x186>
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	9203      	str	r2, [sp, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bfb8      	it	lt
 80090dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80090e0:	3402      	adds	r4, #2
 80090e2:	9305      	str	r3, [sp, #20]
 80090e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80091ac <_svfiprintf_r+0x1f8>
 80090e8:	7821      	ldrb	r1, [r4, #0]
 80090ea:	2203      	movs	r2, #3
 80090ec:	4650      	mov	r0, sl
 80090ee:	f7f7 f8ff 	bl	80002f0 <memchr>
 80090f2:	b138      	cbz	r0, 8009104 <_svfiprintf_r+0x150>
 80090f4:	9b04      	ldr	r3, [sp, #16]
 80090f6:	eba0 000a 	sub.w	r0, r0, sl
 80090fa:	2240      	movs	r2, #64	; 0x40
 80090fc:	4082      	lsls	r2, r0
 80090fe:	4313      	orrs	r3, r2
 8009100:	3401      	adds	r4, #1
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009108:	4825      	ldr	r0, [pc, #148]	; (80091a0 <_svfiprintf_r+0x1ec>)
 800910a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800910e:	2206      	movs	r2, #6
 8009110:	f7f7 f8ee 	bl	80002f0 <memchr>
 8009114:	2800      	cmp	r0, #0
 8009116:	d038      	beq.n	800918a <_svfiprintf_r+0x1d6>
 8009118:	4b22      	ldr	r3, [pc, #136]	; (80091a4 <_svfiprintf_r+0x1f0>)
 800911a:	bb1b      	cbnz	r3, 8009164 <_svfiprintf_r+0x1b0>
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	3307      	adds	r3, #7
 8009120:	f023 0307 	bic.w	r3, r3, #7
 8009124:	3308      	adds	r3, #8
 8009126:	9303      	str	r3, [sp, #12]
 8009128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912a:	4433      	add	r3, r6
 800912c:	9309      	str	r3, [sp, #36]	; 0x24
 800912e:	e768      	b.n	8009002 <_svfiprintf_r+0x4e>
 8009130:	fb0c 3202 	mla	r2, ip, r2, r3
 8009134:	460c      	mov	r4, r1
 8009136:	2001      	movs	r0, #1
 8009138:	e7a6      	b.n	8009088 <_svfiprintf_r+0xd4>
 800913a:	2300      	movs	r3, #0
 800913c:	3401      	adds	r4, #1
 800913e:	9305      	str	r3, [sp, #20]
 8009140:	4619      	mov	r1, r3
 8009142:	f04f 0c0a 	mov.w	ip, #10
 8009146:	4620      	mov	r0, r4
 8009148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800914c:	3a30      	subs	r2, #48	; 0x30
 800914e:	2a09      	cmp	r2, #9
 8009150:	d903      	bls.n	800915a <_svfiprintf_r+0x1a6>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0c6      	beq.n	80090e4 <_svfiprintf_r+0x130>
 8009156:	9105      	str	r1, [sp, #20]
 8009158:	e7c4      	b.n	80090e4 <_svfiprintf_r+0x130>
 800915a:	fb0c 2101 	mla	r1, ip, r1, r2
 800915e:	4604      	mov	r4, r0
 8009160:	2301      	movs	r3, #1
 8009162:	e7f0      	b.n	8009146 <_svfiprintf_r+0x192>
 8009164:	ab03      	add	r3, sp, #12
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	462a      	mov	r2, r5
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <_svfiprintf_r+0x1f4>)
 800916c:	a904      	add	r1, sp, #16
 800916e:	4638      	mov	r0, r7
 8009170:	f7fd ff06 	bl	8006f80 <_printf_float>
 8009174:	1c42      	adds	r2, r0, #1
 8009176:	4606      	mov	r6, r0
 8009178:	d1d6      	bne.n	8009128 <_svfiprintf_r+0x174>
 800917a:	89ab      	ldrh	r3, [r5, #12]
 800917c:	065b      	lsls	r3, r3, #25
 800917e:	f53f af2d 	bmi.w	8008fdc <_svfiprintf_r+0x28>
 8009182:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009184:	b01d      	add	sp, #116	; 0x74
 8009186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918a:	ab03      	add	r3, sp, #12
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	462a      	mov	r2, r5
 8009190:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <_svfiprintf_r+0x1f4>)
 8009192:	a904      	add	r1, sp, #16
 8009194:	4638      	mov	r0, r7
 8009196:	f7fe f97b 	bl	8007490 <_printf_i>
 800919a:	e7eb      	b.n	8009174 <_svfiprintf_r+0x1c0>
 800919c:	08009dd4 	.word	0x08009dd4
 80091a0:	08009dde 	.word	0x08009dde
 80091a4:	08006f81 	.word	0x08006f81
 80091a8:	08008f01 	.word	0x08008f01
 80091ac:	08009dda 	.word	0x08009dda

080091b0 <__sflush_r>:
 80091b0:	898a      	ldrh	r2, [r1, #12]
 80091b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b6:	4605      	mov	r5, r0
 80091b8:	0710      	lsls	r0, r2, #28
 80091ba:	460c      	mov	r4, r1
 80091bc:	d458      	bmi.n	8009270 <__sflush_r+0xc0>
 80091be:	684b      	ldr	r3, [r1, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dc05      	bgt.n	80091d0 <__sflush_r+0x20>
 80091c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	dc02      	bgt.n	80091d0 <__sflush_r+0x20>
 80091ca:	2000      	movs	r0, #0
 80091cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091d2:	2e00      	cmp	r6, #0
 80091d4:	d0f9      	beq.n	80091ca <__sflush_r+0x1a>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091dc:	682f      	ldr	r7, [r5, #0]
 80091de:	6a21      	ldr	r1, [r4, #32]
 80091e0:	602b      	str	r3, [r5, #0]
 80091e2:	d032      	beq.n	800924a <__sflush_r+0x9a>
 80091e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	075a      	lsls	r2, r3, #29
 80091ea:	d505      	bpl.n	80091f8 <__sflush_r+0x48>
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	1ac0      	subs	r0, r0, r3
 80091f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091f2:	b10b      	cbz	r3, 80091f8 <__sflush_r+0x48>
 80091f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091f6:	1ac0      	subs	r0, r0, r3
 80091f8:	2300      	movs	r3, #0
 80091fa:	4602      	mov	r2, r0
 80091fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091fe:	6a21      	ldr	r1, [r4, #32]
 8009200:	4628      	mov	r0, r5
 8009202:	47b0      	blx	r6
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	d106      	bne.n	8009218 <__sflush_r+0x68>
 800920a:	6829      	ldr	r1, [r5, #0]
 800920c:	291d      	cmp	r1, #29
 800920e:	d82b      	bhi.n	8009268 <__sflush_r+0xb8>
 8009210:	4a29      	ldr	r2, [pc, #164]	; (80092b8 <__sflush_r+0x108>)
 8009212:	410a      	asrs	r2, r1
 8009214:	07d6      	lsls	r6, r2, #31
 8009216:	d427      	bmi.n	8009268 <__sflush_r+0xb8>
 8009218:	2200      	movs	r2, #0
 800921a:	6062      	str	r2, [r4, #4]
 800921c:	04d9      	lsls	r1, r3, #19
 800921e:	6922      	ldr	r2, [r4, #16]
 8009220:	6022      	str	r2, [r4, #0]
 8009222:	d504      	bpl.n	800922e <__sflush_r+0x7e>
 8009224:	1c42      	adds	r2, r0, #1
 8009226:	d101      	bne.n	800922c <__sflush_r+0x7c>
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	b903      	cbnz	r3, 800922e <__sflush_r+0x7e>
 800922c:	6560      	str	r0, [r4, #84]	; 0x54
 800922e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009230:	602f      	str	r7, [r5, #0]
 8009232:	2900      	cmp	r1, #0
 8009234:	d0c9      	beq.n	80091ca <__sflush_r+0x1a>
 8009236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800923a:	4299      	cmp	r1, r3
 800923c:	d002      	beq.n	8009244 <__sflush_r+0x94>
 800923e:	4628      	mov	r0, r5
 8009240:	f7ff f9e2 	bl	8008608 <_free_r>
 8009244:	2000      	movs	r0, #0
 8009246:	6360      	str	r0, [r4, #52]	; 0x34
 8009248:	e7c0      	b.n	80091cc <__sflush_r+0x1c>
 800924a:	2301      	movs	r3, #1
 800924c:	4628      	mov	r0, r5
 800924e:	47b0      	blx	r6
 8009250:	1c41      	adds	r1, r0, #1
 8009252:	d1c8      	bne.n	80091e6 <__sflush_r+0x36>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0c5      	beq.n	80091e6 <__sflush_r+0x36>
 800925a:	2b1d      	cmp	r3, #29
 800925c:	d001      	beq.n	8009262 <__sflush_r+0xb2>
 800925e:	2b16      	cmp	r3, #22
 8009260:	d101      	bne.n	8009266 <__sflush_r+0xb6>
 8009262:	602f      	str	r7, [r5, #0]
 8009264:	e7b1      	b.n	80091ca <__sflush_r+0x1a>
 8009266:	89a3      	ldrh	r3, [r4, #12]
 8009268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800926c:	81a3      	strh	r3, [r4, #12]
 800926e:	e7ad      	b.n	80091cc <__sflush_r+0x1c>
 8009270:	690f      	ldr	r7, [r1, #16]
 8009272:	2f00      	cmp	r7, #0
 8009274:	d0a9      	beq.n	80091ca <__sflush_r+0x1a>
 8009276:	0793      	lsls	r3, r2, #30
 8009278:	680e      	ldr	r6, [r1, #0]
 800927a:	bf08      	it	eq
 800927c:	694b      	ldreq	r3, [r1, #20]
 800927e:	600f      	str	r7, [r1, #0]
 8009280:	bf18      	it	ne
 8009282:	2300      	movne	r3, #0
 8009284:	eba6 0807 	sub.w	r8, r6, r7
 8009288:	608b      	str	r3, [r1, #8]
 800928a:	f1b8 0f00 	cmp.w	r8, #0
 800928e:	dd9c      	ble.n	80091ca <__sflush_r+0x1a>
 8009290:	6a21      	ldr	r1, [r4, #32]
 8009292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009294:	4643      	mov	r3, r8
 8009296:	463a      	mov	r2, r7
 8009298:	4628      	mov	r0, r5
 800929a:	47b0      	blx	r6
 800929c:	2800      	cmp	r0, #0
 800929e:	dc06      	bgt.n	80092ae <__sflush_r+0xfe>
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092a6:	81a3      	strh	r3, [r4, #12]
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ac:	e78e      	b.n	80091cc <__sflush_r+0x1c>
 80092ae:	4407      	add	r7, r0
 80092b0:	eba8 0800 	sub.w	r8, r8, r0
 80092b4:	e7e9      	b.n	800928a <__sflush_r+0xda>
 80092b6:	bf00      	nop
 80092b8:	dfbffffe 	.word	0xdfbffffe

080092bc <_fflush_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	690b      	ldr	r3, [r1, #16]
 80092c0:	4605      	mov	r5, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	b913      	cbnz	r3, 80092cc <_fflush_r+0x10>
 80092c6:	2500      	movs	r5, #0
 80092c8:	4628      	mov	r0, r5
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	b118      	cbz	r0, 80092d6 <_fflush_r+0x1a>
 80092ce:	6a03      	ldr	r3, [r0, #32]
 80092d0:	b90b      	cbnz	r3, 80092d6 <_fflush_r+0x1a>
 80092d2:	f7fe fa8b 	bl	80077ec <__sinit>
 80092d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0f3      	beq.n	80092c6 <_fflush_r+0xa>
 80092de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092e0:	07d0      	lsls	r0, r2, #31
 80092e2:	d404      	bmi.n	80092ee <_fflush_r+0x32>
 80092e4:	0599      	lsls	r1, r3, #22
 80092e6:	d402      	bmi.n	80092ee <_fflush_r+0x32>
 80092e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ea:	f7fe fb96 	bl	8007a1a <__retarget_lock_acquire_recursive>
 80092ee:	4628      	mov	r0, r5
 80092f0:	4621      	mov	r1, r4
 80092f2:	f7ff ff5d 	bl	80091b0 <__sflush_r>
 80092f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092f8:	07da      	lsls	r2, r3, #31
 80092fa:	4605      	mov	r5, r0
 80092fc:	d4e4      	bmi.n	80092c8 <_fflush_r+0xc>
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	059b      	lsls	r3, r3, #22
 8009302:	d4e1      	bmi.n	80092c8 <_fflush_r+0xc>
 8009304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009306:	f7fe fb89 	bl	8007a1c <__retarget_lock_release_recursive>
 800930a:	e7dd      	b.n	80092c8 <_fflush_r+0xc>

0800930c <memmove>:
 800930c:	4288      	cmp	r0, r1
 800930e:	b510      	push	{r4, lr}
 8009310:	eb01 0402 	add.w	r4, r1, r2
 8009314:	d902      	bls.n	800931c <memmove+0x10>
 8009316:	4284      	cmp	r4, r0
 8009318:	4623      	mov	r3, r4
 800931a:	d807      	bhi.n	800932c <memmove+0x20>
 800931c:	1e43      	subs	r3, r0, #1
 800931e:	42a1      	cmp	r1, r4
 8009320:	d008      	beq.n	8009334 <memmove+0x28>
 8009322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800932a:	e7f8      	b.n	800931e <memmove+0x12>
 800932c:	4402      	add	r2, r0
 800932e:	4601      	mov	r1, r0
 8009330:	428a      	cmp	r2, r1
 8009332:	d100      	bne.n	8009336 <memmove+0x2a>
 8009334:	bd10      	pop	{r4, pc}
 8009336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800933a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800933e:	e7f7      	b.n	8009330 <memmove+0x24>

08009340 <_sbrk_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d06      	ldr	r5, [pc, #24]	; (800935c <_sbrk_r+0x1c>)
 8009344:	2300      	movs	r3, #0
 8009346:	4604      	mov	r4, r0
 8009348:	4608      	mov	r0, r1
 800934a:	602b      	str	r3, [r5, #0]
 800934c:	f7f8 f93e 	bl	80015cc <_sbrk>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d102      	bne.n	800935a <_sbrk_r+0x1a>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	b103      	cbz	r3, 800935a <_sbrk_r+0x1a>
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	bd38      	pop	{r3, r4, r5, pc}
 800935c:	240004a0 	.word	0x240004a0

08009360 <memcpy>:
 8009360:	440a      	add	r2, r1
 8009362:	4291      	cmp	r1, r2
 8009364:	f100 33ff 	add.w	r3, r0, #4294967295
 8009368:	d100      	bne.n	800936c <memcpy+0xc>
 800936a:	4770      	bx	lr
 800936c:	b510      	push	{r4, lr}
 800936e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009376:	4291      	cmp	r1, r2
 8009378:	d1f9      	bne.n	800936e <memcpy+0xe>
 800937a:	bd10      	pop	{r4, pc}

0800937c <__assert_func>:
 800937c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800937e:	4614      	mov	r4, r2
 8009380:	461a      	mov	r2, r3
 8009382:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <__assert_func+0x2c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4605      	mov	r5, r0
 8009388:	68d8      	ldr	r0, [r3, #12]
 800938a:	b14c      	cbz	r4, 80093a0 <__assert_func+0x24>
 800938c:	4b07      	ldr	r3, [pc, #28]	; (80093ac <__assert_func+0x30>)
 800938e:	9100      	str	r1, [sp, #0]
 8009390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009394:	4906      	ldr	r1, [pc, #24]	; (80093b0 <__assert_func+0x34>)
 8009396:	462b      	mov	r3, r5
 8009398:	f000 f872 	bl	8009480 <fiprintf>
 800939c:	f000 f882 	bl	80094a4 <abort>
 80093a0:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <__assert_func+0x38>)
 80093a2:	461c      	mov	r4, r3
 80093a4:	e7f3      	b.n	800938e <__assert_func+0x12>
 80093a6:	bf00      	nop
 80093a8:	24000068 	.word	0x24000068
 80093ac:	08009def 	.word	0x08009def
 80093b0:	08009dfc 	.word	0x08009dfc
 80093b4:	08009e2a 	.word	0x08009e2a

080093b8 <_calloc_r>:
 80093b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ba:	fba1 2402 	umull	r2, r4, r1, r2
 80093be:	b94c      	cbnz	r4, 80093d4 <_calloc_r+0x1c>
 80093c0:	4611      	mov	r1, r2
 80093c2:	9201      	str	r2, [sp, #4]
 80093c4:	f7ff f994 	bl	80086f0 <_malloc_r>
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	4605      	mov	r5, r0
 80093cc:	b930      	cbnz	r0, 80093dc <_calloc_r+0x24>
 80093ce:	4628      	mov	r0, r5
 80093d0:	b003      	add	sp, #12
 80093d2:	bd30      	pop	{r4, r5, pc}
 80093d4:	220c      	movs	r2, #12
 80093d6:	6002      	str	r2, [r0, #0]
 80093d8:	2500      	movs	r5, #0
 80093da:	e7f8      	b.n	80093ce <_calloc_r+0x16>
 80093dc:	4621      	mov	r1, r4
 80093de:	f7fe fa9e 	bl	800791e <memset>
 80093e2:	e7f4      	b.n	80093ce <_calloc_r+0x16>

080093e4 <__ascii_mbtowc>:
 80093e4:	b082      	sub	sp, #8
 80093e6:	b901      	cbnz	r1, 80093ea <__ascii_mbtowc+0x6>
 80093e8:	a901      	add	r1, sp, #4
 80093ea:	b142      	cbz	r2, 80093fe <__ascii_mbtowc+0x1a>
 80093ec:	b14b      	cbz	r3, 8009402 <__ascii_mbtowc+0x1e>
 80093ee:	7813      	ldrb	r3, [r2, #0]
 80093f0:	600b      	str	r3, [r1, #0]
 80093f2:	7812      	ldrb	r2, [r2, #0]
 80093f4:	1e10      	subs	r0, r2, #0
 80093f6:	bf18      	it	ne
 80093f8:	2001      	movne	r0, #1
 80093fa:	b002      	add	sp, #8
 80093fc:	4770      	bx	lr
 80093fe:	4610      	mov	r0, r2
 8009400:	e7fb      	b.n	80093fa <__ascii_mbtowc+0x16>
 8009402:	f06f 0001 	mvn.w	r0, #1
 8009406:	e7f8      	b.n	80093fa <__ascii_mbtowc+0x16>

08009408 <_realloc_r>:
 8009408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940c:	4680      	mov	r8, r0
 800940e:	4614      	mov	r4, r2
 8009410:	460e      	mov	r6, r1
 8009412:	b921      	cbnz	r1, 800941e <_realloc_r+0x16>
 8009414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009418:	4611      	mov	r1, r2
 800941a:	f7ff b969 	b.w	80086f0 <_malloc_r>
 800941e:	b92a      	cbnz	r2, 800942c <_realloc_r+0x24>
 8009420:	f7ff f8f2 	bl	8008608 <_free_r>
 8009424:	4625      	mov	r5, r4
 8009426:	4628      	mov	r0, r5
 8009428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800942c:	f000 f841 	bl	80094b2 <_malloc_usable_size_r>
 8009430:	4284      	cmp	r4, r0
 8009432:	4607      	mov	r7, r0
 8009434:	d802      	bhi.n	800943c <_realloc_r+0x34>
 8009436:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800943a:	d812      	bhi.n	8009462 <_realloc_r+0x5a>
 800943c:	4621      	mov	r1, r4
 800943e:	4640      	mov	r0, r8
 8009440:	f7ff f956 	bl	80086f0 <_malloc_r>
 8009444:	4605      	mov	r5, r0
 8009446:	2800      	cmp	r0, #0
 8009448:	d0ed      	beq.n	8009426 <_realloc_r+0x1e>
 800944a:	42bc      	cmp	r4, r7
 800944c:	4622      	mov	r2, r4
 800944e:	4631      	mov	r1, r6
 8009450:	bf28      	it	cs
 8009452:	463a      	movcs	r2, r7
 8009454:	f7ff ff84 	bl	8009360 <memcpy>
 8009458:	4631      	mov	r1, r6
 800945a:	4640      	mov	r0, r8
 800945c:	f7ff f8d4 	bl	8008608 <_free_r>
 8009460:	e7e1      	b.n	8009426 <_realloc_r+0x1e>
 8009462:	4635      	mov	r5, r6
 8009464:	e7df      	b.n	8009426 <_realloc_r+0x1e>

08009466 <__ascii_wctomb>:
 8009466:	b149      	cbz	r1, 800947c <__ascii_wctomb+0x16>
 8009468:	2aff      	cmp	r2, #255	; 0xff
 800946a:	bf85      	ittet	hi
 800946c:	238a      	movhi	r3, #138	; 0x8a
 800946e:	6003      	strhi	r3, [r0, #0]
 8009470:	700a      	strbls	r2, [r1, #0]
 8009472:	f04f 30ff 	movhi.w	r0, #4294967295
 8009476:	bf98      	it	ls
 8009478:	2001      	movls	r0, #1
 800947a:	4770      	bx	lr
 800947c:	4608      	mov	r0, r1
 800947e:	4770      	bx	lr

08009480 <fiprintf>:
 8009480:	b40e      	push	{r1, r2, r3}
 8009482:	b503      	push	{r0, r1, lr}
 8009484:	4601      	mov	r1, r0
 8009486:	ab03      	add	r3, sp, #12
 8009488:	4805      	ldr	r0, [pc, #20]	; (80094a0 <fiprintf+0x20>)
 800948a:	f853 2b04 	ldr.w	r2, [r3], #4
 800948e:	6800      	ldr	r0, [r0, #0]
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	f000 f83f 	bl	8009514 <_vfiprintf_r>
 8009496:	b002      	add	sp, #8
 8009498:	f85d eb04 	ldr.w	lr, [sp], #4
 800949c:	b003      	add	sp, #12
 800949e:	4770      	bx	lr
 80094a0:	24000068 	.word	0x24000068

080094a4 <abort>:
 80094a4:	b508      	push	{r3, lr}
 80094a6:	2006      	movs	r0, #6
 80094a8:	f000 fa0c 	bl	80098c4 <raise>
 80094ac:	2001      	movs	r0, #1
 80094ae:	f7f8 f815 	bl	80014dc <_exit>

080094b2 <_malloc_usable_size_r>:
 80094b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b6:	1f18      	subs	r0, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bfbc      	itt	lt
 80094bc:	580b      	ldrlt	r3, [r1, r0]
 80094be:	18c0      	addlt	r0, r0, r3
 80094c0:	4770      	bx	lr

080094c2 <__sfputc_r>:
 80094c2:	6893      	ldr	r3, [r2, #8]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	b410      	push	{r4}
 80094ca:	6093      	str	r3, [r2, #8]
 80094cc:	da08      	bge.n	80094e0 <__sfputc_r+0x1e>
 80094ce:	6994      	ldr	r4, [r2, #24]
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	db01      	blt.n	80094d8 <__sfputc_r+0x16>
 80094d4:	290a      	cmp	r1, #10
 80094d6:	d103      	bne.n	80094e0 <__sfputc_r+0x1e>
 80094d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094dc:	f000 b934 	b.w	8009748 <__swbuf_r>
 80094e0:	6813      	ldr	r3, [r2, #0]
 80094e2:	1c58      	adds	r0, r3, #1
 80094e4:	6010      	str	r0, [r2, #0]
 80094e6:	7019      	strb	r1, [r3, #0]
 80094e8:	4608      	mov	r0, r1
 80094ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <__sfputs_r>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	4606      	mov	r6, r0
 80094f4:	460f      	mov	r7, r1
 80094f6:	4614      	mov	r4, r2
 80094f8:	18d5      	adds	r5, r2, r3
 80094fa:	42ac      	cmp	r4, r5
 80094fc:	d101      	bne.n	8009502 <__sfputs_r+0x12>
 80094fe:	2000      	movs	r0, #0
 8009500:	e007      	b.n	8009512 <__sfputs_r+0x22>
 8009502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009506:	463a      	mov	r2, r7
 8009508:	4630      	mov	r0, r6
 800950a:	f7ff ffda 	bl	80094c2 <__sfputc_r>
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d1f3      	bne.n	80094fa <__sfputs_r+0xa>
 8009512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009514 <_vfiprintf_r>:
 8009514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	460d      	mov	r5, r1
 800951a:	b09d      	sub	sp, #116	; 0x74
 800951c:	4614      	mov	r4, r2
 800951e:	4698      	mov	r8, r3
 8009520:	4606      	mov	r6, r0
 8009522:	b118      	cbz	r0, 800952c <_vfiprintf_r+0x18>
 8009524:	6a03      	ldr	r3, [r0, #32]
 8009526:	b90b      	cbnz	r3, 800952c <_vfiprintf_r+0x18>
 8009528:	f7fe f960 	bl	80077ec <__sinit>
 800952c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800952e:	07d9      	lsls	r1, r3, #31
 8009530:	d405      	bmi.n	800953e <_vfiprintf_r+0x2a>
 8009532:	89ab      	ldrh	r3, [r5, #12]
 8009534:	059a      	lsls	r2, r3, #22
 8009536:	d402      	bmi.n	800953e <_vfiprintf_r+0x2a>
 8009538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800953a:	f7fe fa6e 	bl	8007a1a <__retarget_lock_acquire_recursive>
 800953e:	89ab      	ldrh	r3, [r5, #12]
 8009540:	071b      	lsls	r3, r3, #28
 8009542:	d501      	bpl.n	8009548 <_vfiprintf_r+0x34>
 8009544:	692b      	ldr	r3, [r5, #16]
 8009546:	b99b      	cbnz	r3, 8009570 <_vfiprintf_r+0x5c>
 8009548:	4629      	mov	r1, r5
 800954a:	4630      	mov	r0, r6
 800954c:	f000 f93a 	bl	80097c4 <__swsetup_r>
 8009550:	b170      	cbz	r0, 8009570 <_vfiprintf_r+0x5c>
 8009552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009554:	07dc      	lsls	r4, r3, #31
 8009556:	d504      	bpl.n	8009562 <_vfiprintf_r+0x4e>
 8009558:	f04f 30ff 	mov.w	r0, #4294967295
 800955c:	b01d      	add	sp, #116	; 0x74
 800955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009562:	89ab      	ldrh	r3, [r5, #12]
 8009564:	0598      	lsls	r0, r3, #22
 8009566:	d4f7      	bmi.n	8009558 <_vfiprintf_r+0x44>
 8009568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800956a:	f7fe fa57 	bl	8007a1c <__retarget_lock_release_recursive>
 800956e:	e7f3      	b.n	8009558 <_vfiprintf_r+0x44>
 8009570:	2300      	movs	r3, #0
 8009572:	9309      	str	r3, [sp, #36]	; 0x24
 8009574:	2320      	movs	r3, #32
 8009576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800957a:	f8cd 800c 	str.w	r8, [sp, #12]
 800957e:	2330      	movs	r3, #48	; 0x30
 8009580:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009734 <_vfiprintf_r+0x220>
 8009584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009588:	f04f 0901 	mov.w	r9, #1
 800958c:	4623      	mov	r3, r4
 800958e:	469a      	mov	sl, r3
 8009590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009594:	b10a      	cbz	r2, 800959a <_vfiprintf_r+0x86>
 8009596:	2a25      	cmp	r2, #37	; 0x25
 8009598:	d1f9      	bne.n	800958e <_vfiprintf_r+0x7a>
 800959a:	ebba 0b04 	subs.w	fp, sl, r4
 800959e:	d00b      	beq.n	80095b8 <_vfiprintf_r+0xa4>
 80095a0:	465b      	mov	r3, fp
 80095a2:	4622      	mov	r2, r4
 80095a4:	4629      	mov	r1, r5
 80095a6:	4630      	mov	r0, r6
 80095a8:	f7ff ffa2 	bl	80094f0 <__sfputs_r>
 80095ac:	3001      	adds	r0, #1
 80095ae:	f000 80a9 	beq.w	8009704 <_vfiprintf_r+0x1f0>
 80095b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b4:	445a      	add	r2, fp
 80095b6:	9209      	str	r2, [sp, #36]	; 0x24
 80095b8:	f89a 3000 	ldrb.w	r3, [sl]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 80a1 	beq.w	8009704 <_vfiprintf_r+0x1f0>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f04f 32ff 	mov.w	r2, #4294967295
 80095c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095cc:	f10a 0a01 	add.w	sl, sl, #1
 80095d0:	9304      	str	r3, [sp, #16]
 80095d2:	9307      	str	r3, [sp, #28]
 80095d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095d8:	931a      	str	r3, [sp, #104]	; 0x68
 80095da:	4654      	mov	r4, sl
 80095dc:	2205      	movs	r2, #5
 80095de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e2:	4854      	ldr	r0, [pc, #336]	; (8009734 <_vfiprintf_r+0x220>)
 80095e4:	f7f6 fe84 	bl	80002f0 <memchr>
 80095e8:	9a04      	ldr	r2, [sp, #16]
 80095ea:	b9d8      	cbnz	r0, 8009624 <_vfiprintf_r+0x110>
 80095ec:	06d1      	lsls	r1, r2, #27
 80095ee:	bf44      	itt	mi
 80095f0:	2320      	movmi	r3, #32
 80095f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095f6:	0713      	lsls	r3, r2, #28
 80095f8:	bf44      	itt	mi
 80095fa:	232b      	movmi	r3, #43	; 0x2b
 80095fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009600:	f89a 3000 	ldrb.w	r3, [sl]
 8009604:	2b2a      	cmp	r3, #42	; 0x2a
 8009606:	d015      	beq.n	8009634 <_vfiprintf_r+0x120>
 8009608:	9a07      	ldr	r2, [sp, #28]
 800960a:	4654      	mov	r4, sl
 800960c:	2000      	movs	r0, #0
 800960e:	f04f 0c0a 	mov.w	ip, #10
 8009612:	4621      	mov	r1, r4
 8009614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009618:	3b30      	subs	r3, #48	; 0x30
 800961a:	2b09      	cmp	r3, #9
 800961c:	d94d      	bls.n	80096ba <_vfiprintf_r+0x1a6>
 800961e:	b1b0      	cbz	r0, 800964e <_vfiprintf_r+0x13a>
 8009620:	9207      	str	r2, [sp, #28]
 8009622:	e014      	b.n	800964e <_vfiprintf_r+0x13a>
 8009624:	eba0 0308 	sub.w	r3, r0, r8
 8009628:	fa09 f303 	lsl.w	r3, r9, r3
 800962c:	4313      	orrs	r3, r2
 800962e:	9304      	str	r3, [sp, #16]
 8009630:	46a2      	mov	sl, r4
 8009632:	e7d2      	b.n	80095da <_vfiprintf_r+0xc6>
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	1d19      	adds	r1, r3, #4
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	9103      	str	r1, [sp, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	bfbb      	ittet	lt
 8009640:	425b      	neglt	r3, r3
 8009642:	f042 0202 	orrlt.w	r2, r2, #2
 8009646:	9307      	strge	r3, [sp, #28]
 8009648:	9307      	strlt	r3, [sp, #28]
 800964a:	bfb8      	it	lt
 800964c:	9204      	strlt	r2, [sp, #16]
 800964e:	7823      	ldrb	r3, [r4, #0]
 8009650:	2b2e      	cmp	r3, #46	; 0x2e
 8009652:	d10c      	bne.n	800966e <_vfiprintf_r+0x15a>
 8009654:	7863      	ldrb	r3, [r4, #1]
 8009656:	2b2a      	cmp	r3, #42	; 0x2a
 8009658:	d134      	bne.n	80096c4 <_vfiprintf_r+0x1b0>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	1d1a      	adds	r2, r3, #4
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	9203      	str	r2, [sp, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	bfb8      	it	lt
 8009666:	f04f 33ff 	movlt.w	r3, #4294967295
 800966a:	3402      	adds	r4, #2
 800966c:	9305      	str	r3, [sp, #20]
 800966e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009744 <_vfiprintf_r+0x230>
 8009672:	7821      	ldrb	r1, [r4, #0]
 8009674:	2203      	movs	r2, #3
 8009676:	4650      	mov	r0, sl
 8009678:	f7f6 fe3a 	bl	80002f0 <memchr>
 800967c:	b138      	cbz	r0, 800968e <_vfiprintf_r+0x17a>
 800967e:	9b04      	ldr	r3, [sp, #16]
 8009680:	eba0 000a 	sub.w	r0, r0, sl
 8009684:	2240      	movs	r2, #64	; 0x40
 8009686:	4082      	lsls	r2, r0
 8009688:	4313      	orrs	r3, r2
 800968a:	3401      	adds	r4, #1
 800968c:	9304      	str	r3, [sp, #16]
 800968e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009692:	4829      	ldr	r0, [pc, #164]	; (8009738 <_vfiprintf_r+0x224>)
 8009694:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009698:	2206      	movs	r2, #6
 800969a:	f7f6 fe29 	bl	80002f0 <memchr>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d03f      	beq.n	8009722 <_vfiprintf_r+0x20e>
 80096a2:	4b26      	ldr	r3, [pc, #152]	; (800973c <_vfiprintf_r+0x228>)
 80096a4:	bb1b      	cbnz	r3, 80096ee <_vfiprintf_r+0x1da>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	3307      	adds	r3, #7
 80096aa:	f023 0307 	bic.w	r3, r3, #7
 80096ae:	3308      	adds	r3, #8
 80096b0:	9303      	str	r3, [sp, #12]
 80096b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b4:	443b      	add	r3, r7
 80096b6:	9309      	str	r3, [sp, #36]	; 0x24
 80096b8:	e768      	b.n	800958c <_vfiprintf_r+0x78>
 80096ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80096be:	460c      	mov	r4, r1
 80096c0:	2001      	movs	r0, #1
 80096c2:	e7a6      	b.n	8009612 <_vfiprintf_r+0xfe>
 80096c4:	2300      	movs	r3, #0
 80096c6:	3401      	adds	r4, #1
 80096c8:	9305      	str	r3, [sp, #20]
 80096ca:	4619      	mov	r1, r3
 80096cc:	f04f 0c0a 	mov.w	ip, #10
 80096d0:	4620      	mov	r0, r4
 80096d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096d6:	3a30      	subs	r2, #48	; 0x30
 80096d8:	2a09      	cmp	r2, #9
 80096da:	d903      	bls.n	80096e4 <_vfiprintf_r+0x1d0>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0c6      	beq.n	800966e <_vfiprintf_r+0x15a>
 80096e0:	9105      	str	r1, [sp, #20]
 80096e2:	e7c4      	b.n	800966e <_vfiprintf_r+0x15a>
 80096e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80096e8:	4604      	mov	r4, r0
 80096ea:	2301      	movs	r3, #1
 80096ec:	e7f0      	b.n	80096d0 <_vfiprintf_r+0x1bc>
 80096ee:	ab03      	add	r3, sp, #12
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	462a      	mov	r2, r5
 80096f4:	4b12      	ldr	r3, [pc, #72]	; (8009740 <_vfiprintf_r+0x22c>)
 80096f6:	a904      	add	r1, sp, #16
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7fd fc41 	bl	8006f80 <_printf_float>
 80096fe:	4607      	mov	r7, r0
 8009700:	1c78      	adds	r0, r7, #1
 8009702:	d1d6      	bne.n	80096b2 <_vfiprintf_r+0x19e>
 8009704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009706:	07d9      	lsls	r1, r3, #31
 8009708:	d405      	bmi.n	8009716 <_vfiprintf_r+0x202>
 800970a:	89ab      	ldrh	r3, [r5, #12]
 800970c:	059a      	lsls	r2, r3, #22
 800970e:	d402      	bmi.n	8009716 <_vfiprintf_r+0x202>
 8009710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009712:	f7fe f983 	bl	8007a1c <__retarget_lock_release_recursive>
 8009716:	89ab      	ldrh	r3, [r5, #12]
 8009718:	065b      	lsls	r3, r3, #25
 800971a:	f53f af1d 	bmi.w	8009558 <_vfiprintf_r+0x44>
 800971e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009720:	e71c      	b.n	800955c <_vfiprintf_r+0x48>
 8009722:	ab03      	add	r3, sp, #12
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	462a      	mov	r2, r5
 8009728:	4b05      	ldr	r3, [pc, #20]	; (8009740 <_vfiprintf_r+0x22c>)
 800972a:	a904      	add	r1, sp, #16
 800972c:	4630      	mov	r0, r6
 800972e:	f7fd feaf 	bl	8007490 <_printf_i>
 8009732:	e7e4      	b.n	80096fe <_vfiprintf_r+0x1ea>
 8009734:	08009dd4 	.word	0x08009dd4
 8009738:	08009dde 	.word	0x08009dde
 800973c:	08006f81 	.word	0x08006f81
 8009740:	080094f1 	.word	0x080094f1
 8009744:	08009dda 	.word	0x08009dda

08009748 <__swbuf_r>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	460e      	mov	r6, r1
 800974c:	4614      	mov	r4, r2
 800974e:	4605      	mov	r5, r0
 8009750:	b118      	cbz	r0, 800975a <__swbuf_r+0x12>
 8009752:	6a03      	ldr	r3, [r0, #32]
 8009754:	b90b      	cbnz	r3, 800975a <__swbuf_r+0x12>
 8009756:	f7fe f849 	bl	80077ec <__sinit>
 800975a:	69a3      	ldr	r3, [r4, #24]
 800975c:	60a3      	str	r3, [r4, #8]
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	071a      	lsls	r2, r3, #28
 8009762:	d525      	bpl.n	80097b0 <__swbuf_r+0x68>
 8009764:	6923      	ldr	r3, [r4, #16]
 8009766:	b31b      	cbz	r3, 80097b0 <__swbuf_r+0x68>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	6922      	ldr	r2, [r4, #16]
 800976c:	1a98      	subs	r0, r3, r2
 800976e:	6963      	ldr	r3, [r4, #20]
 8009770:	b2f6      	uxtb	r6, r6
 8009772:	4283      	cmp	r3, r0
 8009774:	4637      	mov	r7, r6
 8009776:	dc04      	bgt.n	8009782 <__swbuf_r+0x3a>
 8009778:	4621      	mov	r1, r4
 800977a:	4628      	mov	r0, r5
 800977c:	f7ff fd9e 	bl	80092bc <_fflush_r>
 8009780:	b9e0      	cbnz	r0, 80097bc <__swbuf_r+0x74>
 8009782:	68a3      	ldr	r3, [r4, #8]
 8009784:	3b01      	subs	r3, #1
 8009786:	60a3      	str	r3, [r4, #8]
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	6022      	str	r2, [r4, #0]
 800978e:	701e      	strb	r6, [r3, #0]
 8009790:	6962      	ldr	r2, [r4, #20]
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	429a      	cmp	r2, r3
 8009796:	d004      	beq.n	80097a2 <__swbuf_r+0x5a>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	07db      	lsls	r3, r3, #31
 800979c:	d506      	bpl.n	80097ac <__swbuf_r+0x64>
 800979e:	2e0a      	cmp	r6, #10
 80097a0:	d104      	bne.n	80097ac <__swbuf_r+0x64>
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f7ff fd89 	bl	80092bc <_fflush_r>
 80097aa:	b938      	cbnz	r0, 80097bc <__swbuf_r+0x74>
 80097ac:	4638      	mov	r0, r7
 80097ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b0:	4621      	mov	r1, r4
 80097b2:	4628      	mov	r0, r5
 80097b4:	f000 f806 	bl	80097c4 <__swsetup_r>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d0d5      	beq.n	8009768 <__swbuf_r+0x20>
 80097bc:	f04f 37ff 	mov.w	r7, #4294967295
 80097c0:	e7f4      	b.n	80097ac <__swbuf_r+0x64>
	...

080097c4 <__swsetup_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4b2a      	ldr	r3, [pc, #168]	; (8009870 <__swsetup_r+0xac>)
 80097c8:	4605      	mov	r5, r0
 80097ca:	6818      	ldr	r0, [r3, #0]
 80097cc:	460c      	mov	r4, r1
 80097ce:	b118      	cbz	r0, 80097d8 <__swsetup_r+0x14>
 80097d0:	6a03      	ldr	r3, [r0, #32]
 80097d2:	b90b      	cbnz	r3, 80097d8 <__swsetup_r+0x14>
 80097d4:	f7fe f80a 	bl	80077ec <__sinit>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097de:	0718      	lsls	r0, r3, #28
 80097e0:	d422      	bmi.n	8009828 <__swsetup_r+0x64>
 80097e2:	06d9      	lsls	r1, r3, #27
 80097e4:	d407      	bmi.n	80097f6 <__swsetup_r+0x32>
 80097e6:	2309      	movs	r3, #9
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295
 80097f4:	e034      	b.n	8009860 <__swsetup_r+0x9c>
 80097f6:	0758      	lsls	r0, r3, #29
 80097f8:	d512      	bpl.n	8009820 <__swsetup_r+0x5c>
 80097fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097fc:	b141      	cbz	r1, 8009810 <__swsetup_r+0x4c>
 80097fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009802:	4299      	cmp	r1, r3
 8009804:	d002      	beq.n	800980c <__swsetup_r+0x48>
 8009806:	4628      	mov	r0, r5
 8009808:	f7fe fefe 	bl	8008608 <_free_r>
 800980c:	2300      	movs	r3, #0
 800980e:	6363      	str	r3, [r4, #52]	; 0x34
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	2300      	movs	r3, #0
 800981a:	6063      	str	r3, [r4, #4]
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	6023      	str	r3, [r4, #0]
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	f043 0308 	orr.w	r3, r3, #8
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	6923      	ldr	r3, [r4, #16]
 800982a:	b94b      	cbnz	r3, 8009840 <__swsetup_r+0x7c>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009836:	d003      	beq.n	8009840 <__swsetup_r+0x7c>
 8009838:	4621      	mov	r1, r4
 800983a:	4628      	mov	r0, r5
 800983c:	f000 f884 	bl	8009948 <__smakebuf_r>
 8009840:	89a0      	ldrh	r0, [r4, #12]
 8009842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009846:	f010 0301 	ands.w	r3, r0, #1
 800984a:	d00a      	beq.n	8009862 <__swsetup_r+0x9e>
 800984c:	2300      	movs	r3, #0
 800984e:	60a3      	str	r3, [r4, #8]
 8009850:	6963      	ldr	r3, [r4, #20]
 8009852:	425b      	negs	r3, r3
 8009854:	61a3      	str	r3, [r4, #24]
 8009856:	6923      	ldr	r3, [r4, #16]
 8009858:	b943      	cbnz	r3, 800986c <__swsetup_r+0xa8>
 800985a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800985e:	d1c4      	bne.n	80097ea <__swsetup_r+0x26>
 8009860:	bd38      	pop	{r3, r4, r5, pc}
 8009862:	0781      	lsls	r1, r0, #30
 8009864:	bf58      	it	pl
 8009866:	6963      	ldrpl	r3, [r4, #20]
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	e7f4      	b.n	8009856 <__swsetup_r+0x92>
 800986c:	2000      	movs	r0, #0
 800986e:	e7f7      	b.n	8009860 <__swsetup_r+0x9c>
 8009870:	24000068 	.word	0x24000068

08009874 <_raise_r>:
 8009874:	291f      	cmp	r1, #31
 8009876:	b538      	push	{r3, r4, r5, lr}
 8009878:	4604      	mov	r4, r0
 800987a:	460d      	mov	r5, r1
 800987c:	d904      	bls.n	8009888 <_raise_r+0x14>
 800987e:	2316      	movs	r3, #22
 8009880:	6003      	str	r3, [r0, #0]
 8009882:	f04f 30ff 	mov.w	r0, #4294967295
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800988a:	b112      	cbz	r2, 8009892 <_raise_r+0x1e>
 800988c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009890:	b94b      	cbnz	r3, 80098a6 <_raise_r+0x32>
 8009892:	4620      	mov	r0, r4
 8009894:	f000 f830 	bl	80098f8 <_getpid_r>
 8009898:	462a      	mov	r2, r5
 800989a:	4601      	mov	r1, r0
 800989c:	4620      	mov	r0, r4
 800989e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098a2:	f000 b817 	b.w	80098d4 <_kill_r>
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d00a      	beq.n	80098c0 <_raise_r+0x4c>
 80098aa:	1c59      	adds	r1, r3, #1
 80098ac:	d103      	bne.n	80098b6 <_raise_r+0x42>
 80098ae:	2316      	movs	r3, #22
 80098b0:	6003      	str	r3, [r0, #0]
 80098b2:	2001      	movs	r0, #1
 80098b4:	e7e7      	b.n	8009886 <_raise_r+0x12>
 80098b6:	2400      	movs	r4, #0
 80098b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098bc:	4628      	mov	r0, r5
 80098be:	4798      	blx	r3
 80098c0:	2000      	movs	r0, #0
 80098c2:	e7e0      	b.n	8009886 <_raise_r+0x12>

080098c4 <raise>:
 80098c4:	4b02      	ldr	r3, [pc, #8]	; (80098d0 <raise+0xc>)
 80098c6:	4601      	mov	r1, r0
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	f7ff bfd3 	b.w	8009874 <_raise_r>
 80098ce:	bf00      	nop
 80098d0:	24000068 	.word	0x24000068

080098d4 <_kill_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d07      	ldr	r5, [pc, #28]	; (80098f4 <_kill_r+0x20>)
 80098d8:	2300      	movs	r3, #0
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	4611      	mov	r1, r2
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	f7f7 fdeb 	bl	80014bc <_kill>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d102      	bne.n	80098f0 <_kill_r+0x1c>
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	b103      	cbz	r3, 80098f0 <_kill_r+0x1c>
 80098ee:	6023      	str	r3, [r4, #0]
 80098f0:	bd38      	pop	{r3, r4, r5, pc}
 80098f2:	bf00      	nop
 80098f4:	240004a0 	.word	0x240004a0

080098f8 <_getpid_r>:
 80098f8:	f7f7 bdd8 	b.w	80014ac <_getpid>

080098fc <__swhatbuf_r>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	460c      	mov	r4, r1
 8009900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009904:	2900      	cmp	r1, #0
 8009906:	b096      	sub	sp, #88	; 0x58
 8009908:	4615      	mov	r5, r2
 800990a:	461e      	mov	r6, r3
 800990c:	da0d      	bge.n	800992a <__swhatbuf_r+0x2e>
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009914:	f04f 0100 	mov.w	r1, #0
 8009918:	bf0c      	ite	eq
 800991a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800991e:	2340      	movne	r3, #64	; 0x40
 8009920:	2000      	movs	r0, #0
 8009922:	6031      	str	r1, [r6, #0]
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	b016      	add	sp, #88	; 0x58
 8009928:	bd70      	pop	{r4, r5, r6, pc}
 800992a:	466a      	mov	r2, sp
 800992c:	f000 f848 	bl	80099c0 <_fstat_r>
 8009930:	2800      	cmp	r0, #0
 8009932:	dbec      	blt.n	800990e <__swhatbuf_r+0x12>
 8009934:	9901      	ldr	r1, [sp, #4]
 8009936:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800993a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800993e:	4259      	negs	r1, r3
 8009940:	4159      	adcs	r1, r3
 8009942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009946:	e7eb      	b.n	8009920 <__swhatbuf_r+0x24>

08009948 <__smakebuf_r>:
 8009948:	898b      	ldrh	r3, [r1, #12]
 800994a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800994c:	079d      	lsls	r5, r3, #30
 800994e:	4606      	mov	r6, r0
 8009950:	460c      	mov	r4, r1
 8009952:	d507      	bpl.n	8009964 <__smakebuf_r+0x1c>
 8009954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	2301      	movs	r3, #1
 800995e:	6163      	str	r3, [r4, #20]
 8009960:	b002      	add	sp, #8
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	ab01      	add	r3, sp, #4
 8009966:	466a      	mov	r2, sp
 8009968:	f7ff ffc8 	bl	80098fc <__swhatbuf_r>
 800996c:	9900      	ldr	r1, [sp, #0]
 800996e:	4605      	mov	r5, r0
 8009970:	4630      	mov	r0, r6
 8009972:	f7fe febd 	bl	80086f0 <_malloc_r>
 8009976:	b948      	cbnz	r0, 800998c <__smakebuf_r+0x44>
 8009978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997c:	059a      	lsls	r2, r3, #22
 800997e:	d4ef      	bmi.n	8009960 <__smakebuf_r+0x18>
 8009980:	f023 0303 	bic.w	r3, r3, #3
 8009984:	f043 0302 	orr.w	r3, r3, #2
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	e7e3      	b.n	8009954 <__smakebuf_r+0xc>
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	6020      	str	r0, [r4, #0]
 8009990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009994:	81a3      	strh	r3, [r4, #12]
 8009996:	9b00      	ldr	r3, [sp, #0]
 8009998:	6163      	str	r3, [r4, #20]
 800999a:	9b01      	ldr	r3, [sp, #4]
 800999c:	6120      	str	r0, [r4, #16]
 800999e:	b15b      	cbz	r3, 80099b8 <__smakebuf_r+0x70>
 80099a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a4:	4630      	mov	r0, r6
 80099a6:	f000 f81d 	bl	80099e4 <_isatty_r>
 80099aa:	b128      	cbz	r0, 80099b8 <__smakebuf_r+0x70>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	f023 0303 	bic.w	r3, r3, #3
 80099b2:	f043 0301 	orr.w	r3, r3, #1
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	431d      	orrs	r5, r3
 80099bc:	81a5      	strh	r5, [r4, #12]
 80099be:	e7cf      	b.n	8009960 <__smakebuf_r+0x18>

080099c0 <_fstat_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d07      	ldr	r5, [pc, #28]	; (80099e0 <_fstat_r+0x20>)
 80099c4:	2300      	movs	r3, #0
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	602b      	str	r3, [r5, #0]
 80099ce:	f7f7 fdd4 	bl	800157a <_fstat>
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	d102      	bne.n	80099dc <_fstat_r+0x1c>
 80099d6:	682b      	ldr	r3, [r5, #0]
 80099d8:	b103      	cbz	r3, 80099dc <_fstat_r+0x1c>
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	bd38      	pop	{r3, r4, r5, pc}
 80099de:	bf00      	nop
 80099e0:	240004a0 	.word	0x240004a0

080099e4 <_isatty_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d06      	ldr	r5, [pc, #24]	; (8009a00 <_isatty_r+0x1c>)
 80099e8:	2300      	movs	r3, #0
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	f7f7 fdd3 	bl	800159a <_isatty>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_isatty_r+0x1a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_isatty_r+0x1a>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	240004a0 	.word	0x240004a0

08009a04 <_init>:
 8009a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a06:	bf00      	nop
 8009a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0a:	bc08      	pop	{r3}
 8009a0c:	469e      	mov	lr, r3
 8009a0e:	4770      	bx	lr

08009a10 <_fini>:
 8009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a12:	bf00      	nop
 8009a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a16:	bc08      	pop	{r3}
 8009a18:	469e      	mov	lr, r3
 8009a1a:	4770      	bx	lr
