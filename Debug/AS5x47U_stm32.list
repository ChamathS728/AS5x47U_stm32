
AS5x47U_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08009f88  08009f88  00019f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a33c  0800a33c  0001a33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a344  0800a344  0001a344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a348  0800a348  0001a348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  0800a34c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002fc  240001d8  0800a524  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240004d4  0800a524  000204d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017b41  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002d47  00000000  00000000  00037d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001380  00000000  00000000  0003aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f2e  00000000  00000000  0003be58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032712  00000000  00000000  0003cd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019a6b  00000000  00000000  0006f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014609b  00000000  00000000  00088f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006250  00000000  00000000  001cefa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001d51f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009f6c 	.word	0x08009f6c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	08009f6c 	.word	0x08009f6c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <AS5x47U_init>:

#include "AS5x47U.h"


/* Initialisation Functions */
HAL_StatusTypeDef AS5x47U_init(AS5x47U* enc_ptr, SPI_HandleTypeDef* hspi, GPIO_TypeDef* enc_CS_port, uint16_t enc_CS_pin, CRC_HandleTypeDef* hcrc) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	807b      	strh	r3, [r7, #2]

    // SPI initialisation
    enc_ptr->hspi = hspi;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	601a      	str	r2, [r3, #0]
    enc_ptr->CS_port = enc_CS_port;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	609a      	str	r2, [r3, #8]
    enc_ptr->CS_pin = enc_CS_pin;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	887a      	ldrh	r2, [r7, #2]
 80006ba:	819a      	strh	r2, [r3, #12]

    // Configuration information
    // enc_ptr->rxBuffer[3] = {0,0,0};    // NOTE - 3 bytes in length for 24 bit transactions specifically
    enc_ptr->rxBuffer16 = 0;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2200      	movs	r2, #0
 80006c0:	81da      	strh	r2, [r3, #14]

    // Actual data stored away
    enc_ptr->velocity = 0;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f04f 0200 	mov.w	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
    enc_ptr->angle_comp = 0.21;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <AS5x47U_init+0x80>)
 80006ce:	619a      	str	r2, [r3, #24]
    enc_ptr->angle_uncomp = 0;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
    enc_ptr->CORDIC_mag = 0;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2200      	movs	r2, #0
 80006dc:	841a      	strh	r2, [r3, #32]

    // Calibration information
    
    // Crc value
    enc_ptr->last_crc = 0; // 0xC4; initial value for the CRC
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
    enc_ptr->crcPoly = 29;   // 0x1D; CRC polynomial = 0x1D = 11101   
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	221d      	movs	r2, #29
 80006e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


    // Error register
    enc_ptr->err_reg = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    enc_ptr->warningBit = 0;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    enc_ptr->errorBit = 0;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
    enc_ptr->hcrc = hcrc;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	69ba      	ldr	r2, [r7, #24]
 8000708:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    // Create the CRC table
    AS5x47U_calcCRCTable(enc_ptr);
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f000 f95d 	bl	80009cc <AS5x47U_calcCRCTable>

    return HAL_OK;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	3e570a3d 	.word	0x3e570a3d

08000720 <AS5x47U_readPositionDAE>:

/* Data Acquistion Functions */
HAL_StatusTypeDef AS5x47U_readPositionDAE(AS5x47U* enc_ptr) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    // Initialise variables
    uint16_t posRaw;

    // Read the angle compensated register
    // HAL_StatusTypeDef result = AS5x47U_readRegister(enc_ptr, ANGLECOM, &posRaw);
    HAL_StatusTypeDef result = AS5x47U_readRegister(enc_ptr, ANGLECOM, &posRaw);
 8000728:	f107 030a 	add.w	r3, r7, #10
 800072c:	461a      	mov	r2, r3
 800072e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f85a 	bl	80007ec <AS5x47U_readRegister>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]

    if (enc_ptr->warningBit || enc_ptr->errorBit) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8000742:	2b00      	cmp	r3, #0
 8000744:	d104      	bne.n	8000750 <AS5x47U_readPositionDAE+0x30>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <AS5x47U_readPositionDAE+0x36>
    	// Either warning or error bit set; check the error register
    	AS5x47U_readERRFL(enc_ptr);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f829 	bl	80007a8 <AS5x47U_readERRFL>
    }

    if (result != HAL_OK) {
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <AS5x47U_readPositionDAE+0x40>
        return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e017      	b.n	8000790 <AS5x47U_readPositionDAE+0x70>
    }

    // Convert posRaw into int16_t -> casting should work
    int16_t temp = (int16_t) posRaw;
 8000760:	897b      	ldrh	r3, [r7, #10]
 8000762:	81bb      	strh	r3, [r7, #12]
    enc_ptr->angle_comp = (float) temp/16384. * 360.;
 8000764:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000770:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000774:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000798 <AS5x47U_readPositionDAE+0x78>
 8000778:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800077c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80007a0 <AS5x47U_readPositionDAE+0x80>
 8000780:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000784:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	edc3 7a06 	vstr	s15, [r3, #24]


    return result;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	00000000 	.word	0x00000000
 800079c:	40d00000 	.word	0x40d00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	40768000 	.word	0x40768000

080007a8 <AS5x47U_readERRFL>:


    return result;    
}

HAL_StatusTypeDef AS5x47U_readERRFL(AS5x47U* enc_ptr) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    // Initialise variables
    uint16_t temp;

    // Read error flag register
    HAL_StatusTypeDef result = AS5x47U_readRegister(enc_ptr, ERRFL, &temp);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	461a      	mov	r2, r3
 80007b6:	2101      	movs	r1, #1
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 f817 	bl	80007ec <AS5x47U_readRegister>
 80007be:	4603      	mov	r3, r0
 80007c0:	73fb      	strb	r3, [r7, #15]

    // Get the 8 bits ( [16:8] ) that matter
    uint8_t error_flag = temp >> 8;
 80007c2:	89bb      	ldrh	r3, [r7, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	73bb      	strb	r3, [r7, #14]

    // Store them in the enc_ptr instance
    enc_ptr->err_reg = error_flag;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7bba      	ldrb	r2, [r7, #14]
 80007ce:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

    // Reset the error and warning bits
    enc_ptr->warningBit = 0;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	enc_ptr->errorBit = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

    return result;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <AS5x47U_readRegister>:


/* Low Level Functions */
// NOTE - SPI commands here work with 24bit frames for CRC 8bit checks + we don't need the speed of 16bit frames
HAL_StatusTypeDef AS5x47U_readRegister(AS5x47U* enc_ptr, uint16_t reg_addr, uint16_t* output) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	460b      	mov	r3, r1
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	817b      	strh	r3, [r7, #10]
        Bits 21:8 to store the register address (14 bits)
        Bits 7:0 has the CRC that we send across


*/
    HAL_StatusTypeDef result = HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Set up transmission buffer
    uint8_t txBuff[3]; // 24 bit transactions = 3 * 8 = 3 bytes

    // Set the 15th bit (bit 14) to 1 for read; the 16th (bit 15) bit is already 0
    uint16_t tempUpper = reg_addr | (1 << 14); 
 8000800:	897b      	ldrh	r3, [r7, #10]
 8000802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000806:	84bb      	strh	r3, [r7, #36]	; 0x24
            Bits 13 to 0 contain the address

        crc:
            Bits 7 to 0 here are all part of the crc
    */
    txBuff[0] = (uint8_t) (tempUpper >> 8);  // shift down by 8 bits to get the upper 8 bits
 8000808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800080a:	0a1b      	lsrs	r3, r3, #8
 800080c:	b29b      	uxth	r3, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	753b      	strb	r3, [r7, #20]
    txBuff[1] = (uint8_t) (tempUpper % 256); // Modulo by 2^8 to get the lower 8 bits 
 8000812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000814:	b2db      	uxtb	r3, r3
 8000816:	757b      	strb	r3, [r7, #21]

    uint8_t tempBuff[2] = {txBuff[0], txBuff[1]};
 8000818:	7d3b      	ldrb	r3, [r7, #20]
 800081a:	743b      	strb	r3, [r7, #16]
 800081c:	7d7b      	ldrb	r3, [r7, #21]
 800081e:	747b      	strb	r3, [r7, #17]



    // Make temporary variable containing the message for CRC calculation
    enc_ptr->last_crc = HAL_CRC_Accumulate(enc_ptr->hcrc, (uint32_t*) tempBuff, sizeof(tempBuff)/sizeof(uint8_t));
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000826:	f107 0110 	add.w	r1, r7, #16
 800082a:	2202      	movs	r2, #2
 800082c:	4618      	mov	r0, r3
 800082e:	f001 f8cd 	bl	80019cc <HAL_CRC_Accumulate>
 8000832:	4602      	mov	r2, r0
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
    // enc_ptr->last_crc = HAL_CRC_Calculate(enc_ptr->hcrc, (uint32_t*) tempBuff, sizeof(tempBuff)/sizeof(uint8_t));
    // HAL_StatusTypeDef result = AS5x47U_calcCRC(enc_ptr, tempUpper);
    // AS5x47U_calcCRC_new(enc_ptr, tempBuff, 2);
    
    txBuff[2] = enc_ptr->last_crc; // Last 8 bits = 1 byte for the crc value
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083c:	b2db      	uxtb	r3, r3
 800083e:	75bb      	strb	r3, [r7, #22]
    
    // Transmit over SPI and store away into a 24bit buffer
    HAL_GPIO_WritePin(enc_ptr->CS_port, enc_ptr->CS_pin, GPIO_PIN_RESET);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	6898      	ldr	r0, [r3, #8]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	899b      	ldrh	r3, [r3, #12]
 8000848:	2200      	movs	r2, #0
 800084a:	4619      	mov	r1, r3
 800084c:	f001 fc08 	bl	8002060 <HAL_GPIO_WritePin>
    result = HAL_SPI_Transmit(enc_ptr->hspi, txBuff, 3, HAL_MAX_DELAY);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	6818      	ldr	r0, [r3, #0]
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	2203      	movs	r2, #3
 800085e:	f004 fb35 	bl	8004ecc <HAL_SPI_Transmit>
 8000862:	4603      	mov	r3, r0
 8000864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    HAL_GPIO_WritePin(enc_ptr->CS_port, enc_ptr->CS_pin, GPIO_PIN_SET);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6898      	ldr	r0, [r3, #8]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	899b      	ldrh	r3, [r3, #12]
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	f001 fbf4 	bl	8002060 <HAL_GPIO_WritePin>

    // Send nothing to get the actual result we want
    result = _AS5x47U_readRegisterNOP(enc_ptr);
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f000 f860 	bl	800093e <_AS5x47U_readRegisterNOP>
 800087e:	4603      	mov	r3, r0
 8000880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    uint8_t rxTop = enc_ptr->rxBuffer[0];
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	7c1b      	ldrb	r3, [r3, #16]
 8000888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t rxMid = enc_ptr->rxBuffer[1];
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	7c5b      	ldrb	r3, [r3, #17]
 8000890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uint8_t rxCRC = enc_ptr->rxBuffer[2];
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	7c9b      	ldrb	r3, [r3, #18]
 8000898:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    // Check the warning and error bits
    int warningBit = rxTop & 0x80;
 800089c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a4:	61fb      	str	r3, [r7, #28]
    int errorBit = rxTop & 0x40;
 80008a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ae:	61bb      	str	r3, [r7, #24]

    if (warningBit) {
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d006      	beq.n	80008c4 <AS5x47U_readRegister+0xd8>
        result = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        enc_ptr->warningBit = 1;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2201      	movs	r2, #1
 80008c0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }
    if (errorBit) {
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d006      	beq.n	80008d8 <AS5x47U_readRegister+0xec>
    	result = HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	enc_ptr->errorBit = 1;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2201      	movs	r2, #1
 80008d4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
    }

    // Check that the CRC provided matches the calculated CRC based on this data
    
    tempBuff[0] = rxTop;
 80008d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008dc:	743b      	strb	r3, [r7, #16]
    tempBuff[1] = rxMid;
 80008de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008e2:	747b      	strb	r3, [r7, #17]

    enc_ptr->last_crc = HAL_CRC_Accumulate(enc_ptr->hcrc, (uint32_t*) tempBuff, sizeof(tempBuff)/sizeof(uint8_t));
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80008ea:	f107 0110 	add.w	r1, r7, #16
 80008ee:	2202      	movs	r2, #2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 f86b 	bl	80019cc <HAL_CRC_Accumulate>
 80008f6:	4602      	mov	r2, r0
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
    // enc_ptr->last_crc = HAL_CRC_Calculate(enc_ptr->hcrc, (uint32_t*) tempBuff, sizeof(tempBuff)/sizeof(uint8_t));
    // AS5x47U_calcCRC_new(enc_ptr, tempBuff, 2);

    if ((uint32_t) rxCRC != enc_ptr->last_crc) {
 80008fc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	429a      	cmp	r2, r3
 8000906:	d002      	beq.n	800090e <AS5x47U_readRegister+0x122>
        result = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Use bits 21:8 as the data bits that we actually want to read (14 bit number)
    rxTop = rxTop % 64; // Modulo by 2^6 to get the lower 6 bits
 800090e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
    // Stitch the top and middle entries together into an uint16_t (which only has 14 notable bits)
    *output = (rxTop << 8) | rxMid;
 800091a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000926:	b21b      	sxth	r3, r3
 8000928:	4313      	orrs	r3, r2
 800092a:	b21b      	sxth	r3, r3
 800092c:	b29a      	uxth	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	801a      	strh	r2, [r3, #0]

    return result;
 8000932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000936:	4618      	mov	r0, r3
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <_AS5x47U_readRegisterNOP>:

HAL_StatusTypeDef _AS5x47U_readRegisterNOP(AS5x47U* enc_ptr) {
 800093e:	b580      	push	{r7, lr}
 8000940:	b088      	sub	sp, #32
 8000942:	af02      	add	r7, sp, #8
 8000944:	6078      	str	r0, [r7, #4]
   
    // Prepare txBuffer containing the NOP register and a 1 for the read
    uint8_t txBuff[3];

    // Set the 15th bit (bit 14) to 1 for read; the 16th (bit 15) bit is already 0
    uint16_t tempUpper = NOP | (1 << 14); 
 8000946:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800094a:	82fb      	strh	r3, [r7, #22]

    txBuff[0] = (uint8_t) (tempUpper >> 8);  // shift down by 8 bits to get the upper 8 bits
 800094c:	8afb      	ldrh	r3, [r7, #22]
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	b29b      	uxth	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	743b      	strb	r3, [r7, #16]
    txBuff[1] = (uint8_t) (tempUpper % 256); // Modulo by 2^8 to get the lower 8 bits 
 8000956:	8afb      	ldrh	r3, [r7, #22]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	747b      	strb	r3, [r7, #17]

    uint8_t tempBuff[2] = {txBuff[0], txBuff[1]};
 800095c:	7c3b      	ldrb	r3, [r7, #16]
 800095e:	733b      	strb	r3, [r7, #12]
 8000960:	7c7b      	ldrb	r3, [r7, #17]
 8000962:	737b      	strb	r3, [r7, #13]

    // Make temporary variable containing the message for CRC calculation
    enc_ptr->last_crc = HAL_CRC_Accumulate(enc_ptr->hcrc, (uint32_t*) tempBuff, sizeof(tempBuff)/sizeof(uint8_t));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800096a:	f107 010c 	add.w	r1, r7, #12
 800096e:	2202      	movs	r2, #2
 8000970:	4618      	mov	r0, r3
 8000972:	f001 f82b 	bl	80019cc <HAL_CRC_Accumulate>
 8000976:	4602      	mov	r2, r0
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
    // enc_ptr->last_crc = HAL_CRC_Calculate(enc_ptr->hcrc, (uint32_t*) tempBuff, sizeof(tempBuff)/sizeof(uint8_t));

    txBuff[2] = (uint8_t) enc_ptr->last_crc; // Last 8 bits = 1 byte for the crc value   
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000980:	b2db      	uxtb	r3, r3
 8000982:	74bb      	strb	r3, [r7, #18]

    // Transmit and receive to/from the NOP register -> rxBuffer now has what we want
    HAL_GPIO_WritePin(enc_ptr->CS_port, enc_ptr->CS_pin, GPIO_PIN_RESET);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6898      	ldr	r0, [r3, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	899b      	ldrh	r3, [r3, #12]
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	f001 fb66 	bl	8002060 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef result = HAL_SPI_TransmitReceive(enc_ptr->hspi, txBuff, enc_ptr->rxBuffer, sizeof(txBuff)/sizeof(uint8_t), HAL_MAX_DELAY);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f103 0210 	add.w	r2, r3, #16
 800099e:	f107 0110 	add.w	r1, r7, #16
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2303      	movs	r3, #3
 80009aa:	f004 fc8b 	bl	80052c4 <HAL_SPI_TransmitReceive>
 80009ae:	4603      	mov	r3, r0
 80009b0:	757b      	strb	r3, [r7, #21]
    HAL_GPIO_WritePin(enc_ptr->CS_port, enc_ptr->CS_pin, GPIO_PIN_SET);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6898      	ldr	r0, [r3, #8]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	899b      	ldrh	r3, [r3, #12]
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	f001 fb4f 	bl	8002060 <HAL_GPIO_WritePin>

    return result;
 80009c2:	7d7b      	ldrb	r3, [r7, #21]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <AS5x47U_calcCRCTable>:
    }

    enc_ptr->last_crc = crc;
}

void AS5x47U_calcCRCTable(AS5x47U* enc_ptr) {
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    const uint8_t generator = enc_ptr->crcPoly;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80009da:	727b      	strb	r3, [r7, #9]
    /* iterate over all byte values 0 - 255 */
    for (int dividend = 0; dividend < 256; dividend++)
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e022      	b.n	8000a28 <AS5x47U_calcCRCTable+0x5c>
    {
        uint8_t currByte = (uint8_t) dividend;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	72fb      	strb	r3, [r7, #11]
        /* calculate the CRC-8 value for current byte */
        for (uint8_t bit = 0; bit < 8; bit++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	72bb      	strb	r3, [r7, #10]
 80009ea:	e011      	b.n	8000a10 <AS5x47U_calcCRCTable+0x44>
        {
            if ((currByte & 0x80) != 0)
 80009ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	da07      	bge.n	8000a04 <AS5x47U_calcCRCTable+0x38>
            {
                currByte <<= 1;
 80009f4:	7afb      	ldrb	r3, [r7, #11]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	72fb      	strb	r3, [r7, #11]
                currByte ^= generator;
 80009fa:	7afa      	ldrb	r2, [r7, #11]
 80009fc:	7a7b      	ldrb	r3, [r7, #9]
 80009fe:	4053      	eors	r3, r2
 8000a00:	72fb      	strb	r3, [r7, #11]
 8000a02:	e002      	b.n	8000a0a <AS5x47U_calcCRCTable+0x3e>
            }
            else
            {
                currByte <<= 1;
 8000a04:	7afb      	ldrb	r3, [r7, #11]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	72fb      	strb	r3, [r7, #11]
        for (uint8_t bit = 0; bit < 8; bit++)
 8000a0a:	7abb      	ldrb	r3, [r7, #10]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	72bb      	strb	r3, [r7, #10]
 8000a10:	7abb      	ldrb	r3, [r7, #10]
 8000a12:	2b07      	cmp	r3, #7
 8000a14:	d9ea      	bls.n	80009ec <AS5x47U_calcCRCTable+0x20>
            }
        }
        /* store CRC value in lookup table */
        enc_ptr->crcTable[dividend] = currByte;
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	3329      	adds	r3, #41	; 0x29
 8000a1e:	7afa      	ldrb	r2, [r7, #11]
 8000a20:	701a      	strb	r2, [r3, #0]
    for (int dividend = 0; dividend < 256; dividend++)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2bff      	cmp	r3, #255	; 0xff
 8000a2c:	ddd9      	ble.n	80009e2 <AS5x47U_calcCRCTable+0x16>
    }
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0a8      	sub	sp, #160	; 0xa0
 8000a40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f000 fdc5 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f847 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f000 f9e1 	bl	8000e10 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a4e:	f000 f98b 	bl	8000d68 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a52:	f000 f9d5 	bl	8000e00 <MX_USB_OTG_HS_USB_Init>
  MX_SPI1_Init();
 8000a56:	f000 f8e1 	bl	8000c1c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a5a:	f000 f937 	bl	8000ccc <MX_TIM2_Init>
  MX_CRC_Init();
 8000a5e:	f000 f8b1 	bl	8000bc4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  
  // Set up an AS5x47U instance and initialise it
  AS5x47U* enc_ptr;
  AS5x47U_init(enc_ptr, &hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &hcrc);
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <main+0x88>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <main+0x8c>)
 8000a6a:	4918      	ldr	r1, [pc, #96]	; (8000acc <main+0x90>)
 8000a6c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000a70:	f7ff fe14 	bl	800069c <AS5x47U_init>

  // Set up buffer for printing
  float MSG[35] = {'\0'}; // NULL terminated string for printing
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	228c      	movs	r2, #140	; 0x8c
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 fa03 	bl	8007e86 <memset>
  float X = 0.0;
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Read the position
    AS5x47U_readPositionDAE(enc_ptr);
 8000a88:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000a8c:	f7ff fe48 	bl	8000720 <AS5x47U_readPositionDAE>
    X = enc_ptr->angle_comp;
 8000a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    sprintf(MSG, "X = %.2f\r\n", X);
 8000a9a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000a9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa2:	1d38      	adds	r0, r7, #4
 8000aa4:	ec53 2b17 	vmov	r2, r3, d7
 8000aa8:	4909      	ldr	r1, [pc, #36]	; (8000ad0 <main+0x94>)
 8000aaa:	f007 f989 	bl	8007dc0 <siprintf>
    HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 100);
 8000aae:	1d39      	adds	r1, r7, #4
 8000ab0:	2364      	movs	r3, #100	; 0x64
 8000ab2:	228c      	movs	r2, #140	; 0x8c
 8000ab4:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <main+0x98>)
 8000ab6:	f005 fa6f 	bl	8005f98 <HAL_UART_Transmit>
    HAL_Delay(500);
 8000aba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000abe:	f000 fe19 	bl	80016f4 <HAL_Delay>
    AS5x47U_readPositionDAE(enc_ptr);
 8000ac2:	e7e1      	b.n	8000a88 <main+0x4c>
 8000ac4:	240001f4 	.word	0x240001f4
 8000ac8:	58020400 	.word	0x58020400
 8000acc:	24000218 	.word	0x24000218
 8000ad0:	08009f88 	.word	0x08009f88
 8000ad4:	240002ec 	.word	0x240002ec

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	; 0x70
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	224c      	movs	r2, #76	; 0x4c
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f007 f9cd 	bl	8007e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2220      	movs	r2, #32
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f007 f9c7 	bl	8007e86 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000af8:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <SystemClock_Config+0xe4>)
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b02:	2004      	movs	r0, #4
 8000b04:	f001 fac6 	bl	8002094 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <SystemClock_Config+0xe8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a2b      	ldr	r2, [pc, #172]	; (8000bc0 <SystemClock_Config+0xe8>)
 8000b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <SystemClock_Config+0xe8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b24:	bf00      	nop
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <SystemClock_Config+0xe8>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b32:	d1f8      	bne.n	8000b26 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b34:	2321      	movs	r3, #33	; 0x21
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000b56:	230d      	movs	r3, #13
 8000b58:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 fae9 	bl	8002148 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000b7c:	f000 fa62 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	233f      	movs	r3, #63	; 0x3f
 8000b82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2303      	movs	r3, #3
 8000b86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 ff01 	bl	80029ac <HAL_RCC_ClockConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000bb0:	f000 fa48 	bl	8001044 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3770      	adds	r7, #112	; 0x70
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	58024400 	.word	0x58024400
 8000bc0:	58024800 	.word	0x58024800

08000bc4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_CRC_Init+0x50>)
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <MX_CRC_Init+0x54>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_CRC_Init+0x50>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_CRC_Init+0x50>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_CRC_Init+0x50>)
 8000bdc:	221d      	movs	r2, #29
 8000bde:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_CRC_Init+0x50>)
 8000be2:	2210      	movs	r2, #16
 8000be4:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_CRC_Init+0x50>)
 8000be8:	22c4      	movs	r2, #196	; 0xc4
 8000bea:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_CRC_Init+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_CRC_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_CRC_Init+0x50>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_CRC_Init+0x50>)
 8000c00:	f000 fe80 	bl	8001904 <HAL_CRC_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000c0a:	f000 fa1b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	240001f4 	.word	0x240001f4
 8000c18:	40023000 	.word	0x40023000

08000c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c20:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <MX_SPI1_Init+0xac>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c36:	2207      	movs	r2, #7
 8000c38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x11d;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c6c:	f240 121d 	movw	r2, #285	; 0x11d
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000cb0:	f003 ffe8 	bl	8004c84 <HAL_SPI_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000cba:	f000 f9c3 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	24000218 	.word	0x24000218
 8000cc8:	40013000 	.word	0x40013000

08000ccc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MX_TIM2_Init+0x98>)
 8000cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_TIM2_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_TIM2_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_TIM2_Init+0x98>)
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_TIM2_Init+0x98>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_TIM2_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_TIM2_Init+0x98>)
 8000d14:	f004 fddb 	bl	80058ce <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d1e:	f000 f991 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_TIM2_Init+0x98>)
 8000d30:	f004 fe24 	bl	800597c <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d3a:	f000 f983 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_TIM2_Init+0x98>)
 8000d4c:	f005 f846 	bl	8005ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d56:	f000 f975 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	240002a0 	.word	0x240002a0

08000d68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d6e:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <MX_USART3_UART_Init+0x94>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000db2:	f005 f8a1 	bl	8005ef8 <HAL_UART_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dbc:	f000 f942 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000dc4:	f006 fa35 	bl	8007232 <HAL_UARTEx_SetTxFifoThreshold>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dce:	f000 f939 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000dd6:	f006 fa6a 	bl	80072ae <HAL_UARTEx_SetRxFifoThreshold>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000de0:	f000 f930 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000de6:	f006 f9eb 	bl	80071c0 <HAL_UARTEx_DisableFifoMode>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000df0:	f000 f928 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	240002ec 	.word	0x240002ec
 8000dfc:	40004800 	.word	0x40004800

08000e00 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08e      	sub	sp, #56	; 0x38
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	4b80      	ldr	r3, [pc, #512]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2c:	4a7e      	ldr	r2, [pc, #504]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e36:	4b7c      	ldr	r3, [pc, #496]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	623b      	str	r3, [r7, #32]
 8000e42:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e44:	4b78      	ldr	r3, [pc, #480]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e4a:	4a77      	ldr	r2, [pc, #476]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e54:	4b74      	ldr	r3, [pc, #464]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e5a:	f003 0320 	and.w	r3, r3, #32
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	4b71      	ldr	r3, [pc, #452]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e68:	4a6f      	ldr	r2, [pc, #444]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e72:	4b6d      	ldr	r3, [pc, #436]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b69      	ldr	r3, [pc, #420]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e86:	4a68      	ldr	r2, [pc, #416]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e90:	4b65      	ldr	r3, [pc, #404]	; (8001028 <MX_GPIO_Init+0x218>)
 8000e92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b62      	ldr	r3, [pc, #392]	; (8001028 <MX_GPIO_Init+0x218>)
 8000ea0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea4:	4a60      	ldr	r2, [pc, #384]	; (8001028 <MX_GPIO_Init+0x218>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eae:	4b5e      	ldr	r3, [pc, #376]	; (8001028 <MX_GPIO_Init+0x218>)
 8000eb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b5a      	ldr	r3, [pc, #360]	; (8001028 <MX_GPIO_Init+0x218>)
 8000ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec2:	4a59      	ldr	r2, [pc, #356]	; (8001028 <MX_GPIO_Init+0x218>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ecc:	4b56      	ldr	r3, [pc, #344]	; (8001028 <MX_GPIO_Init+0x218>)
 8000ece:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eda:	4b53      	ldr	r3, [pc, #332]	; (8001028 <MX_GPIO_Init+0x218>)
 8000edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee0:	4a51      	ldr	r2, [pc, #324]	; (8001028 <MX_GPIO_Init+0x218>)
 8000ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eea:	4b4f      	ldr	r3, [pc, #316]	; (8001028 <MX_GPIO_Init+0x218>)
 8000eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef8:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <MX_GPIO_Init+0x218>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efe:	4a4a      	ldr	r2, [pc, #296]	; (8001028 <MX_GPIO_Init+0x218>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <MX_GPIO_Init+0x218>)
 8000f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1c:	4843      	ldr	r0, [pc, #268]	; (800102c <MX_GPIO_Init+0x21c>)
 8000f1e:	f001 f89f 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f244 0141 	movw	r1, #16449	; 0x4041
 8000f28:	4841      	ldr	r0, [pc, #260]	; (8001030 <MX_GPIO_Init+0x220>)
 8000f2a:	f001 f899 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2102      	movs	r1, #2
 8000f32:	4840      	ldr	r0, [pc, #256]	; (8001034 <MX_GPIO_Init+0x224>)
 8000f34:	f001 f894 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	483a      	ldr	r0, [pc, #232]	; (8001038 <MX_GPIO_Init+0x228>)
 8000f4e:	f000 fed7 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4830      	ldr	r0, [pc, #192]	; (800102c <MX_GPIO_Init+0x21c>)
 8000f6c:	f000 fec8 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin;
 8000f70:	f244 0341 	movw	r3, #16449	; 0x4041
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	4829      	ldr	r0, [pc, #164]	; (8001030 <MX_GPIO_Init+0x220>)
 8000f8a:	f000 feb9 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4826      	ldr	r0, [pc, #152]	; (800103c <MX_GPIO_Init+0x22c>)
 8000fa4:	f000 feac 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4820      	ldr	r0, [pc, #128]	; (8001040 <MX_GPIO_Init+0x230>)
 8000fbe:	f000 fe9f 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4818      	ldr	r0, [pc, #96]	; (8001040 <MX_GPIO_Init+0x230>)
 8000fe0:	f000 fe8e 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000fe4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4810      	ldr	r0, [pc, #64]	; (8001040 <MX_GPIO_Init+0x230>)
 8000ffe:	f000 fe7f 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001002:	2302      	movs	r3, #2
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <MX_GPIO_Init+0x224>)
 800101a:	f000 fe71 	bl	8001d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101e:	bf00      	nop
 8001020:	3738      	adds	r7, #56	; 0x38
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	58024400 	.word	0x58024400
 800102c:	58021400 	.word	0x58021400
 8001030:	58020400 	.word	0x58020400
 8001034:	58021000 	.word	0x58021000
 8001038:	58020800 	.word	0x58020800
 800103c:	58021800 	.word	0x58021800
 8001040:	58020000 	.word	0x58020000

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_MspInit+0x30>)
 8001058:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800105c:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x30>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x30>)
 8001068:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	58024400 	.word	0x58024400

08001084 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <HAL_CRC_MspInit+0x3c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d10e      	bne.n	80010b4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_CRC_MspInit+0x40>)
 8001098:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800109c:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_CRC_MspInit+0x40>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <HAL_CRC_MspInit+0x40>)
 80010a8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40023000 	.word	0x40023000
 80010c4:	58024400 	.word	0x58024400

080010c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ba      	sub	sp, #232	; 0xe8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	22c0      	movs	r2, #192	; 0xc0
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f006 fecc 	bl	8007e86 <memset>
  if(hspi->Instance==SPI1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a26      	ldr	r2, [pc, #152]	; (800118c <HAL_SPI_MspInit+0xc4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d144      	bne.n	8001182 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001104:	2300      	movs	r3, #0
 8001106:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4618      	mov	r0, r3
 800110e:	f001 ffd9 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001118:	f7ff ff94 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_SPI_MspInit+0xc8>)
 800111e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001122:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_SPI_MspInit+0xc8>)
 8001124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001128:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_SPI_MspInit+0xc8>)
 800112e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_SPI_MspInit+0xc8>)
 800113c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_SPI_MspInit+0xc8>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_SPI_MspInit+0xc8>)
 800114c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001158:	23e0      	movs	r3, #224	; 0xe0
 800115a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001170:	2305      	movs	r3, #5
 8001172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_SPI_MspInit+0xcc>)
 800117e:	f000 fdbf 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	37e8      	adds	r7, #232	; 0xe8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40013000 	.word	0x40013000
 8001190:	58024400 	.word	0x58024400
 8001194:	58020000 	.word	0x58020000

08001198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d10e      	bne.n	80011c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_TIM_Base_MspInit+0x3c>)
 80011ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011b0:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_TIM_Base_MspInit+0x3c>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_TIM_Base_MspInit+0x3c>)
 80011bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	58024400 	.word	0x58024400

080011d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0ba      	sub	sp, #232	; 0xe8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	22c0      	movs	r2, #192	; 0xc0
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f006 fe44 	bl	8007e86 <memset>
  if(huart->Instance==USART3)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <HAL_UART_MspInit+0xc8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d146      	bne.n	8001296 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001208:	f04f 0202 	mov.w	r2, #2
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4618      	mov	r0, r3
 8001220:	f001 ff50 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800122a:	f7ff ff0b 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_UART_MspInit+0xcc>)
 8001230:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <HAL_UART_MspInit+0xcc>)
 8001236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_UART_MspInit+0xcc>)
 8001240:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_UART_MspInit+0xcc>)
 800124e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <HAL_UART_MspInit+0xcc>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_UART_MspInit+0xcc>)
 800125e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800126a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001284:	2307      	movs	r3, #7
 8001286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_UART_MspInit+0xd0>)
 8001292:	f000 fd35 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	37e8      	adds	r7, #232	; 0xe8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40004800 	.word	0x40004800
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020c00 	.word	0x58020c00

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f9dc 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	return 1;
 8001304:	2301      	movs	r3, #1
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_kill>:

int _kill(int pid, int sig)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800131a:	f006 fe07 	bl	8007f2c <__errno>
 800131e:	4603      	mov	r3, r0
 8001320:	2216      	movs	r2, #22
 8001322:	601a      	str	r2, [r3, #0]
	return -1;
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_exit>:

void _exit (int status)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffe7 	bl	8001310 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001342:	e7fe      	b.n	8001342 <_exit+0x12>

08001344 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e00a      	b.n	800136c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001356:	f3af 8000 	nop.w
 800135a:	4601      	mov	r1, r0
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	60ba      	str	r2, [r7, #8]
 8001362:	b2ca      	uxtb	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbf0      	blt.n	8001356 <_read+0x12>
	}

return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e009      	b.n	80013a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	60ba      	str	r2, [r7, #8]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dbf1      	blt.n	8001390 <_write+0x12>
	}
	return len;
 80013ac:	687b      	ldr	r3, [r7, #4]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <_close>:

int _close(int file)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013de:	605a      	str	r2, [r3, #4]
	return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_isatty>:

int _isatty(int file)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
	return 1;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	return 0;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f006 fd6c 	bl	8007f2c <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	24100000 	.word	0x24100000
 8001480:	00000400 	.word	0x00000400
 8001484:	24000380 	.word	0x24000380
 8001488:	240004d8 	.word	0x240004d8

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <SystemInit+0xd0>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001496:	4a31      	ldr	r2, [pc, #196]	; (800155c <SystemInit+0xd0>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <SystemInit+0xd4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d807      	bhi.n	80014bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <SystemInit+0xd4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 030f 	bic.w	r3, r3, #15
 80014b4:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <SystemInit+0xd4>)
 80014b6:	f043 0303 	orr.w	r3, r3, #3
 80014ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <SystemInit+0xd8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a28      	ldr	r2, [pc, #160]	; (8001564 <SystemInit+0xd8>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <SystemInit+0xd8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <SystemInit+0xd8>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4924      	ldr	r1, [pc, #144]	; (8001564 <SystemInit+0xd8>)
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <SystemInit+0xdc>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <SystemInit+0xd4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <SystemInit+0xd4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 030f 	bic.w	r3, r3, #15
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <SystemInit+0xd4>)
 80014f0:	f043 0303 	orr.w	r3, r3, #3
 80014f4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <SystemInit+0xd8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <SystemInit+0xd8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <SystemInit+0xd8>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <SystemInit+0xd8>)
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <SystemInit+0xe0>)
 800150c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <SystemInit+0xd8>)
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <SystemInit+0xe4>)
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <SystemInit+0xd8>)
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <SystemInit+0xe8>)
 8001518:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <SystemInit+0xd8>)
 800151c:	2200      	movs	r2, #0
 800151e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <SystemInit+0xd8>)
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <SystemInit+0xe8>)
 8001524:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <SystemInit+0xd8>)
 8001528:	2200      	movs	r2, #0
 800152a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <SystemInit+0xd8>)
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <SystemInit+0xe8>)
 8001530:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <SystemInit+0xd8>)
 8001534:	2200      	movs	r2, #0
 8001536:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <SystemInit+0xd8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a09      	ldr	r2, [pc, #36]	; (8001564 <SystemInit+0xd8>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <SystemInit+0xd8>)
 8001546:	2200      	movs	r2, #0
 8001548:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <SystemInit+0xec>)
 800154c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001550:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	52002000 	.word	0x52002000
 8001564:	58024400 	.word	0x58024400
 8001568:	eaf6ed7f 	.word	0xeaf6ed7f
 800156c:	02020200 	.word	0x02020200
 8001570:	01ff0000 	.word	0x01ff0000
 8001574:	01010280 	.word	0x01010280
 8001578:	52004000 	.word	0x52004000

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001580:	f7ff ff84 	bl	800148c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	; (80015bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	; (80015c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f006 fcc5 	bl	8007f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff fa45 	bl	8000a3c <main>
  bx  lr
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80015b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015bc:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80015c0:	0800a34c 	.word	0x0800a34c
  ldr r2, =_sbss
 80015c4:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80015c8:	240004d4 	.word	0x240004d4

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d6:	2003      	movs	r0, #3
 80015d8:	f000 f962 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80015dc:	f001 fb9c 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_Init+0x68>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	4913      	ldr	r1, [pc, #76]	; (800163c <HAL_Init+0x6c>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_Init+0x68>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_Init+0x6c>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_Init+0x70>)
 8001612:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_Init+0x74>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f814 	bl	8001648 <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e002      	b.n	8001630 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800162a:	f7ff fd11 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	58024400 	.word	0x58024400
 800163c:	08009f94 	.word	0x08009f94
 8001640:	24000004 	.word	0x24000004
 8001644:	24000000 	.word	0x24000000

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_InitTick+0x60>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e021      	b.n	80016a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_InitTick+0x64>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_InitTick+0x60>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f939 	bl	80018ea <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 f911 	bl	80018b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_InitTick+0x68>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2400000c 	.word	0x2400000c
 80016ac:	24000000 	.word	0x24000000
 80016b0:	24000008 	.word	0x24000008

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	2400000c 	.word	0x2400000c
 80016d8:	24000384 	.word	0x24000384

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	24000384 	.word	0x24000384

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_Delay+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2400000c 	.word	0x2400000c

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <__NVIC_SetPriorityGrouping+0x40>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	4313      	orrs	r3, r2
 8001768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <__NVIC_SetPriorityGrouping+0x40>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	60d3      	str	r3, [r2, #12]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00
 8001780:	05fa0000 	.word	0x05fa0000

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff47 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff5e 	bl	8001784 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff90 	bl	80017f4 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5f 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffb2 	bl	800185c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e054      	b.n	80019c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7f5b      	ldrb	r3, [r3, #29]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fbac 	bl	8001084 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_CRC_Init+0xc4>)
 8001940:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0218 	bic.w	r2, r2, #24
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	e00c      	b.n	800196e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6899      	ldr	r1, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	461a      	mov	r2, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f940 	bl	8001be4 <HAL_CRCEx_Polynomial_Set>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e028      	b.n	80019c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	795b      	ldrb	r3, [r3, #5]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f04f 32ff 	mov.w	r2, #4294967295
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	e004      	b.n	800198c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6912      	ldr	r2, [r2, #16]
 800198a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	04c11db7 	.word	0x04c11db7

080019cc <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2202      	movs	r2, #2
 80019e0:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d006      	beq.n	80019f8 <HAL_CRC_Accumulate+0x2c>
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d829      	bhi.n	8001a42 <HAL_CRC_Accumulate+0x76>
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d019      	beq.n	8001a26 <HAL_CRC_Accumulate+0x5a>
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d01e      	beq.n	8001a34 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 80019f6:	e024      	b.n	8001a42 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e00a      	b.n	8001a14 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	441a      	add	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3f0      	bcc.n	80019fe <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	613b      	str	r3, [r7, #16]
      break;
 8001a24:	e00e      	b.n	8001a44 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f812 	bl	8001a54 <CRC_Handle_8>
 8001a30:	6138      	str	r0, [r7, #16]
      break;
 8001a32:	e007      	b.n	8001a44 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f899 	bl	8001b70 <CRC_Handle_16>
 8001a3e:	6138      	str	r0, [r7, #16]
      break;
 8001a40:	e000      	b.n	8001a44 <HAL_CRC_Accumulate+0x78>
      break;
 8001a42:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001a4a:	693b      	ldr	r3, [r7, #16]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	e023      	b.n	8001aae <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	3301      	adds	r3, #1
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	440b      	add	r3, r1
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001a80:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001a90:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	3303      	adds	r3, #3
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	440b      	add	r3, r1
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001aa4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d3d6      	bcc.n	8001a66 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d04d      	beq.n	8001b5e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d107      	bne.n	8001adc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d116      	bne.n	8001b14 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	3301      	adds	r3, #1
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	440b      	add	r3, r1
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	8b7a      	ldrh	r2, [r7, #26]
 8001b12:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d11f      	bne.n	8001b5e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	3301      	adds	r3, #1
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	440b      	add	r3, r1
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	8b7a      	ldrh	r2, [r7, #26]
 8001b4a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	4413      	add	r3, r2
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3724      	adds	r7, #36	; 0x24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e013      	b.n	8001baa <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	4413      	add	r3, r2
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	440b      	add	r3, r1
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d3e6      	bcc.n	8001b82 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	4413      	add	r3, r2
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001bf4:	231f      	movs	r3, #31
 8001bf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	75fb      	strb	r3, [r7, #23]
 8001c06:	e063      	b.n	8001cd0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001c08:	bf00      	nop
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1e5a      	subs	r2, r3, #1
 8001c0e:	613a      	str	r2, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_CRCEx_Polynomial_Set+0x44>
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b18      	cmp	r3, #24
 8001c2c:	d846      	bhi.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xd8>
 8001c2e:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001cc3 	.word	0x08001cc3
 8001c38:	08001cbd 	.word	0x08001cbd
 8001c3c:	08001cbd 	.word	0x08001cbd
 8001c40:	08001cbd 	.word	0x08001cbd
 8001c44:	08001cbd 	.word	0x08001cbd
 8001c48:	08001cbd 	.word	0x08001cbd
 8001c4c:	08001cbd 	.word	0x08001cbd
 8001c50:	08001cbd 	.word	0x08001cbd
 8001c54:	08001cb1 	.word	0x08001cb1
 8001c58:	08001cbd 	.word	0x08001cbd
 8001c5c:	08001cbd 	.word	0x08001cbd
 8001c60:	08001cbd 	.word	0x08001cbd
 8001c64:	08001cbd 	.word	0x08001cbd
 8001c68:	08001cbd 	.word	0x08001cbd
 8001c6c:	08001cbd 	.word	0x08001cbd
 8001c70:	08001cbd 	.word	0x08001cbd
 8001c74:	08001ca5 	.word	0x08001ca5
 8001c78:	08001cbd 	.word	0x08001cbd
 8001c7c:	08001cbd 	.word	0x08001cbd
 8001c80:	08001cbd 	.word	0x08001cbd
 8001c84:	08001cbd 	.word	0x08001cbd
 8001c88:	08001cbd 	.word	0x08001cbd
 8001c8c:	08001cbd 	.word	0x08001cbd
 8001c90:	08001cbd 	.word	0x08001cbd
 8001c94:	08001c99 	.word	0x08001c99
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d913      	bls.n	8001cc6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001ca2:	e010      	b.n	8001cc6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b07      	cmp	r3, #7
 8001ca8:	d90f      	bls.n	8001cca <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001cae:	e00c      	b.n	8001cca <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	d90b      	bls.n	8001cce <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001cba:	e008      	b.n	8001cce <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	75fb      	strb	r3, [r7, #23]
        break;
 8001cc0:	e006      	b.n	8001cd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cc2:	bf00      	nop
 8001cc4:	e004      	b.n	8001cd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cc6:	bf00      	nop
 8001cc8:	e002      	b.n	8001cd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cca:	bf00      	nop
 8001ccc:	e000      	b.n	8001cd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cce:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 0118 	bic.w	r1, r3, #24
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d0e:	4b89      	ldr	r3, [pc, #548]	; (8001f34 <HAL_GPIO_Init+0x234>)
 8001d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d12:	e194      	b.n	800203e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8186 	beq.w	8002038 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d005      	beq.n	8001d44 <HAL_GPIO_Init+0x44>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d130      	bne.n	8001da6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 0201 	and.w	r2, r3, #1
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d017      	beq.n	8001de2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d123      	bne.n	8001e36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	69b9      	ldr	r1, [r7, #24]
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80e0 	beq.w	8002038 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e78:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_GPIO_Init+0x238>)
 8001e7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e7e:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_GPIO_Init+0x238>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_GPIO_Init+0x238>)
 8001e8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e96:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <HAL_GPIO_Init+0x23c>)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <HAL_GPIO_Init+0x240>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d052      	beq.n	8001f68 <HAL_GPIO_Init+0x268>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <HAL_GPIO_Init+0x244>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d031      	beq.n	8001f2e <HAL_GPIO_Init+0x22e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <HAL_GPIO_Init+0x248>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02b      	beq.n	8001f2a <HAL_GPIO_Init+0x22a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_GPIO_Init+0x24c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d025      	beq.n	8001f26 <HAL_GPIO_Init+0x226>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_GPIO_Init+0x250>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <HAL_GPIO_Init+0x222>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_GPIO_Init+0x254>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_GPIO_Init+0x21e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_GPIO_Init+0x258>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x21a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_GPIO_Init+0x25c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x216>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <HAL_GPIO_Init+0x260>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x212>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_GPIO_Init+0x264>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x20e>
 8001f0a:	2309      	movs	r3, #9
 8001f0c:	e02d      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f0e:	230a      	movs	r3, #10
 8001f10:	e02b      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f12:	2308      	movs	r3, #8
 8001f14:	e029      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f16:	2307      	movs	r3, #7
 8001f18:	e027      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	e025      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f1e:	2305      	movs	r3, #5
 8001f20:	e023      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f22:	2304      	movs	r3, #4
 8001f24:	e021      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f26:	2303      	movs	r3, #3
 8001f28:	e01f      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e01d      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e01b      	b.n	8001f6a <HAL_GPIO_Init+0x26a>
 8001f32:	bf00      	nop
 8001f34:	58000080 	.word	0x58000080
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	58000400 	.word	0x58000400
 8001f40:	58020000 	.word	0x58020000
 8001f44:	58020400 	.word	0x58020400
 8001f48:	58020800 	.word	0x58020800
 8001f4c:	58020c00 	.word	0x58020c00
 8001f50:	58021000 	.word	0x58021000
 8001f54:	58021400 	.word	0x58021400
 8001f58:	58021800 	.word	0x58021800
 8001f5c:	58021c00 	.word	0x58021c00
 8001f60:	58022000 	.word	0x58022000
 8001f64:	58022400 	.word	0x58022400
 8001f68:	2300      	movs	r3, #0
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	4093      	lsls	r3, r2
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f7a:	4938      	ldr	r1, [pc, #224]	; (800205c <HAL_GPIO_Init+0x35c>)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3301      	adds	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f ae63 	bne.w	8001d14 <HAL_GPIO_Init+0x14>
  }
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	3724      	adds	r7, #36	; 0x24
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	58000400 	.word	0x58000400

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800207c:	e003      	b.n	8002086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	041a      	lsls	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_PWREx_ConfigSupply+0xb0>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	2b06      	cmp	r3, #6
 80020a6:	d00a      	beq.n	80020be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_PWREx_ConfigSupply+0xb0>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d001      	beq.n	80020ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e040      	b.n	800213c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e03e      	b.n	800213c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_PWREx_ConfigSupply+0xb0>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80020c6:	491f      	ldr	r1, [pc, #124]	; (8002144 <HAL_PWREx_ConfigSupply+0xb0>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020ce:	f7ff fb05 	bl	80016dc <HAL_GetTick>
 80020d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020d4:	e009      	b.n	80020ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020d6:	f7ff fb01 	bl	80016dc <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020e4:	d901      	bls.n	80020ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e028      	b.n	800213c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_PWREx_ConfigSupply+0xb0>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f6:	d1ee      	bne.n	80020d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b1e      	cmp	r3, #30
 80020fc:	d008      	beq.n	8002110 <HAL_PWREx_ConfigSupply+0x7c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b2e      	cmp	r3, #46	; 0x2e
 8002102:	d005      	beq.n	8002110 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b1d      	cmp	r3, #29
 8002108:	d002      	beq.n	8002110 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b2d      	cmp	r3, #45	; 0x2d
 800210e:	d114      	bne.n	800213a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002110:	f7ff fae4 	bl	80016dc <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002116:	e009      	b.n	800212c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002118:	f7ff fae0 	bl	80016dc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002126:	d901      	bls.n	800212c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e007      	b.n	800213c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_PWREx_ConfigSupply+0xb0>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d1ee      	bne.n	8002118 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	58024800 	.word	0x58024800

08002148 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	f000 bc1f 	b.w	800299a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80b3 	beq.w	80022d0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216a:	4b95      	ldr	r3, [pc, #596]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002174:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	2b10      	cmp	r3, #16
 800217e:	d007      	beq.n	8002190 <HAL_RCC_OscConfig+0x48>
 8002180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002182:	2b18      	cmp	r3, #24
 8002184:	d112      	bne.n	80021ac <HAL_RCC_OscConfig+0x64>
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d10d      	bne.n	80021ac <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 8098 	beq.w	80022ce <HAL_RCC_OscConfig+0x186>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 8093 	bne.w	80022ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e3f6      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x7c>
 80021b6:	4b82      	ldr	r3, [pc, #520]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a81      	ldr	r2, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e058      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d112      	bne.n	80021f2 <HAL_RCC_OscConfig+0xaa>
 80021cc:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80021d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a78      	ldr	r2, [pc, #480]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80021de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a75      	ldr	r2, [pc, #468]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e041      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021fa:	d112      	bne.n	8002222 <HAL_RCC_OscConfig+0xda>
 80021fc:	4b70      	ldr	r3, [pc, #448]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6f      	ldr	r2, [pc, #444]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6c      	ldr	r2, [pc, #432]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800220e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a69      	ldr	r2, [pc, #420]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800221a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e029      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800222a:	d112      	bne.n	8002252 <HAL_RCC_OscConfig+0x10a>
 800222c:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a63      	ldr	r2, [pc, #396]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a60      	ldr	r2, [pc, #384]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b5e      	ldr	r3, [pc, #376]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5d      	ldr	r2, [pc, #372]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800224a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	e011      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
 8002252:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a5a      	ldr	r2, [pc, #360]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a57      	ldr	r2, [pc, #348]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b55      	ldr	r3, [pc, #340]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a54      	ldr	r2, [pc, #336]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002270:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002274:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d013      	beq.n	80022a6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7ff fa2d 	bl	80016dc <HAL_GetTick>
 8002282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002286:	f7ff fa29 	bl	80016dc <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e380      	b.n	800299a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002298:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x13e>
 80022a4:	e014      	b.n	80022d0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff fa19 	bl	80016dc <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ae:	f7ff fa15 	bl	80016dc <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b64      	cmp	r3, #100	; 0x64
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e36c      	b.n	800299a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022c0:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x166>
 80022cc:	e000      	b.n	80022d0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 808c 	beq.w	80023f6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022e6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022e8:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_RCC_OscConfig+0x1bc>
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	2b18      	cmp	r3, #24
 80022f8:	d137      	bne.n	800236a <HAL_RCC_OscConfig+0x222>
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d132      	bne.n	800236a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002304:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_OscConfig+0x1d4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e33e      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 0219 	bic.w	r2, r3, #25
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4925      	ldr	r1, [pc, #148]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7ff f9d5 	bl	80016dc <HAL_GetTick>
 8002332:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7ff f9d1 	bl	80016dc <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e328      	b.n	800299a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	4917      	ldr	r1, [pc, #92]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	e045      	b.n	80023f6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d028      	beq.n	80023c4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0219 	bic.w	r2, r3, #25
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4910      	ldr	r1, [pc, #64]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff f9aa 	bl	80016dc <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7ff f9a6 	bl	80016dc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e2fd      	b.n	800299a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	061b      	lsls	r3, r3, #24
 80023b8:	4901      	ldr	r1, [pc, #4]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
 80023be:	e01a      	b.n	80023f6 <HAL_RCC_OscConfig+0x2ae>
 80023c0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c4:	4b97      	ldr	r3, [pc, #604]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a96      	ldr	r2, [pc, #600]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7ff f984 	bl	80016dc <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d8:	f7ff f980 	bl	80016dc <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e2d7      	b.n	800299a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023ea:	4b8e      	ldr	r3, [pc, #568]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d06a      	beq.n	80024d8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002402:	4b88      	ldr	r3, [pc, #544]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800240a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800240c:	4b85      	ldr	r3, [pc, #532]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d007      	beq.n	8002428 <HAL_RCC_OscConfig+0x2e0>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b18      	cmp	r3, #24
 800241c:	d11b      	bne.n	8002456 <HAL_RCC_OscConfig+0x30e>
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d116      	bne.n	8002456 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002428:	4b7e      	ldr	r3, [pc, #504]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x2f8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e2ac      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002440:	4b78      	ldr	r3, [pc, #480]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	4975      	ldr	r1, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002454:	e040      	b.n	80024d8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d023      	beq.n	80024a6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800245e:	4b71      	ldr	r3, [pc, #452]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a70      	ldr	r2, [pc, #448]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7ff f937 	bl	80016dc <HAL_GetTick>
 800246e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002472:	f7ff f933 	bl	80016dc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e28a      	b.n	800299a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002484:	4b67      	ldr	r3, [pc, #412]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002490:	4b64      	ldr	r3, [pc, #400]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	4961      	ldr	r1, [pc, #388]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
 80024a4:	e018      	b.n	80024d8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024a6:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5e      	ldr	r2, [pc, #376]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80024ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7ff f913 	bl	80016dc <HAL_GetTick>
 80024b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024ba:	f7ff f90f 	bl	80016dc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e266      	b.n	800299a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024cc:	4b55      	ldr	r3, [pc, #340]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d036      	beq.n	8002552 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d019      	beq.n	8002520 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ec:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80024ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f0:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7ff f8f0 	bl	80016dc <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7ff f8ec 	bl	80016dc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e243      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002512:	4b44      	ldr	r3, [pc, #272]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x3b8>
 800251e:	e018      	b.n	8002552 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002520:	4b40      	ldr	r3, [pc, #256]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	4a3f      	ldr	r2, [pc, #252]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7ff f8d6 	bl	80016dc <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7ff f8d2 	bl	80016dc <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e229      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d036      	beq.n	80025cc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d019      	beq.n	800259a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002566:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 800256c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002570:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002572:	f7ff f8b3 	bl	80016dc <HAL_GetTick>
 8002576:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800257a:	f7ff f8af 	bl	80016dc <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e206      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x432>
 8002598:	e018      	b.n	80025cc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a21      	ldr	r2, [pc, #132]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80025a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025a6:	f7ff f899 	bl	80016dc <HAL_GetTick>
 80025aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ae:	f7ff f895 	bl	80016dc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1ec      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80af 	beq.w	8002738 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_RCC_OscConfig+0x4e0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <HAL_RCC_OscConfig+0x4e0>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e6:	f7ff f879 	bl	80016dc <HAL_GetTick>
 80025ea:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7ff f875 	bl	80016dc <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1cc      	b.n	800299a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_OscConfig+0x4e0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10b      	bne.n	800262c <HAL_RCC_OscConfig+0x4e4>
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a02      	ldr	r2, [pc, #8]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
 8002620:	e05b      	b.n	80026da <HAL_RCC_OscConfig+0x592>
 8002622:	bf00      	nop
 8002624:	58024400 	.word	0x58024400
 8002628:	58024800 	.word	0x58024800
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d112      	bne.n	800265a <HAL_RCC_OscConfig+0x512>
 8002634:	4b9d      	ldr	r3, [pc, #628]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a9c      	ldr	r2, [pc, #624]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	4b9a      	ldr	r3, [pc, #616]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a99      	ldr	r2, [pc, #612]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
 800264c:	4b97      	ldr	r3, [pc, #604]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a96      	ldr	r2, [pc, #600]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002652:	f023 0304 	bic.w	r3, r3, #4
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	e03f      	b.n	80026da <HAL_RCC_OscConfig+0x592>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d112      	bne.n	8002688 <HAL_RCC_OscConfig+0x540>
 8002662:	4b92      	ldr	r3, [pc, #584]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a91      	ldr	r2, [pc, #580]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
 800266e:	4b8f      	ldr	r3, [pc, #572]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a8e      	ldr	r2, [pc, #568]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	4b8c      	ldr	r3, [pc, #560]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a8b      	ldr	r2, [pc, #556]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	e028      	b.n	80026da <HAL_RCC_OscConfig+0x592>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b85      	cmp	r3, #133	; 0x85
 800268e:	d112      	bne.n	80026b6 <HAL_RCC_OscConfig+0x56e>
 8002690:	4b86      	ldr	r3, [pc, #536]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a85      	ldr	r2, [pc, #532]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
 800269c:	4b83      	ldr	r3, [pc, #524]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a82      	ldr	r2, [pc, #520]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80026a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	4b80      	ldr	r3, [pc, #512]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a7f      	ldr	r2, [pc, #508]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	e011      	b.n	80026da <HAL_RCC_OscConfig+0x592>
 80026b6:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a7c      	ldr	r2, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	4b7a      	ldr	r3, [pc, #488]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a79      	ldr	r2, [pc, #484]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	4b77      	ldr	r3, [pc, #476]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a76      	ldr	r2, [pc, #472]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80026d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d015      	beq.n	800270e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe fffb 	bl	80016dc <HAL_GetTick>
 80026e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe fff7 	bl	80016dc <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e14c      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002700:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ee      	beq.n	80026ea <HAL_RCC_OscConfig+0x5a2>
 800270c:	e014      	b.n	8002738 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe ffe5 	bl	80016dc <HAL_GetTick>
 8002712:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe ffe1 	bl	80016dc <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	; 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e136      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800272c:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ee      	bne.n	8002716 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 812b 	beq.w	8002998 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002742:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274a:	2b18      	cmp	r3, #24
 800274c:	f000 80bb 	beq.w	80028c6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2b02      	cmp	r3, #2
 8002756:	f040 8095 	bne.w	8002884 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275a:	4b54      	ldr	r3, [pc, #336]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a53      	ldr	r2, [pc, #332]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002760:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe ffb9 	bl	80016dc <HAL_GetTick>
 800276a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe ffb5 	bl	80016dc <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e10c      	b.n	800299a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002780:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278c:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800278e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002790:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x768>)
 8002792:	4013      	ands	r3, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	430a      	orrs	r2, r1
 80027a0:	4942      	ldr	r1, [pc, #264]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	628b      	str	r3, [r1, #40]	; 0x28
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	3b01      	subs	r3, #1
 80027b6:	025b      	lsls	r3, r3, #9
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
 80027c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ce:	3b01      	subs	r3, #1
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027d6:	4935      	ldr	r1, [pc, #212]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027dc:	4b33      	ldr	r3, [pc, #204]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	4a32      	ldr	r2, [pc, #200]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80027ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ec:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RCC_OscConfig+0x76c>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027f4:	00d2      	lsls	r2, r2, #3
 80027f6:	492d      	ldr	r1, [pc, #180]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	f023 020c 	bic.w	r2, r3, #12
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	4928      	ldr	r1, [pc, #160]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800280a:	4313      	orrs	r3, r2
 800280c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800280e:	4b27      	ldr	r3, [pc, #156]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	f023 0202 	bic.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	4924      	ldr	r1, [pc, #144]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800281c:	4313      	orrs	r3, r2
 800281e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002820:	4b22      	ldr	r3, [pc, #136]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	4a21      	ldr	r2, [pc, #132]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800283e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a15      	ldr	r2, [pc, #84]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe ff3e 	bl	80016dc <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe ff3a 	bl	80016dc <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e091      	b.n	800299a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x71c>
 8002882:	e089      	b.n	8002998 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_RCC_OscConfig+0x764>)
 800288a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe ff24 	bl	80016dc <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002896:	e00f      	b.n	80028b8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe ff20 	bl	80016dc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d908      	bls.n	80028b8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e077      	b.n	800299a <HAL_RCC_OscConfig+0x852>
 80028aa:	bf00      	nop
 80028ac:	58024400 	.word	0x58024400
 80028b0:	fffffc0c 	.word	0xfffffc0c
 80028b4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e9      	bne.n	8002898 <HAL_RCC_OscConfig+0x750>
 80028c4:	e068      	b.n	8002998 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028cc:	4b35      	ldr	r3, [pc, #212]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d031      	beq.n	800293e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d12a      	bne.n	800293e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d122      	bne.n	800293e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d11a      	bne.n	800293e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0a5b      	lsrs	r3, r3, #9
 800290c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d111      	bne.n	800293e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d108      	bne.n	800293e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	0e1b      	lsrs	r3, r3, #24
 8002930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e02b      	b.n	800299a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	08db      	lsrs	r3, r3, #3
 8002948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800294c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	429a      	cmp	r2, r3
 8002956:	d01f      	beq.n	8002998 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002964:	f7fe feba 	bl	80016dc <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800296a:	bf00      	nop
 800296c:	f7fe feb6 	bl	80016dc <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	4293      	cmp	r3, r2
 8002976:	d0f9      	beq.n	800296c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 800297a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_RCC_OscConfig+0x860>)
 800297e:	4013      	ands	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002984:	00d2      	lsls	r2, r2, #3
 8002986:	4907      	ldr	r1, [pc, #28]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 8002988:	4313      	orrs	r3, r2
 800298a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_RCC_OscConfig+0x85c>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3730      	adds	r7, #48	; 0x30
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
 80029a8:	ffff0007 	.word	0xffff0007

080029ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e19c      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b8a      	ldr	r3, [pc, #552]	; (8002bec <HAL_RCC_ClockConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b87      	ldr	r3, [pc, #540]	; (8002bec <HAL_RCC_ClockConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 020f 	bic.w	r2, r3, #15
 80029d6:	4985      	ldr	r1, [pc, #532]	; (8002bec <HAL_RCC_ClockConfig+0x240>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b83      	ldr	r3, [pc, #524]	; (8002bec <HAL_RCC_ClockConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e184      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	4b7b      	ldr	r3, [pc, #492]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d908      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a0c:	4b78      	ldr	r3, [pc, #480]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	4975      	ldr	r1, [pc, #468]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d010      	beq.n	8002a4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	4b70      	ldr	r3, [pc, #448]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d908      	bls.n	8002a4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a3a:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	496a      	ldr	r1, [pc, #424]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d010      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	4b64      	ldr	r3, [pc, #400]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d908      	bls.n	8002a7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a68:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	495e      	ldr	r1, [pc, #376]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d908      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a96:	4b56      	ldr	r3, [pc, #344]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4953      	ldr	r1, [pc, #332]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d908      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f023 020f 	bic.w	r2, r3, #15
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4947      	ldr	r1, [pc, #284]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d055      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ae2:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4940      	ldr	r1, [pc, #256]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002afc:	4b3c      	ldr	r3, [pc, #240]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d121      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0f6      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b14:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d115      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0ea      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b2c:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0de      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0d6      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b4c:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f023 0207 	bic.w	r2, r3, #7
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4925      	ldr	r1, [pc, #148]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5e:	f7fe fdbd 	bl	80016dc <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b66:	f7fe fdb9 	bl	80016dc <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0be      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d1eb      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d010      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d208      	bcs.n	8002bbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f023 020f 	bic.w	r2, r3, #15
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_ClockConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d214      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_RCC_ClockConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 020f 	bic.w	r2, r3, #15
 8002bd2:	4906      	ldr	r1, [pc, #24]	; (8002bec <HAL_RCC_ClockConfig+0x240>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b04      	ldr	r3, [pc, #16]	; (8002bec <HAL_RCC_ClockConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e086      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
 8002bec:	52002000 	.word	0x52002000
 8002bf0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d208      	bcs.n	8002c22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c10:	4b3c      	ldr	r3, [pc, #240]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	4939      	ldr	r1, [pc, #228]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d208      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c3e:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	492e      	ldr	r1, [pc, #184]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d208      	bcs.n	8002c7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4922      	ldr	r1, [pc, #136]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d010      	beq.n	8002cac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d208      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4917      	ldr	r1, [pc, #92]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002cac:	f000 f834 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	4912      	ldr	r1, [pc, #72]	; (8002d08 <HAL_RCC_ClockConfig+0x35c>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_RCC_ClockConfig+0x35c>)
 8002cd4:	5cd3      	ldrb	r3, [r2, r3]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x360>)
 8002ce2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x364>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_ClockConfig+0x368>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fcaa 	bl	8001648 <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	58024400 	.word	0x58024400
 8002d08:	08009f94 	.word	0x08009f94
 8002d0c:	24000004 	.word	0x24000004
 8002d10:	24000000 	.word	0x24000000
 8002d14:	24000008 	.word	0x24000008

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1e:	4bb3      	ldr	r3, [pc, #716]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d26:	2b18      	cmp	r3, #24
 8002d28:	f200 8155 	bhi.w	8002fd6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002d2c:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d99 	.word	0x08002d99
 8002d38:	08002fd7 	.word	0x08002fd7
 8002d3c:	08002fd7 	.word	0x08002fd7
 8002d40:	08002fd7 	.word	0x08002fd7
 8002d44:	08002fd7 	.word	0x08002fd7
 8002d48:	08002fd7 	.word	0x08002fd7
 8002d4c:	08002fd7 	.word	0x08002fd7
 8002d50:	08002fd7 	.word	0x08002fd7
 8002d54:	08002dbf 	.word	0x08002dbf
 8002d58:	08002fd7 	.word	0x08002fd7
 8002d5c:	08002fd7 	.word	0x08002fd7
 8002d60:	08002fd7 	.word	0x08002fd7
 8002d64:	08002fd7 	.word	0x08002fd7
 8002d68:	08002fd7 	.word	0x08002fd7
 8002d6c:	08002fd7 	.word	0x08002fd7
 8002d70:	08002fd7 	.word	0x08002fd7
 8002d74:	08002dc5 	.word	0x08002dc5
 8002d78:	08002fd7 	.word	0x08002fd7
 8002d7c:	08002fd7 	.word	0x08002fd7
 8002d80:	08002fd7 	.word	0x08002fd7
 8002d84:	08002fd7 	.word	0x08002fd7
 8002d88:	08002fd7 	.word	0x08002fd7
 8002d8c:	08002fd7 	.word	0x08002fd7
 8002d90:	08002fd7 	.word	0x08002fd7
 8002d94:	08002dcb 	.word	0x08002dcb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d98:	4b94      	ldr	r3, [pc, #592]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002da4:	4b91      	ldr	r3, [pc, #580]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	08db      	lsrs	r3, r3, #3
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	4a90      	ldr	r2, [pc, #576]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002db6:	e111      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002db8:	4b8d      	ldr	r3, [pc, #564]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dba:	61bb      	str	r3, [r7, #24]
      break;
 8002dbc:	e10e      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002dbe:	4b8d      	ldr	r3, [pc, #564]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002dc0:	61bb      	str	r3, [r7, #24]
      break;
 8002dc2:	e10b      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002dc4:	4b8c      	ldr	r3, [pc, #560]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dc6:	61bb      	str	r3, [r7, #24]
      break;
 8002dc8:	e108      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dca:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dd4:	4b85      	ldr	r3, [pc, #532]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dde:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002de0:	4b82      	ldr	r3, [pc, #520]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dea:	4b80      	ldr	r3, [pc, #512]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	08db      	lsrs	r3, r3, #3
 8002df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80e1 	beq.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	f000 8083 	beq.w	8002f1c <HAL_RCC_GetSysClockFreq+0x204>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	f200 80a1 	bhi.w	8002f60 <HAL_RCC_GetSysClockFreq+0x248>
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x114>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d056      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e2a:	e099      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e2c:	4b6f      	ldr	r3, [pc, #444]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d02d      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e38:	4b6c      	ldr	r3, [pc, #432]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	4a6b      	ldr	r2, [pc, #428]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
 8002e48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e62:	4b62      	ldr	r3, [pc, #392]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e92:	e087      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003000 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ea6:	4b51      	ldr	r3, [pc, #324]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ed6:	e065      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003004 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eea:	4b40      	ldr	r3, [pc, #256]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002efe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f1a:	e043      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003008 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f5e:	e021      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003004 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fa2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	0a5b      	lsrs	r3, r3, #9
 8002faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fae:	3301      	adds	r3, #1
 8002fb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc8:	ee17 3a90 	vmov	r3, s15
 8002fcc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fce:	e005      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
      break;
 8002fd4:	e002      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fd8:	61bb      	str	r3, [r7, #24]
      break;
 8002fda:	bf00      	nop
  }

  return sysclockfreq;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	58024400 	.word	0x58024400
 8002ff0:	03d09000 	.word	0x03d09000
 8002ff4:	003d0900 	.word	0x003d0900
 8002ff8:	007a1200 	.word	0x007a1200
 8002ffc:	46000000 	.word	0x46000000
 8003000:	4c742400 	.word	0x4c742400
 8003004:	4a742400 	.word	0x4a742400
 8003008:	4af42400 	.word	0x4af42400

0800300c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003012:	f7ff fe81 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8003016:	4602      	mov	r2, r0
 8003018:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_RCC_GetHCLKFreq+0x50>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	490f      	ldr	r1, [pc, #60]	; (8003060 <HAL_RCC_GetHCLKFreq+0x54>)
 8003024:	5ccb      	ldrb	r3, [r1, r3]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_RCC_GetHCLKFreq+0x50>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <HAL_RCC_GetHCLKFreq+0x54>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	4a07      	ldr	r2, [pc, #28]	; (8003064 <HAL_RCC_GetHCLKFreq+0x58>)
 8003048:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800304a:	4a07      	ldr	r2, [pc, #28]	; (8003068 <HAL_RCC_GetHCLKFreq+0x5c>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <HAL_RCC_GetHCLKFreq+0x58>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	58024400 	.word	0x58024400
 8003060:	08009f94 	.word	0x08009f94
 8003064:	24000004 	.word	0x24000004
 8003068:	24000000 	.word	0x24000000

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003070:	f7ff ffcc 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	58024400 	.word	0x58024400
 8003094:	08009f94 	.word	0x08009f94

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800309c:	f7ff ffb6 	bl	800300c <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4904      	ldr	r1, [pc, #16]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	58024400 	.word	0x58024400
 80030c0:	08009f94 	.word	0x08009f94

080030c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b0c8      	sub	sp, #288	; 0x120
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80030e8:	2500      	movs	r5, #0
 80030ea:	ea54 0305 	orrs.w	r3, r4, r5
 80030ee:	d049      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80030f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030fa:	d02f      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80030fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003100:	d828      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003106:	d01a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800310c:	d822      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003116:	d007      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003118:	e01c      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800311a:	4ba7      	ldr	r3, [pc, #668]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	4aa6      	ldr	r2, [pc, #664]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003126:	e01a      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800312c:	3308      	adds	r3, #8
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f001 fc43 	bl	80049bc <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800313c:	e00f      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800313e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003142:	3328      	adds	r3, #40	; 0x28
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f001 fcea 	bl	8004b20 <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800315c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003166:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800316e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003174:	4a90      	ldr	r2, [pc, #576]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003176:	430b      	orrs	r3, r1
 8003178:	6513      	str	r3, [r2, #80]	; 0x50
 800317a:	e003      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003180:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003190:	f04f 0900 	mov.w	r9, #0
 8003194:	ea58 0309 	orrs.w	r3, r8, r9
 8003198:	d047      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800319a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d82a      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031c1 	.word	0x080031c1
 80031b0:	080031cf 	.word	0x080031cf
 80031b4:	080031e5 	.word	0x080031e5
 80031b8:	08003203 	.word	0x08003203
 80031bc:	08003203 	.word	0x08003203
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c0:	4b7d      	ldr	r3, [pc, #500]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	4a7c      	ldr	r2, [pc, #496]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031cc:	e01a      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d2:	3308      	adds	r3, #8
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 fbf0 	bl	80049bc <RCCEx_PLL2_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031e2:	e00f      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e8:	3328      	adds	r3, #40	; 0x28
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 fc97 	bl	8004b20 <RCCEx_PLL3_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031f8:	e004      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003200:	e000      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003204:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800320c:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800320e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003210:	f023 0107 	bic.w	r1, r3, #7
 8003214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	4a67      	ldr	r2, [pc, #412]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800321c:	430b      	orrs	r3, r1
 800321e:	6513      	str	r3, [r2, #80]	; 0x50
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003222:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003226:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800322a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003236:	f04f 0b00 	mov.w	fp, #0
 800323a:	ea5a 030b 	orrs.w	r3, sl, fp
 800323e:	d054      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800324a:	d036      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800324c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003250:	d82f      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003256:	d032      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325c:	d829      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800325e:	2bc0      	cmp	r3, #192	; 0xc0
 8003260:	d02f      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003262:	2bc0      	cmp	r3, #192	; 0xc0
 8003264:	d825      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	d018      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	d821      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d007      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003276:	e01c      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003278:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	4a4e      	ldr	r2, [pc, #312]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800327e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003284:	e01e      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800328a:	3308      	adds	r3, #8
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fb94 	bl	80049bc <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800329a:	e013      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800329c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a0:	3328      	adds	r3, #40	; 0x28
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 fc3b 	bl	8004b20 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80032b0:	e008      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032b8:	e004      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80032ba:	bf00      	nop
 80032bc:	e002      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80032c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80032d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	4a37      	ldr	r2, [pc, #220]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	6513      	str	r3, [r2, #80]	; 0x50
 80032e0:	e003      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80032ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80032f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80032fa:	2300      	movs	r3, #0
 80032fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003300:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003304:	460b      	mov	r3, r1
 8003306:	4313      	orrs	r3, r2
 8003308:	d05c      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800330a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003310:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003314:	d03b      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003316:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800331a:	d834      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003320:	d037      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003326:	d82e      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003328:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800332c:	d033      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800332e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003332:	d828      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	d01a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d822      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003348:	d007      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800334a:	e01c      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003358:	e01e      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800335a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335e:	3308      	adds	r3, #8
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fb2a 	bl	80049bc <RCCEx_PLL2_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800336e:	e013      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003374:	3328      	adds	r3, #40	; 0x28
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f001 fbd1 	bl	8004b20 <RCCEx_PLL3_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003384:	e008      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800338c:	e004      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800338e:	bf00      	nop
 8003390:	e002      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003392:	bf00      	nop
 8003394:	e000      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003398:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80033a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ae:	4a02      	ldr	r2, [pc, #8]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6513      	str	r3, [r2, #80]	; 0x50
 80033b4:	e006      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80033b6:	bf00      	nop
 80033b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80033d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80033da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80033de:	460b      	mov	r3, r1
 80033e0:	4313      	orrs	r3, r2
 80033e2:	d03a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80033e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	2b30      	cmp	r3, #48	; 0x30
 80033ec:	d01f      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80033ee:	2b30      	cmp	r3, #48	; 0x30
 80033f0:	d819      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d00c      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d815      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d111      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003402:	4bae      	ldr	r3, [pc, #696]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	4aad      	ldr	r2, [pc, #692]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800340e:	e011      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003414:	3308      	adds	r3, #8
 8003416:	2102      	movs	r1, #2
 8003418:	4618      	mov	r0, r3
 800341a:	f001 facf 	bl	80049bc <RCCEx_PLL2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800342c:	e002      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003434:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800343c:	4b9f      	ldr	r3, [pc, #636]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800343e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003440:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	4a9c      	ldr	r2, [pc, #624]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800344c:	430b      	orrs	r3, r1
 800344e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003450:	e003      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003452:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003456:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003466:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800346a:	2300      	movs	r3, #0
 800346c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003470:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003474:	460b      	mov	r3, r1
 8003476:	4313      	orrs	r3, r2
 8003478:	d051      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800347a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003484:	d035      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348a:	d82e      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 800348c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003490:	d031      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003492:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003496:	d828      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d01a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	d822      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d007      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80034ae:	e01c      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b0:	4b82      	ldr	r3, [pc, #520]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	4a81      	ldr	r2, [pc, #516]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034bc:	e01c      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c2:	3308      	adds	r3, #8
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f001 fa78 	bl	80049bc <RCCEx_PLL2_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034d2:	e011      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d8:	3328      	adds	r3, #40	; 0x28
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 fb1f 	bl	8004b20 <RCCEx_PLL3_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034e8:	e006      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034f0:	e002      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80034f2:	bf00      	nop
 80034f4:	e000      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80034f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003500:	4b6e      	ldr	r3, [pc, #440]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800350e:	4a6b      	ldr	r2, [pc, #428]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003510:	430b      	orrs	r3, r1
 8003512:	6513      	str	r3, [r2, #80]	; 0x50
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003516:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800351a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800351e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800352a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003534:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003538:	460b      	mov	r3, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	d053      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800353e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003548:	d033      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800354a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800354e:	d82c      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003554:	d02f      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003556:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800355a:	d826      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800355c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003560:	d02b      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003562:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003566:	d820      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800356c:	d012      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800356e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003572:	d81a      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d022      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d115      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800357e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003582:	3308      	adds	r3, #8
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fa18 	bl	80049bc <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003592:	e015      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003598:	3328      	adds	r3, #40	; 0x28
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f001 fabf 	bl	8004b20 <RCCEx_PLL3_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035a8:	e00a      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035b0:	e006      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80035b2:	bf00      	nop
 80035b4:	e004      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80035b6:	bf00      	nop
 80035b8:	e002      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80035ba:	bf00      	nop
 80035bc:	e000      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80035be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035c8:	4b3c      	ldr	r3, [pc, #240]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80035d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d6:	4a39      	ldr	r2, [pc, #228]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035d8:	430b      	orrs	r3, r1
 80035da:	6513      	str	r3, [r2, #80]	; 0x50
 80035dc:	e003      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80035f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035f6:	2300      	movs	r3, #0
 80035f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003600:	460b      	mov	r3, r1
 8003602:	4313      	orrs	r3, r2
 8003604:	d060      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800360e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003612:	d039      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003614:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003618:	d832      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800361a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800361e:	d035      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003624:	d82c      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d031      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d826      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003632:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003636:	d02d      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003638:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800363c:	d820      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800363e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003642:	d012      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003648:	d81a      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d024      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800364e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003652:	d115      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003658:	3308      	adds	r3, #8
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f001 f9ad 	bl	80049bc <RCCEx_PLL2_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003668:	e017      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800366a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366e:	3328      	adds	r3, #40	; 0x28
 8003670:	2101      	movs	r1, #1
 8003672:	4618      	mov	r0, r3
 8003674:	f001 fa54 	bl	8004b20 <RCCEx_PLL3_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800367e:	e00c      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003686:	e008      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003688:	bf00      	nop
 800368a:	e006      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800368c:	bf00      	nop
 800368e:	e004      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003690:	bf00      	nop
 8003692:	e002      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80036aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036b2:	4a02      	ldr	r2, [pc, #8]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6593      	str	r3, [r2, #88]	; 0x58
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80036d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80036de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036e2:	460b      	mov	r3, r1
 80036e4:	4313      	orrs	r3, r2
 80036e6:	d037      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f2:	d00e      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80036f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f8:	d816      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80036fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003702:	d111      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003704:	4bc4      	ldr	r3, [pc, #784]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	4ac3      	ldr	r2, [pc, #780]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003710:	e00f      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003716:	3308      	adds	r3, #8
 8003718:	2101      	movs	r1, #1
 800371a:	4618      	mov	r0, r3
 800371c:	f001 f94e 	bl	80049bc <RCCEx_PLL2_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003726:	e004      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800372e:	e000      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003732:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800373a:	4bb7      	ldr	r3, [pc, #732]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003748:	4ab3      	ldr	r2, [pc, #716]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800374a:	430b      	orrs	r3, r1
 800374c:	6513      	str	r3, [r2, #80]	; 0x50
 800374e:	e003      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003754:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800376e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003772:	460b      	mov	r3, r1
 8003774:	4313      	orrs	r3, r2
 8003776:	d039      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	2b03      	cmp	r3, #3
 8003780:	d81c      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	080037c5 	.word	0x080037c5
 800378c:	08003799 	.word	0x08003799
 8003790:	080037a7 	.word	0x080037a7
 8003794:	080037c5 	.word	0x080037c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4b9f      	ldr	r3, [pc, #636]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	4a9e      	ldr	r2, [pc, #632]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037a4:	e00f      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037aa:	3308      	adds	r3, #8
 80037ac:	2102      	movs	r1, #2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f904 	bl	80049bc <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80037c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037ce:	4b92      	ldr	r3, [pc, #584]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	f023 0103 	bic.w	r1, r3, #3
 80037d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037dc:	4a8e      	ldr	r2, [pc, #568]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037e2:	e003      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80037f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003802:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003806:	460b      	mov	r3, r1
 8003808:	4313      	orrs	r3, r2
 800380a:	f000 8099 	beq.w	8003940 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380e:	4b83      	ldr	r3, [pc, #524]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a82      	ldr	r2, [pc, #520]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800381a:	f7fd ff5f 	bl	80016dc <HAL_GetTick>
 800381e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003822:	e00b      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fd ff5a 	bl	80016dc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b64      	cmp	r3, #100	; 0x64
 8003832:	d903      	bls.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800383a:	e005      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800383c:	4b77      	ldr	r3, [pc, #476]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ed      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003848:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800384c:	2b00      	cmp	r3, #0
 800384e:	d173      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003850:	4b71      	ldr	r3, [pc, #452]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800385c:	4053      	eors	r3, r2
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	2b00      	cmp	r3, #0
 8003864:	d015      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003866:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003872:	4b69      	ldr	r3, [pc, #420]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a68      	ldr	r2, [pc, #416]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800387e:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a65      	ldr	r2, [pc, #404]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800388a:	4a63      	ldr	r2, [pc, #396]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003896:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800389a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389e:	d118      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd ff1c 	bl	80016dc <HAL_GetTick>
 80038a4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038a8:	e00d      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fd ff17 	bl	80016dc <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80038b4:	1ad2      	subs	r2, r2, r3
 80038b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d903      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80038c4:	e005      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038c6:	4b54      	ldr	r3, [pc, #336]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0eb      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80038d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d129      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ea:	d10e      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80038ec:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80038f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038fc:	091a      	lsrs	r2, r3, #4
 80038fe:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003900:	4013      	ands	r3, r2
 8003902:	4a45      	ldr	r2, [pc, #276]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003904:	430b      	orrs	r3, r1
 8003906:	6113      	str	r3, [r2, #16]
 8003908:	e005      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800390a:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	4a42      	ldr	r2, [pc, #264]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003910:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003914:	6113      	str	r3, [r2, #16]
 8003916:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003918:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800391a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003926:	4a3c      	ldr	r2, [pc, #240]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003928:	430b      	orrs	r3, r1
 800392a:	6713      	str	r3, [r2, #112]	; 0x70
 800392c:	e008      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800392e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003932:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003936:	e003      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800393c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f002 0301 	and.w	r3, r2, #1
 800394c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003956:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	f000 8090 	beq.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396a:	2b28      	cmp	r3, #40	; 0x28
 800396c:	d870      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	08003a59 	.word	0x08003a59
 8003978:	08003a51 	.word	0x08003a51
 800397c:	08003a51 	.word	0x08003a51
 8003980:	08003a51 	.word	0x08003a51
 8003984:	08003a51 	.word	0x08003a51
 8003988:	08003a51 	.word	0x08003a51
 800398c:	08003a51 	.word	0x08003a51
 8003990:	08003a51 	.word	0x08003a51
 8003994:	08003a25 	.word	0x08003a25
 8003998:	08003a51 	.word	0x08003a51
 800399c:	08003a51 	.word	0x08003a51
 80039a0:	08003a51 	.word	0x08003a51
 80039a4:	08003a51 	.word	0x08003a51
 80039a8:	08003a51 	.word	0x08003a51
 80039ac:	08003a51 	.word	0x08003a51
 80039b0:	08003a51 	.word	0x08003a51
 80039b4:	08003a3b 	.word	0x08003a3b
 80039b8:	08003a51 	.word	0x08003a51
 80039bc:	08003a51 	.word	0x08003a51
 80039c0:	08003a51 	.word	0x08003a51
 80039c4:	08003a51 	.word	0x08003a51
 80039c8:	08003a51 	.word	0x08003a51
 80039cc:	08003a51 	.word	0x08003a51
 80039d0:	08003a51 	.word	0x08003a51
 80039d4:	08003a59 	.word	0x08003a59
 80039d8:	08003a51 	.word	0x08003a51
 80039dc:	08003a51 	.word	0x08003a51
 80039e0:	08003a51 	.word	0x08003a51
 80039e4:	08003a51 	.word	0x08003a51
 80039e8:	08003a51 	.word	0x08003a51
 80039ec:	08003a51 	.word	0x08003a51
 80039f0:	08003a51 	.word	0x08003a51
 80039f4:	08003a59 	.word	0x08003a59
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a51 	.word	0x08003a51
 8003a08:	08003a51 	.word	0x08003a51
 8003a0c:	08003a51 	.word	0x08003a51
 8003a10:	08003a51 	.word	0x08003a51
 8003a14:	08003a59 	.word	0x08003a59
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	58024800 	.word	0x58024800
 8003a20:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a28:	3308      	adds	r3, #8
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 ffc5 	bl	80049bc <RCCEx_PLL2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a38:	e00f      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3e:	3328      	adds	r3, #40	; 0x28
 8003a40:	2101      	movs	r1, #1
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 f86c 	bl	8004b20 <RCCEx_PLL3_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a62:	4bc0      	ldr	r3, [pc, #768]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a72:	4abc      	ldr	r2, [pc, #752]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6553      	str	r3, [r2, #84]	; 0x54
 8003a78:	e003      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f002 0302 	and.w	r3, r2, #2
 8003a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a98:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	d043      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d824      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003b01 	.word	0x08003b01
 8003ab8:	08003acd 	.word	0x08003acd
 8003abc:	08003ae3 	.word	0x08003ae3
 8003ac0:	08003b01 	.word	0x08003b01
 8003ac4:	08003b01 	.word	0x08003b01
 8003ac8:	08003b01 	.word	0x08003b01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 ff71 	bl	80049bc <RCCEx_PLL2_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ae0:	e00f      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae6:	3328      	adds	r3, #40	; 0x28
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 f818 	bl	8004b20 <RCCEx_PLL3_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003af6:	e004      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003afe:	e000      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b0a:	4b96      	ldr	r3, [pc, #600]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f023 0107 	bic.w	r1, r3, #7
 8003b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b1a:	4a92      	ldr	r2, [pc, #584]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6553      	str	r3, [r2, #84]	; 0x54
 8003b20:	e003      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f002 0304 	and.w	r3, r2, #4
 8003b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b40:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4313      	orrs	r3, r2
 8003b48:	d043      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b52:	2b05      	cmp	r3, #5
 8003b54:	d824      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003ba9 	.word	0x08003ba9
 8003b60:	08003b75 	.word	0x08003b75
 8003b64:	08003b8b 	.word	0x08003b8b
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003ba9 	.word	0x08003ba9
 8003b70:	08003ba9 	.word	0x08003ba9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b78:	3308      	adds	r3, #8
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 ff1d 	bl	80049bc <RCCEx_PLL2_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b88:	e00f      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8e:	3328      	adds	r3, #40	; 0x28
 8003b90:	2101      	movs	r1, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 ffc4 	bl	8004b20 <RCCEx_PLL3_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b9e:	e004      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003baa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bb2:	4b6c      	ldr	r3, [pc, #432]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	f023 0107 	bic.w	r1, r3, #7
 8003bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc2:	4a68      	ldr	r2, [pc, #416]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc8:	e003      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f002 0320 	and.w	r3, r2, #32
 8003bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003be8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bec:	460b      	mov	r3, r1
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	d055      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bfe:	d033      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c04:	d82c      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0a:	d02f      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d826      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c16:	d02b      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003c18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c1c:	d820      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c22:	d012      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c28:	d81a      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d022      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c32:	d115      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c38:	3308      	adds	r3, #8
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 febd 	bl	80049bc <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c48:	e015      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4e:	3328      	adds	r3, #40	; 0x28
 8003c50:	2102      	movs	r1, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 ff64 	bl	8004b20 <RCCEx_PLL3_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c66:	e006      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003c68:	bf00      	nop
 8003c6a:	e004      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003c6c:	bf00      	nop
 8003c6e:	e002      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003c70:	bf00      	nop
 8003c72:	e000      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c7e:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c8e:	4a35      	ldr	r2, [pc, #212]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6553      	str	r3, [r2, #84]	; 0x54
 8003c94:	e003      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003cb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d058      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cca:	d033      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003ccc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cd0:	d82c      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd6:	d02f      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cdc:	d826      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce2:	d02b      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003ce4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce8:	d820      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cee:	d012      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf4:	d81a      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d022      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d115      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d04:	3308      	adds	r3, #8
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fe57 	bl	80049bc <RCCEx_PLL2_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d14:	e015      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d1a:	3328      	adds	r3, #40	; 0x28
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fefe 	bl	8004b20 <RCCEx_PLL3_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d32:	e006      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003d34:	bf00      	nop
 8003d36:	e004      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003d38:	bf00      	nop
 8003d3a:	e002      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003d3c:	bf00      	nop
 8003d3e:	e000      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10e      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d5a:	4a02      	ldr	r2, [pc, #8]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d60:	e006      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003d62:	bf00      	nop
 8003d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d80:	2300      	movs	r3, #0
 8003d82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	d055      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d9c:	d033      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003d9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003da2:	d82c      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da8:	d02f      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dae:	d826      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003db0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003db4:	d02b      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003db6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dba:	d820      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc0:	d012      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc6:	d81a      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d022      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd0:	d115      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fdee 	bl	80049bc <RCCEx_PLL2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003de6:	e015      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dec:	3328      	adds	r3, #40	; 0x28
 8003dee:	2102      	movs	r1, #2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fe95 	bl	8004b20 <RCCEx_PLL3_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e04:	e006      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e06:	bf00      	nop
 8003e08:	e004      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e002      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e0e:	bf00      	nop
 8003e10:	e000      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e1c:	4ba1      	ldr	r3, [pc, #644]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e2c:	4a9d      	ldr	r2, [pc, #628]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	6593      	str	r3, [r2, #88]	; 0x58
 8003e32:	e003      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f002 0308 	and.w	r3, r2, #8
 8003e48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e56:	460b      	mov	r3, r1
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	d01e      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6e:	3328      	adds	r3, #40	; 0x28
 8003e70:	2102      	movs	r1, #2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fe54 	bl	8004b20 <RCCEx_PLL3_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e84:	4b87      	ldr	r3, [pc, #540]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e94:	4a83      	ldr	r2, [pc, #524]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f002 0310 	and.w	r3, r2, #16
 8003ea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003eb0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	d01e      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ebe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	3328      	adds	r3, #40	; 0x28
 8003ece:	2102      	movs	r1, #2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fe25 	bl	8004b20 <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ee2:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ef2:	4a6c      	ldr	r2, [pc, #432]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003f12:	460b      	mov	r3, r1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	d03e      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f24:	d022      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f2a:	d81b      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d00b      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003f36:	e015      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fd3b 	bl	80049bc <RCCEx_PLL2_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f4c:	e00f      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f52:	3328      	adds	r3, #40	; 0x28
 8003f54:	2102      	movs	r1, #2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fde2 	bl	8004b20 <RCCEx_PLL3_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f62:	e004      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f6a:	e000      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f76:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f86:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f8c:	e003      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003fa2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fa8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003fac:	460b      	mov	r3, r1
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	d03b      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fbe:	d01f      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003fc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fc4:	d818      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fca:	d003      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fd0:	d007      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003fd2:	e011      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	4a32      	ldr	r2, [pc, #200]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fe0:	e00f      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe6:	3328      	adds	r3, #40	; 0x28
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fd98 	bl	8004b20 <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6553      	str	r3, [r2, #84]	; 0x54
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004022:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004026:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004036:	673b      	str	r3, [r7, #112]	; 0x70
 8004038:	2300      	movs	r3, #0
 800403a:	677b      	str	r3, [r7, #116]	; 0x74
 800403c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d034      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d007      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004056:	e011      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800405e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004064:	e00e      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406a:	3308      	adds	r3, #8
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fca4 	bl	80049bc <RCCEx_PLL2_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004084:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10d      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409a:	4a02      	ldr	r2, [pc, #8]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800409c:	430b      	orrs	r3, r1
 800409e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040a0:	e006      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80040a2:	bf00      	nop
 80040a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80040bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80040be:	2300      	movs	r3, #0
 80040c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80040c6:	460b      	mov	r3, r1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	d00c      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d0:	3328      	adds	r3, #40	; 0x28
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fd23 	bl	8004b20 <RCCEx_PLL3_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80040f2:	663b      	str	r3, [r7, #96]	; 0x60
 80040f4:	2300      	movs	r3, #0
 80040f6:	667b      	str	r3, [r7, #100]	; 0x64
 80040f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80040fc:	460b      	mov	r3, r1
 80040fe:	4313      	orrs	r3, r2
 8004100:	d038      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410e:	d018      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004114:	d811      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800411a:	d014      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800411c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004120:	d80b      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d011      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412a:	d106      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412c:	4bc3      	ldr	r3, [pc, #780]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4ac2      	ldr	r2, [pc, #776]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004138:	e008      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004140:	e004      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004142:	bf00      	nop
 8004144:	e002      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800414a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004154:	4bb9      	ldr	r3, [pc, #740]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	4ab5      	ldr	r2, [pc, #724]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004166:	430b      	orrs	r3, r1
 8004168:	6553      	str	r3, [r2, #84]	; 0x54
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004170:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004180:	65bb      	str	r3, [r7, #88]	; 0x58
 8004182:	2300      	movs	r3, #0
 8004184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004186:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800418a:	460b      	mov	r3, r1
 800418c:	4313      	orrs	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004190:	4baa      	ldr	r3, [pc, #680]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004194:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419e:	4aa7      	ldr	r2, [pc, #668]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80041b0:	653b      	str	r3, [r7, #80]	; 0x50
 80041b2:	2300      	movs	r3, #0
 80041b4:	657b      	str	r3, [r7, #84]	; 0x54
 80041b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80041ba:	460b      	mov	r3, r1
 80041bc:	4313      	orrs	r3, r2
 80041be:	d009      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041c0:	4b9e      	ldr	r3, [pc, #632]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80041c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a9b      	ldr	r2, [pc, #620]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80041d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80041e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e2:	2300      	movs	r3, #0
 80041e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80041ea:	460b      	mov	r3, r1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	d009      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80041f0:	4b92      	ldr	r3, [pc, #584]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fe:	4a8f      	ldr	r2, [pc, #572]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004200:	430b      	orrs	r3, r1
 8004202:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004210:	643b      	str	r3, [r7, #64]	; 0x40
 8004212:	2300      	movs	r3, #0
 8004214:	647b      	str	r3, [r7, #68]	; 0x44
 8004216:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800421a:	460b      	mov	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004220:	4b86      	ldr	r3, [pc, #536]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	4a85      	ldr	r2, [pc, #532]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004226:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800422a:	6113      	str	r3, [r2, #16]
 800422c:	4b83      	ldr	r3, [pc, #524]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800422e:	6919      	ldr	r1, [r3, #16]
 8004230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004234:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004238:	4a80      	ldr	r2, [pc, #512]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800423a:	430b      	orrs	r3, r1
 800423c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800424a:	63bb      	str	r3, [r7, #56]	; 0x38
 800424c:	2300      	movs	r3, #0
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004250:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004254:	460b      	mov	r3, r1
 8004256:	4313      	orrs	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800425a:	4b78      	ldr	r3, [pc, #480]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	4a74      	ldr	r2, [pc, #464]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800426a:	430b      	orrs	r3, r1
 800426c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800426e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
 800427c:	2300      	movs	r3, #0
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
 8004280:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004284:	460b      	mov	r3, r1
 8004286:	4313      	orrs	r3, r2
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800428a:	4b6c      	ldr	r3, [pc, #432]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429a:	4a68      	ldr	r2, [pc, #416]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800429c:	430b      	orrs	r3, r1
 800429e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	2100      	movs	r1, #0
 80042aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d011      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c0:	3308      	adds	r3, #8
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fb79 	bl	80049bc <RCCEx_PLL2_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80042d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	2100      	movs	r1, #0
 80042ea:	6239      	str	r1, [r7, #32]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
 80042f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042f6:	460b      	mov	r3, r1
 80042f8:	4313      	orrs	r3, r2
 80042fa:	d011      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004300:	3308      	adds	r3, #8
 8004302:	2101      	movs	r1, #1
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fb59 	bl	80049bc <RCCEx_PLL2_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004310:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800431c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	2100      	movs	r1, #0
 800432a:	61b9      	str	r1, [r7, #24]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d011      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800433c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004340:	3308      	adds	r3, #8
 8004342:	2102      	movs	r1, #2
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fb39 	bl	80049bc <RCCEx_PLL2_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004350:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004358:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800435c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	2100      	movs	r1, #0
 800436a:	6139      	str	r1, [r7, #16]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d011      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800437c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004380:	3328      	adds	r3, #40	; 0x28
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fbcb 	bl	8004b20 <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004390:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800439c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80043a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	2100      	movs	r1, #0
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043b6:	460b      	mov	r3, r1
 80043b8:	4313      	orrs	r3, r2
 80043ba:	d011      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c0:	3328      	adds	r3, #40	; 0x28
 80043c2:	2101      	movs	r1, #1
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fbab 	bl	8004b20 <RCCEx_PLL3_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80043d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	2100      	movs	r1, #0
 80043ea:	6039      	str	r1, [r7, #0]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043f6:	460b      	mov	r3, r1
 80043f8:	4313      	orrs	r3, r2
 80043fa:	d011      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004400:	3328      	adds	r3, #40	; 0x28
 8004402:	2102      	movs	r1, #2
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fb8b 	bl	8004b20 <RCCEx_PLL3_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004410:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800441c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004420:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
}
 800442e:	4618      	mov	r0, r3
 8004430:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004434:	46bd      	mov	sp, r7
 8004436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443a:	bf00      	nop
 800443c:	58024400 	.word	0x58024400

08004440 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004444:	f7fe fde2 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4904      	ldr	r1, [pc, #16]	; (8004468 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	58024400 	.word	0x58024400
 8004468:	08009f94 	.word	0x08009f94

0800446c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800446c:	b480      	push	{r7}
 800446e:	b089      	sub	sp, #36	; 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004474:	4ba1      	ldr	r3, [pc, #644]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800447e:	4b9f      	ldr	r3, [pc, #636]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	0b1b      	lsrs	r3, r3, #12
 8004484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004488:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800448a:	4b9c      	ldr	r3, [pc, #624]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004496:	4b99      	ldr	r3, [pc, #612]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	08db      	lsrs	r3, r3, #3
 800449c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8111 	beq.w	80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	f000 8083 	beq.w	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	f200 80a1 	bhi.w	800460c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d056      	beq.n	8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044d6:	e099      	b.n	800460c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d8:	4b88      	ldr	r3, [pc, #544]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02d      	beq.n	8004540 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044e4:	4b85      	ldr	r3, [pc, #532]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	08db      	lsrs	r3, r3, #3
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	4a84      	ldr	r2, [pc, #528]	; (8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
 80044f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	ee07 3a90 	vmov	s15, r3
 80044fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450e:	4b7b      	ldr	r3, [pc, #492]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004522:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800453e:	e087      	b.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800454e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004552:	4b6a      	ldr	r3, [pc, #424]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004562:	ed97 6a03 	vldr	s12, [r7, #12]
 8004566:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800456a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004582:	e065      	b.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800470c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b59      	ldr	r3, [pc, #356]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045c6:	e043      	b.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b48      	ldr	r3, [pc, #288]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800460a:	e021      	b.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800470c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b37      	ldr	r3, [pc, #220]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004632:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004650:	4b2a      	ldr	r3, [pc, #168]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	0a5b      	lsrs	r3, r3, #9
 8004656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800466a:	edd7 6a07 	vldr	s13, [r7, #28]
 800466e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004676:	ee17 2a90 	vmov	r2, s15
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800467e:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	0c1b      	lsrs	r3, r3, #16
 8004684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004688:	ee07 3a90 	vmov	s15, r3
 800468c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004698:	edd7 6a07 	vldr	s13, [r7, #28]
 800469c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a4:	ee17 2a90 	vmov	r2, s15
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	0e1b      	lsrs	r3, r3, #24
 80046b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d2:	ee17 2a90 	vmov	r2, s15
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046da:	e008      	b.n	80046ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]
}
 80046ee:	bf00      	nop
 80046f0:	3724      	adds	r7, #36	; 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	58024400 	.word	0x58024400
 8004700:	03d09000 	.word	0x03d09000
 8004704:	46000000 	.word	0x46000000
 8004708:	4c742400 	.word	0x4c742400
 800470c:	4a742400 	.word	0x4a742400
 8004710:	4af42400 	.word	0x4af42400

08004714 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800471c:	4ba1      	ldr	r3, [pc, #644]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004726:	4b9f      	ldr	r3, [pc, #636]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	0d1b      	lsrs	r3, r3, #20
 800472c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004730:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004732:	4b9c      	ldr	r3, [pc, #624]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800473e:	4b99      	ldr	r3, [pc, #612]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	08db      	lsrs	r3, r3, #3
 8004744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8111 	beq.w	8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b02      	cmp	r3, #2
 8004766:	f000 8083 	beq.w	8004870 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2b02      	cmp	r3, #2
 800476e:	f200 80a1 	bhi.w	80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d056      	beq.n	800482c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800477e:	e099      	b.n	80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004780:	4b88      	ldr	r3, [pc, #544]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d02d      	beq.n	80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800478c:	4b85      	ldr	r3, [pc, #532]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	08db      	lsrs	r3, r3, #3
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	4a84      	ldr	r2, [pc, #528]	; (80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b6:	4b7b      	ldr	r3, [pc, #492]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047e6:	e087      	b.n	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fa:	4b6a      	ldr	r3, [pc, #424]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480a:	ed97 6a03 	vldr	s12, [r7, #12]
 800480e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800481e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482a:	e065      	b.n	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800483a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483e:	4b59      	ldr	r3, [pc, #356]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004852:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800486e:	e043      	b.n	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004882:	4b48      	ldr	r3, [pc, #288]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004892:	ed97 6a03 	vldr	s12, [r7, #12]
 8004896:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800489a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b2:	e021      	b.n	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b37      	ldr	r3, [pc, #220]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80048f8:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	0a5b      	lsrs	r3, r3, #9
 80048fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800490e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004912:	edd7 6a07 	vldr	s13, [r7, #28]
 8004916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491e:	ee17 2a90 	vmov	r2, s15
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004930:	ee07 3a90 	vmov	s15, r3
 8004934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800493c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004940:	edd7 6a07 	vldr	s13, [r7, #28]
 8004944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494c:	ee17 2a90 	vmov	r2, s15
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	0e1b      	lsrs	r3, r3, #24
 800495a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800496a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800496e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497a:	ee17 2a90 	vmov	r2, s15
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004982:	e008      	b.n	8004996 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
}
 8004996:	bf00      	nop
 8004998:	3724      	adds	r7, #36	; 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
 80049a8:	03d09000 	.word	0x03d09000
 80049ac:	46000000 	.word	0x46000000
 80049b0:	4c742400 	.word	0x4c742400
 80049b4:	4a742400 	.word	0x4a742400
 80049b8:	4af42400 	.word	0x4af42400

080049bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049ca:	4b53      	ldr	r3, [pc, #332]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d101      	bne.n	80049da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e099      	b.n	8004b0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049da:	4b4f      	ldr	r3, [pc, #316]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a4e      	ldr	r2, [pc, #312]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 80049e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e6:	f7fc fe79 	bl	80016dc <HAL_GetTick>
 80049ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049ec:	e008      	b.n	8004a00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049ee:	f7fc fe75 	bl	80016dc <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e086      	b.n	8004b0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a00:	4b45      	ldr	r3, [pc, #276]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f0      	bne.n	80049ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a0c:	4b42      	ldr	r3, [pc, #264]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	031b      	lsls	r3, r3, #12
 8004a1a:	493f      	ldr	r1, [pc, #252]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	025b      	lsls	r3, r3, #9
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a50:	4931      	ldr	r1, [pc, #196]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a56:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	492d      	ldr	r1, [pc, #180]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a68:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	f023 0220 	bic.w	r2, r3, #32
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	4928      	ldr	r1, [pc, #160]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a7a:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a80:	f023 0310 	bic.w	r3, r3, #16
 8004a84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a8a:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <RCCEx_PLL2_Config+0x160>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	69d2      	ldr	r2, [r2, #28]
 8004a92:	00d2      	lsls	r2, r2, #3
 8004a94:	4920      	ldr	r1, [pc, #128]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a9a:	4b1f      	ldr	r3, [pc, #124]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	f043 0310 	orr.w	r3, r3, #16
 8004aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ab8:	e00f      	b.n	8004ada <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d106      	bne.n	8004ace <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ac0:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004acc:	e005      	b.n	8004ada <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ad8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ada:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a0e      	ldr	r2, [pc, #56]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae6:	f7fc fdf9 	bl	80016dc <HAL_GetTick>
 8004aea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004aec:	e008      	b.n	8004b00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004aee:	f7fc fdf5 	bl	80016dc <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e006      	b.n	8004b0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <RCCEx_PLL2_Config+0x15c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	58024400 	.word	0x58024400
 8004b1c:	ffff0007 	.word	0xffff0007

08004b20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b2e:	4b53      	ldr	r3, [pc, #332]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d101      	bne.n	8004b3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e099      	b.n	8004c72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b3e:	4b4f      	ldr	r3, [pc, #316]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a4e      	ldr	r2, [pc, #312]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4a:	f7fc fdc7 	bl	80016dc <HAL_GetTick>
 8004b4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b50:	e008      	b.n	8004b64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b52:	f7fc fdc3 	bl	80016dc <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e086      	b.n	8004c72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b64:	4b45      	ldr	r3, [pc, #276]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f0      	bne.n	8004b52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b70:	4b42      	ldr	r3, [pc, #264]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	051b      	lsls	r3, r3, #20
 8004b7e:	493f      	ldr	r1, [pc, #252]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	628b      	str	r3, [r1, #40]	; 0x28
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	025b      	lsls	r3, r3, #9
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	061b      	lsls	r3, r3, #24
 8004bb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bb4:	4931      	ldr	r1, [pc, #196]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bba:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	492d      	ldr	r1, [pc, #180]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	4928      	ldr	r1, [pc, #160]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bde:	4b27      	ldr	r3, [pc, #156]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bee:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <RCCEx_PLL3_Config+0x160>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	69d2      	ldr	r2, [r2, #28]
 8004bf6:	00d2      	lsls	r2, r2, #3
 8004bf8:	4920      	ldr	r1, [pc, #128]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bfe:	4b1f      	ldr	r3, [pc, #124]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c10:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c1c:	e00f      	b.n	8004c3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d106      	bne.n	8004c32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c24:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c30:	e005      	b.n	8004c3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c3e:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a0e      	ldr	r2, [pc, #56]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4a:	f7fc fd47 	bl	80016dc <HAL_GetTick>
 8004c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c50:	e008      	b.n	8004c64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c52:	f7fc fd43 	bl	80016dc <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e006      	b.n	8004c72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <RCCEx_PLL3_Config+0x15c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	58024400 	.word	0x58024400
 8004c80:	ffff0007 	.word	0xffff0007

08004c84 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e10f      	b.n	8004eb6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a87      	ldr	r2, [pc, #540]	; (8004ec0 <HAL_SPI_Init+0x23c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00f      	beq.n	8004cc6 <HAL_SPI_Init+0x42>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a86      	ldr	r2, [pc, #536]	; (8004ec4 <HAL_SPI_Init+0x240>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00a      	beq.n	8004cc6 <HAL_SPI_Init+0x42>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a84      	ldr	r2, [pc, #528]	; (8004ec8 <HAL_SPI_Init+0x244>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d005      	beq.n	8004cc6 <HAL_SPI_Init+0x42>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b0f      	cmp	r3, #15
 8004cc0:	d901      	bls.n	8004cc6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e0f7      	b.n	8004eb6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fde6 	bl	8005898 <SPI_GetPacketSize>
 8004ccc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a7b      	ldr	r2, [pc, #492]	; (8004ec0 <HAL_SPI_Init+0x23c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00c      	beq.n	8004cf2 <HAL_SPI_Init+0x6e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a79      	ldr	r2, [pc, #484]	; (8004ec4 <HAL_SPI_Init+0x240>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <HAL_SPI_Init+0x6e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a78      	ldr	r2, [pc, #480]	; (8004ec8 <HAL_SPI_Init+0x244>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d002      	beq.n	8004cf2 <HAL_SPI_Init+0x6e>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d811      	bhi.n	8004d16 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cf6:	4a72      	ldr	r2, [pc, #456]	; (8004ec0 <HAL_SPI_Init+0x23c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a70      	ldr	r2, [pc, #448]	; (8004ec4 <HAL_SPI_Init+0x240>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_SPI_Init+0x8c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a6f      	ldr	r2, [pc, #444]	; (8004ec8 <HAL_SPI_Init+0x244>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d104      	bne.n	8004d1a <HAL_SPI_Init+0x96>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d901      	bls.n	8004d1a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0cd      	b.n	8004eb6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc f9ca 	bl	80010c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004d56:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d60:	d119      	bne.n	8004d96 <HAL_SPI_Init+0x112>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d6a:	d103      	bne.n	8004d74 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10c      	bne.n	8004d96 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d84:	d107      	bne.n	8004d96 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00f      	beq.n	8004dc2 <HAL_SPI_Init+0x13e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d90b      	bls.n	8004dc2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e007      	b.n	8004dd2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69da      	ldr	r2, [r3, #28]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	ea42 0103 	orr.w	r1, r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	ea42 0103 	orr.w	r1, r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d113      	bne.n	8004e72 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40013000 	.word	0x40013000
 8004ec4:	40003800 	.word	0x40003800
 8004ec8:	40003c00 	.word	0x40003c00

08004ecc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3320      	adds	r3, #32
 8004ee2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_SPI_Transmit+0x2a>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e1e1      	b.n	80052ba <HAL_SPI_Transmit+0x3ee>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004efe:	f7fc fbed 	bl	80016dc <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d007      	beq.n	8004f20 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
 8004f12:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f1c:	7efb      	ldrb	r3, [r7, #27]
 8004f1e:	e1cc      	b.n	80052ba <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_SPI_Transmit+0x60>
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d107      	bne.n	8004f3c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f38:	7efb      	ldrb	r3, [r7, #27]
 8004f3a:	e1be      	b.n	80052ba <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	88fa      	ldrh	r2, [r7, #6]
 8004f56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004f8c:	d108      	bne.n	8004fa0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e009      	b.n	8004fb4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004fb2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	4b96      	ldr	r3, [pc, #600]	; (8005214 <HAL_SPI_Transmit+0x348>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	88f9      	ldrh	r1, [r7, #6]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe0:	d107      	bne.n	8004ff2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d947      	bls.n	800508a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004ffa:	e03f      	b.n	800507c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d114      	bne.n	8005034 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	1d1a      	adds	r2, r3, #4
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005032:	e023      	b.n	800507c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005034:	f7fc fb52 	bl	80016dc <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d803      	bhi.n	800504c <HAL_SPI_Transmit+0x180>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d102      	bne.n	8005052 <HAL_SPI_Transmit+0x186>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d114      	bne.n	800507c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fb52 	bl	80056fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e11e      	b.n	80052ba <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1b9      	bne.n	8004ffc <HAL_SPI_Transmit+0x130>
 8005088:	e0f1      	b.n	800526e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b07      	cmp	r3, #7
 8005090:	f240 80e6 	bls.w	8005260 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005094:	e05d      	b.n	8005152 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d132      	bne.n	800510a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d918      	bls.n	80050e2 <HAL_SPI_Transmit+0x216>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d014      	beq.n	80050e2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	1d1a      	adds	r2, r3, #4
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b02      	subs	r3, #2
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80050e0:	e037      	b.n	8005152 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e6:	881a      	ldrh	r2, [r3, #0]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f0:	1c9a      	adds	r2, r3, #2
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005108:	e023      	b.n	8005152 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510a:	f7fc fae7 	bl	80016dc <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d803      	bhi.n	8005122 <HAL_SPI_Transmit+0x256>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d102      	bne.n	8005128 <HAL_SPI_Transmit+0x25c>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d114      	bne.n	8005152 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fae7 	bl	80056fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e0b3      	b.n	80052ba <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d19b      	bne.n	8005096 <HAL_SPI_Transmit+0x1ca>
 800515e:	e086      	b.n	800526e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d154      	bne.n	8005218 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b03      	cmp	r3, #3
 8005178:	d918      	bls.n	80051ac <HAL_SPI_Transmit+0x2e0>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d914      	bls.n	80051ac <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005192:	1d1a      	adds	r2, r3, #4
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b04      	subs	r3, #4
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051aa:	e059      	b.n	8005260 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d917      	bls.n	80051e8 <HAL_SPI_Transmit+0x31c>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d013      	beq.n	80051e8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c4:	881a      	ldrh	r2, [r3, #0]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	1c9a      	adds	r2, r3, #2
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b02      	subs	r3, #2
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051e6:	e03b      	b.n	8005260 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3320      	adds	r3, #32
 80051f2:	7812      	ldrb	r2, [r2, #0]
 80051f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005212:	e025      	b.n	8005260 <HAL_SPI_Transmit+0x394>
 8005214:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005218:	f7fc fa60 	bl	80016dc <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d803      	bhi.n	8005230 <HAL_SPI_Transmit+0x364>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d102      	bne.n	8005236 <HAL_SPI_Transmit+0x36a>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d114      	bne.n	8005260 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fa60 	bl	80056fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e02c      	b.n	80052ba <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	f47f af79 	bne.w	8005160 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2200      	movs	r2, #0
 8005276:	2108      	movs	r1, #8
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fadf 	bl	800583c <SPI_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fa31 	bl	80056fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80052b8:	7efb      	ldrb	r3, [r7, #27]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop

080052c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08c      	sub	sp, #48	; 0x30
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3320      	adds	r3, #32
 80052de:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3330      	adds	r3, #48	; 0x30
 80052e6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_SPI_TransmitReceive+0x32>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e1fd      	b.n	80056f2 <HAL_SPI_TransmitReceive+0x42e>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052fe:	f7fc f9ed 	bl	80016dc <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8005308:	887b      	ldrh	r3, [r7, #2]
 800530a:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d009      	beq.n	800532c <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8005318:	2302      	movs	r3, #2
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800532a:	e1e2      	b.n	80056f2 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_SPI_TransmitReceive+0x7a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_SPI_TransmitReceive+0x7a>
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800534c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005350:	e1cf      	b.n	80056f2 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2205      	movs	r2, #5
 8005356:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	887a      	ldrh	r2, [r7, #2]
 800536c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	887a      	ldrh	r2, [r7, #2]
 8005382:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	887a      	ldrh	r2, [r7, #2]
 800538a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80053a8:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b82      	ldr	r3, [pc, #520]	; (80055bc <HAL_SPI_TransmitReceive+0x2f8>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	8879      	ldrh	r1, [r7, #2]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	430b      	orrs	r3, r1
 80053bc:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d6:	d107      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b0f      	cmp	r3, #15
 80053ee:	d970      	bls.n	80054d2 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80053f0:	e068      	b.n	80054c4 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d11a      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x172>
 8005400:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005402:	2b00      	cmp	r3, #0
 8005404:	d017      	beq.n	8005436 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005434:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	f248 0308 	movw	r3, #32776	; 0x8008
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01a      	beq.n	800547c <HAL_SPI_TransmitReceive+0x1b8>
 8005446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d017      	beq.n	800547c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005454:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005456:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800545c:	1d1a      	adds	r2, r3, #4
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800547a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547c:	f7fc f92e 	bl	80016dc <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005488:	429a      	cmp	r2, r3
 800548a:	d803      	bhi.n	8005494 <HAL_SPI_TransmitReceive+0x1d0>
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d102      	bne.n	800549a <HAL_SPI_TransmitReceive+0x1d6>
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	2b00      	cmp	r3, #0
 8005498:	d114      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f92e 	bl	80056fc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e116      	b.n	80056f2 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80054c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d193      	bne.n	80053f2 <HAL_SPI_TransmitReceive+0x12e>
 80054ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d190      	bne.n	80053f2 <HAL_SPI_TransmitReceive+0x12e>
 80054d0:	e0e8      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b07      	cmp	r3, #7
 80054d8:	f240 80de 	bls.w	8005698 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80054dc:	e066      	b.n	80055ac <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d119      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x25c>
 80054ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d016      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f6:	881a      	ldrh	r2, [r3, #0]
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	1c9a      	adds	r2, r3, #2
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800551e:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	d11a      	bne.n	8005564 <HAL_SPI_TransmitReceive+0x2a0>
 800552e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005530:	2b00      	cmp	r3, #0
 8005532:	d017      	beq.n	8005564 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	8812      	ldrh	r2, [r2, #0]
 800553c:	b292      	uxth	r2, r2
 800553e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005544:	1c9a      	adds	r2, r3, #2
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005562:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005564:	f7fc f8ba 	bl	80016dc <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005570:	429a      	cmp	r2, r3
 8005572:	d803      	bhi.n	800557c <HAL_SPI_TransmitReceive+0x2b8>
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d102      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x2be>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	2b00      	cmp	r3, #0
 8005580:	d114      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f8ba 	bl	80056fc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005596:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e0a2      	b.n	80056f2 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80055ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d195      	bne.n	80054de <HAL_SPI_TransmitReceive+0x21a>
 80055b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d192      	bne.n	80054de <HAL_SPI_TransmitReceive+0x21a>
 80055b8:	e074      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x3e0>
 80055ba:	bf00      	nop
 80055bc:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d11b      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x342>
 80055ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d018      	beq.n	8005606 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3320      	adds	r3, #32
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005604:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b01      	cmp	r3, #1
 8005612:	d11d      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x38c>
 8005614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01a      	beq.n	8005650 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005626:	7812      	ldrb	r2, [r2, #0]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800564e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005650:	f7fc f844 	bl	80016dc <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565c:	429a      	cmp	r2, r3
 800565e:	d803      	bhi.n	8005668 <HAL_SPI_TransmitReceive+0x3a4>
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d102      	bne.n	800566e <HAL_SPI_TransmitReceive+0x3aa>
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	2b00      	cmp	r3, #0
 800566c:	d114      	bne.n	8005698 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f844 	bl	80056fc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005682:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e02c      	b.n	80056f2 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800569a:	2b00      	cmp	r3, #0
 800569c:	d190      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x2fc>
 800569e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d18d      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	2200      	movs	r2, #0
 80056ac:	2108      	movs	r1, #8
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f8c4 	bl	800583c <SPI_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c0:	f043 0220 	orr.w	r2, r3, #32
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f816 	bl	80056fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e001      	b.n	80056f2 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 80056ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3728      	adds	r7, #40	; 0x28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop

080056fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0208 	orr.w	r2, r2, #8
 800571a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0210 	orr.w	r2, r2, #16
 800572a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0201 	bic.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6919      	ldr	r1, [r3, #16]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b3c      	ldr	r3, [pc, #240]	; (8005838 <SPI_CloseTransfer+0x13c>)
 8005748:	400b      	ands	r3, r1
 800574a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800575a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b04      	cmp	r3, #4
 8005766:	d014      	beq.n	8005792 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00f      	beq.n	8005792 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005778:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0220 	orr.w	r2, r2, #32
 8005790:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b03      	cmp	r3, #3
 800579c:	d014      	beq.n	80057c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00f      	beq.n	80057c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ae:	f043 0204 	orr.w	r2, r3, #4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00f      	beq.n	80057f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00f      	beq.n	800581c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005802:	f043 0208 	orr.w	r2, r3, #8
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800581a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	fffffc90 	.word	0xfffffc90

0800583c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800584c:	e010      	b.n	8005870 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800584e:	f7fb ff45 	bl	80016dc <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d803      	bhi.n	8005866 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005864:	d102      	bne.n	800586c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e00f      	b.n	8005890 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4013      	ands	r3, r2
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	429a      	cmp	r2, r3
 800587e:	bf0c      	ite	eq
 8005880:	2301      	moveq	r3, #1
 8005882:	2300      	movne	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	429a      	cmp	r2, r3
 800588c:	d0df      	beq.n	800584e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	3307      	adds	r3, #7
 80058b6:	08db      	lsrs	r3, r3, #3
 80058b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	fb02 f303 	mul.w	r3, r2, r3
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e049      	b.n	8005974 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fb fc4f 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3304      	adds	r3, #4
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f000 f92d 	bl	8005b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_TIM_ConfigClockSource+0x1c>
 8005994:	2302      	movs	r3, #2
 8005996:	e0dc      	b.n	8005b52 <HAL_TIM_ConfigClockSource+0x1d6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	4b6a      	ldr	r3, [pc, #424]	; (8005b5c <HAL_TIM_ConfigClockSource+0x1e0>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a64      	ldr	r2, [pc, #400]	; (8005b60 <HAL_TIM_ConfigClockSource+0x1e4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f000 80a9 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1aa>
 80059d4:	4a62      	ldr	r2, [pc, #392]	; (8005b60 <HAL_TIM_ConfigClockSource+0x1e4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	f200 80ae 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 80059dc:	4a61      	ldr	r2, [pc, #388]	; (8005b64 <HAL_TIM_ConfigClockSource+0x1e8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	f000 80a1 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1aa>
 80059e4:	4a5f      	ldr	r2, [pc, #380]	; (8005b64 <HAL_TIM_ConfigClockSource+0x1e8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	f200 80a6 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 80059ec:	4a5e      	ldr	r2, [pc, #376]	; (8005b68 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	f000 8099 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1aa>
 80059f4:	4a5c      	ldr	r2, [pc, #368]	; (8005b68 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	f200 809e 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 80059fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a00:	f000 8091 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a08:	f200 8096 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a10:	f000 8089 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a18:	f200 808e 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a20:	d03e      	beq.n	8005aa0 <HAL_TIM_ConfigClockSource+0x124>
 8005a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a26:	f200 8087 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2e:	f000 8086 	beq.w	8005b3e <HAL_TIM_ConfigClockSource+0x1c2>
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a36:	d87f      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a38:	2b70      	cmp	r3, #112	; 0x70
 8005a3a:	d01a      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0xf6>
 8005a3c:	2b70      	cmp	r3, #112	; 0x70
 8005a3e:	d87b      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a40:	2b60      	cmp	r3, #96	; 0x60
 8005a42:	d050      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x16a>
 8005a44:	2b60      	cmp	r3, #96	; 0x60
 8005a46:	d877      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a48:	2b50      	cmp	r3, #80	; 0x50
 8005a4a:	d03c      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x14a>
 8005a4c:	2b50      	cmp	r3, #80	; 0x50
 8005a4e:	d873      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	d058      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0x18a>
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d86f      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a58:	2b30      	cmp	r3, #48	; 0x30
 8005a5a:	d064      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a5c:	2b30      	cmp	r3, #48	; 0x30
 8005a5e:	d86b      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d060      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d867      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d05c      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a6c:	2b10      	cmp	r3, #16
 8005a6e:	d05a      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005a70:	e062      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a82:	f000 f98b 	bl	8005d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	609a      	str	r2, [r3, #8]
      break;
 8005a9e:	e04f      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ab0:	f000 f974 	bl	8005d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ac2:	609a      	str	r2, [r3, #8]
      break;
 8005ac4:	e03c      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f000 f8e4 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2150      	movs	r1, #80	; 0x50
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f93e 	bl	8005d60 <TIM_ITRx_SetConfig>
      break;
 8005ae4:	e02c      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af2:	461a      	mov	r2, r3
 8005af4:	f000 f903 	bl	8005cfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2160      	movs	r1, #96	; 0x60
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f92e 	bl	8005d60 <TIM_ITRx_SetConfig>
      break;
 8005b04:	e01c      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b12:	461a      	mov	r2, r3
 8005b14:	f000 f8c4 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f91e 	bl	8005d60 <TIM_ITRx_SetConfig>
      break;
 8005b24:	e00c      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f000 f915 	bl	8005d60 <TIM_ITRx_SetConfig>
      break;
 8005b36:	e003      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b3c:	e000      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	ffceff88 	.word	0xffceff88
 8005b60:	00100040 	.word	0x00100040
 8005b64:	00100030 	.word	0x00100030
 8005b68:	00100020 	.word	0x00100020

08005b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a40      	ldr	r2, [pc, #256]	; (8005c80 <TIM_Base_SetConfig+0x114>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d013      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8a:	d00f      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3d      	ldr	r2, [pc, #244]	; (8005c84 <TIM_Base_SetConfig+0x118>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00b      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3c      	ldr	r2, [pc, #240]	; (8005c88 <TIM_Base_SetConfig+0x11c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d007      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3b      	ldr	r2, [pc, #236]	; (8005c8c <TIM_Base_SetConfig+0x120>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3a      	ldr	r2, [pc, #232]	; (8005c90 <TIM_Base_SetConfig+0x124>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d108      	bne.n	8005bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2f      	ldr	r2, [pc, #188]	; (8005c80 <TIM_Base_SetConfig+0x114>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01f      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bcc:	d01b      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2c      	ldr	r2, [pc, #176]	; (8005c84 <TIM_Base_SetConfig+0x118>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d017      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2b      	ldr	r2, [pc, #172]	; (8005c88 <TIM_Base_SetConfig+0x11c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d013      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2a      	ldr	r2, [pc, #168]	; (8005c8c <TIM_Base_SetConfig+0x120>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00f      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a29      	ldr	r2, [pc, #164]	; (8005c90 <TIM_Base_SetConfig+0x124>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00b      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a28      	ldr	r2, [pc, #160]	; (8005c94 <TIM_Base_SetConfig+0x128>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a27      	ldr	r2, [pc, #156]	; (8005c98 <TIM_Base_SetConfig+0x12c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a26      	ldr	r2, [pc, #152]	; (8005c9c <TIM_Base_SetConfig+0x130>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d108      	bne.n	8005c18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <TIM_Base_SetConfig+0x114>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00f      	beq.n	8005c64 <TIM_Base_SetConfig+0xf8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <TIM_Base_SetConfig+0x124>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_Base_SetConfig+0xf8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a11      	ldr	r2, [pc, #68]	; (8005c94 <TIM_Base_SetConfig+0x128>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_Base_SetConfig+0xf8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <TIM_Base_SetConfig+0x12c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0xf8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a0f      	ldr	r2, [pc, #60]	; (8005c9c <TIM_Base_SetConfig+0x130>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d103      	bne.n	8005c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	615a      	str	r2, [r3, #20]
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40010400 	.word	0x40010400
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40014400 	.word	0x40014400
 8005c9c:	40014800 	.word	0x40014800

08005ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0201 	bic.w	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f023 030a 	bic.w	r3, r3, #10
 8005cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b087      	sub	sp, #28
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0210 	bic.w	r2, r3, #16
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	031b      	lsls	r3, r3, #12
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <TIM_ITRx_SetConfig+0x38>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f043 0307 	orr.w	r3, r3, #7
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	609a      	str	r2, [r3, #8]
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	ffcfff8f 	.word	0xffcfff8f

08005d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	021a      	lsls	r2, r3, #8
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	609a      	str	r2, [r3, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e06d      	b.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a30      	ldr	r2, [pc, #192]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2f      	ldr	r2, [pc, #188]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d108      	bne.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a20      	ldr	r2, [pc, #128]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d022      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e66:	d01d      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d018      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d013      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00e      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d009      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10c      	bne.n	8005ebe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40001800 	.word	0x40001800
 8005ef4:	40014000 	.word	0x40014000

08005ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e042      	b.n	8005f90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d106      	bne.n	8005f22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7fb f95b 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2224      	movs	r2, #36	; 0x24
 8005f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8ba 	bl	80060b4 <UART_SetConfig>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e022      	b.n	8005f90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 ff1a 	bl	8006d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 ffa1 	bl	8006ed0 <UART_CheckIdleState>
 8005f8e:	4603      	mov	r3, r0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	; 0x28
 8005f9c:	af02      	add	r7, sp, #8
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d17b      	bne.n	80060aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_UART_Transmit+0x26>
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e074      	b.n	80060ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2221      	movs	r2, #33	; 0x21
 8005fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd2:	f7fb fb83 	bl	80016dc <HAL_GetTick>
 8005fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	88fa      	ldrh	r2, [r7, #6]
 8005fe4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff0:	d108      	bne.n	8006004 <HAL_UART_Transmit+0x6c>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	e003      	b.n	800600c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800600c:	e030      	b.n	8006070 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f001 f803 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e03d      	b.n	80060ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006044:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	3302      	adds	r3, #2
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	e007      	b.n	800605e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	3301      	adds	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1c8      	bne.n	800600e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2200      	movs	r2, #0
 8006084:	2140      	movs	r1, #64	; 0x40
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 ffcc 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e006      	b.n	80060ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e000      	b.n	80060ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80060aa:	2302      	movs	r3, #2
  }
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3720      	adds	r7, #32
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b8:	b092      	sub	sp, #72	; 0x48
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	4313      	orrs	r3, r2
 80060da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4bbe      	ldr	r3, [pc, #760]	; (80063dc <UART_SetConfig+0x328>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4ab3      	ldr	r2, [pc, #716]	; (80063e0 <UART_SetConfig+0x32c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800611c:	4313      	orrs	r3, r2
 800611e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	4baf      	ldr	r3, [pc, #700]	; (80063e4 <UART_SetConfig+0x330>)
 8006128:	4013      	ands	r3, r2
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	6812      	ldr	r2, [r2, #0]
 800612e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006130:	430b      	orrs	r3, r1
 8006132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	f023 010f 	bic.w	r1, r3, #15
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4aa6      	ldr	r2, [pc, #664]	; (80063e8 <UART_SetConfig+0x334>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d177      	bne.n	8006244 <UART_SetConfig+0x190>
 8006154:	4ba5      	ldr	r3, [pc, #660]	; (80063ec <UART_SetConfig+0x338>)
 8006156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800615c:	2b28      	cmp	r3, #40	; 0x28
 800615e:	d86d      	bhi.n	800623c <UART_SetConfig+0x188>
 8006160:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <UART_SetConfig+0xb4>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	0800620d 	.word	0x0800620d
 800616c:	0800623d 	.word	0x0800623d
 8006170:	0800623d 	.word	0x0800623d
 8006174:	0800623d 	.word	0x0800623d
 8006178:	0800623d 	.word	0x0800623d
 800617c:	0800623d 	.word	0x0800623d
 8006180:	0800623d 	.word	0x0800623d
 8006184:	0800623d 	.word	0x0800623d
 8006188:	08006215 	.word	0x08006215
 800618c:	0800623d 	.word	0x0800623d
 8006190:	0800623d 	.word	0x0800623d
 8006194:	0800623d 	.word	0x0800623d
 8006198:	0800623d 	.word	0x0800623d
 800619c:	0800623d 	.word	0x0800623d
 80061a0:	0800623d 	.word	0x0800623d
 80061a4:	0800623d 	.word	0x0800623d
 80061a8:	0800621d 	.word	0x0800621d
 80061ac:	0800623d 	.word	0x0800623d
 80061b0:	0800623d 	.word	0x0800623d
 80061b4:	0800623d 	.word	0x0800623d
 80061b8:	0800623d 	.word	0x0800623d
 80061bc:	0800623d 	.word	0x0800623d
 80061c0:	0800623d 	.word	0x0800623d
 80061c4:	0800623d 	.word	0x0800623d
 80061c8:	08006225 	.word	0x08006225
 80061cc:	0800623d 	.word	0x0800623d
 80061d0:	0800623d 	.word	0x0800623d
 80061d4:	0800623d 	.word	0x0800623d
 80061d8:	0800623d 	.word	0x0800623d
 80061dc:	0800623d 	.word	0x0800623d
 80061e0:	0800623d 	.word	0x0800623d
 80061e4:	0800623d 	.word	0x0800623d
 80061e8:	0800622d 	.word	0x0800622d
 80061ec:	0800623d 	.word	0x0800623d
 80061f0:	0800623d 	.word	0x0800623d
 80061f4:	0800623d 	.word	0x0800623d
 80061f8:	0800623d 	.word	0x0800623d
 80061fc:	0800623d 	.word	0x0800623d
 8006200:	0800623d 	.word	0x0800623d
 8006204:	0800623d 	.word	0x0800623d
 8006208:	08006235 	.word	0x08006235
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e326      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006214:	2304      	movs	r3, #4
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e322      	b.n	8006862 <UART_SetConfig+0x7ae>
 800621c:	2308      	movs	r3, #8
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e31e      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006224:	2310      	movs	r3, #16
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e31a      	b.n	8006862 <UART_SetConfig+0x7ae>
 800622c:	2320      	movs	r3, #32
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006232:	e316      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006234:	2340      	movs	r3, #64	; 0x40
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623a:	e312      	b.n	8006862 <UART_SetConfig+0x7ae>
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006242:	e30e      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a69      	ldr	r2, [pc, #420]	; (80063f0 <UART_SetConfig+0x33c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d130      	bne.n	80062b0 <UART_SetConfig+0x1fc>
 800624e:	4b67      	ldr	r3, [pc, #412]	; (80063ec <UART_SetConfig+0x338>)
 8006250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	2b05      	cmp	r3, #5
 8006258:	d826      	bhi.n	80062a8 <UART_SetConfig+0x1f4>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <UART_SetConfig+0x1ac>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	08006279 	.word	0x08006279
 8006264:	08006281 	.word	0x08006281
 8006268:	08006289 	.word	0x08006289
 800626c:	08006291 	.word	0x08006291
 8006270:	08006299 	.word	0x08006299
 8006274:	080062a1 	.word	0x080062a1
 8006278:	2300      	movs	r3, #0
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e2f0      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006280:	2304      	movs	r3, #4
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e2ec      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006288:	2308      	movs	r3, #8
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e2e8      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006290:	2310      	movs	r3, #16
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e2e4      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006298:	2320      	movs	r3, #32
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629e:	e2e0      	b.n	8006862 <UART_SetConfig+0x7ae>
 80062a0:	2340      	movs	r3, #64	; 0x40
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a6:	e2dc      	b.n	8006862 <UART_SetConfig+0x7ae>
 80062a8:	2380      	movs	r3, #128	; 0x80
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ae:	e2d8      	b.n	8006862 <UART_SetConfig+0x7ae>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a4f      	ldr	r2, [pc, #316]	; (80063f4 <UART_SetConfig+0x340>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d130      	bne.n	800631c <UART_SetConfig+0x268>
 80062ba:	4b4c      	ldr	r3, [pc, #304]	; (80063ec <UART_SetConfig+0x338>)
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d826      	bhi.n	8006314 <UART_SetConfig+0x260>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x218>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	080062e5 	.word	0x080062e5
 80062d0:	080062ed 	.word	0x080062ed
 80062d4:	080062f5 	.word	0x080062f5
 80062d8:	080062fd 	.word	0x080062fd
 80062dc:	08006305 	.word	0x08006305
 80062e0:	0800630d 	.word	0x0800630d
 80062e4:	2300      	movs	r3, #0
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e2ba      	b.n	8006862 <UART_SetConfig+0x7ae>
 80062ec:	2304      	movs	r3, #4
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e2b6      	b.n	8006862 <UART_SetConfig+0x7ae>
 80062f4:	2308      	movs	r3, #8
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e2b2      	b.n	8006862 <UART_SetConfig+0x7ae>
 80062fc:	2310      	movs	r3, #16
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e2ae      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006304:	2320      	movs	r3, #32
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630a:	e2aa      	b.n	8006862 <UART_SetConfig+0x7ae>
 800630c:	2340      	movs	r3, #64	; 0x40
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e2a6      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e2a2      	b.n	8006862 <UART_SetConfig+0x7ae>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a35      	ldr	r2, [pc, #212]	; (80063f8 <UART_SetConfig+0x344>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d130      	bne.n	8006388 <UART_SetConfig+0x2d4>
 8006326:	4b31      	ldr	r3, [pc, #196]	; (80063ec <UART_SetConfig+0x338>)
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	2b05      	cmp	r3, #5
 8006330:	d826      	bhi.n	8006380 <UART_SetConfig+0x2cc>
 8006332:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <UART_SetConfig+0x284>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	08006351 	.word	0x08006351
 800633c:	08006359 	.word	0x08006359
 8006340:	08006361 	.word	0x08006361
 8006344:	08006369 	.word	0x08006369
 8006348:	08006371 	.word	0x08006371
 800634c:	08006379 	.word	0x08006379
 8006350:	2300      	movs	r3, #0
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006356:	e284      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006358:	2304      	movs	r3, #4
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635e:	e280      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006360:	2308      	movs	r3, #8
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006366:	e27c      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006368:	2310      	movs	r3, #16
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636e:	e278      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006370:	2320      	movs	r3, #32
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006376:	e274      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006378:	2340      	movs	r3, #64	; 0x40
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637e:	e270      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006386:	e26c      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <UART_SetConfig+0x348>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d142      	bne.n	8006418 <UART_SetConfig+0x364>
 8006392:	4b16      	ldr	r3, [pc, #88]	; (80063ec <UART_SetConfig+0x338>)
 8006394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	2b05      	cmp	r3, #5
 800639c:	d838      	bhi.n	8006410 <UART_SetConfig+0x35c>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0x2f0>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	080063bd 	.word	0x080063bd
 80063a8:	080063c5 	.word	0x080063c5
 80063ac:	080063cd 	.word	0x080063cd
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	08006401 	.word	0x08006401
 80063b8:	08006409 	.word	0x08006409
 80063bc:	2300      	movs	r3, #0
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c2:	e24e      	b.n	8006862 <UART_SetConfig+0x7ae>
 80063c4:	2304      	movs	r3, #4
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ca:	e24a      	b.n	8006862 <UART_SetConfig+0x7ae>
 80063cc:	2308      	movs	r3, #8
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d2:	e246      	b.n	8006862 <UART_SetConfig+0x7ae>
 80063d4:	2310      	movs	r3, #16
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063da:	e242      	b.n	8006862 <UART_SetConfig+0x7ae>
 80063dc:	cfff69f3 	.word	0xcfff69f3
 80063e0:	58000c00 	.word	0x58000c00
 80063e4:	11fff4ff 	.word	0x11fff4ff
 80063e8:	40011000 	.word	0x40011000
 80063ec:	58024400 	.word	0x58024400
 80063f0:	40004400 	.word	0x40004400
 80063f4:	40004800 	.word	0x40004800
 80063f8:	40004c00 	.word	0x40004c00
 80063fc:	40005000 	.word	0x40005000
 8006400:	2320      	movs	r3, #32
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e22c      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006408:	2340      	movs	r3, #64	; 0x40
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e228      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006416:	e224      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4ab1      	ldr	r2, [pc, #708]	; (80066e4 <UART_SetConfig+0x630>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d176      	bne.n	8006510 <UART_SetConfig+0x45c>
 8006422:	4bb1      	ldr	r3, [pc, #708]	; (80066e8 <UART_SetConfig+0x634>)
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800642a:	2b28      	cmp	r3, #40	; 0x28
 800642c:	d86c      	bhi.n	8006508 <UART_SetConfig+0x454>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <UART_SetConfig+0x380>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	080064d9 	.word	0x080064d9
 8006438:	08006509 	.word	0x08006509
 800643c:	08006509 	.word	0x08006509
 8006440:	08006509 	.word	0x08006509
 8006444:	08006509 	.word	0x08006509
 8006448:	08006509 	.word	0x08006509
 800644c:	08006509 	.word	0x08006509
 8006450:	08006509 	.word	0x08006509
 8006454:	080064e1 	.word	0x080064e1
 8006458:	08006509 	.word	0x08006509
 800645c:	08006509 	.word	0x08006509
 8006460:	08006509 	.word	0x08006509
 8006464:	08006509 	.word	0x08006509
 8006468:	08006509 	.word	0x08006509
 800646c:	08006509 	.word	0x08006509
 8006470:	08006509 	.word	0x08006509
 8006474:	080064e9 	.word	0x080064e9
 8006478:	08006509 	.word	0x08006509
 800647c:	08006509 	.word	0x08006509
 8006480:	08006509 	.word	0x08006509
 8006484:	08006509 	.word	0x08006509
 8006488:	08006509 	.word	0x08006509
 800648c:	08006509 	.word	0x08006509
 8006490:	08006509 	.word	0x08006509
 8006494:	080064f1 	.word	0x080064f1
 8006498:	08006509 	.word	0x08006509
 800649c:	08006509 	.word	0x08006509
 80064a0:	08006509 	.word	0x08006509
 80064a4:	08006509 	.word	0x08006509
 80064a8:	08006509 	.word	0x08006509
 80064ac:	08006509 	.word	0x08006509
 80064b0:	08006509 	.word	0x08006509
 80064b4:	080064f9 	.word	0x080064f9
 80064b8:	08006509 	.word	0x08006509
 80064bc:	08006509 	.word	0x08006509
 80064c0:	08006509 	.word	0x08006509
 80064c4:	08006509 	.word	0x08006509
 80064c8:	08006509 	.word	0x08006509
 80064cc:	08006509 	.word	0x08006509
 80064d0:	08006509 	.word	0x08006509
 80064d4:	08006501 	.word	0x08006501
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e1c0      	b.n	8006862 <UART_SetConfig+0x7ae>
 80064e0:	2304      	movs	r3, #4
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e1bc      	b.n	8006862 <UART_SetConfig+0x7ae>
 80064e8:	2308      	movs	r3, #8
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ee:	e1b8      	b.n	8006862 <UART_SetConfig+0x7ae>
 80064f0:	2310      	movs	r3, #16
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f6:	e1b4      	b.n	8006862 <UART_SetConfig+0x7ae>
 80064f8:	2320      	movs	r3, #32
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fe:	e1b0      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006500:	2340      	movs	r3, #64	; 0x40
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006506:	e1ac      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006508:	2380      	movs	r3, #128	; 0x80
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650e:	e1a8      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a75      	ldr	r2, [pc, #468]	; (80066ec <UART_SetConfig+0x638>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d130      	bne.n	800657c <UART_SetConfig+0x4c8>
 800651a:	4b73      	ldr	r3, [pc, #460]	; (80066e8 <UART_SetConfig+0x634>)
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	2b05      	cmp	r3, #5
 8006524:	d826      	bhi.n	8006574 <UART_SetConfig+0x4c0>
 8006526:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0x478>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	08006545 	.word	0x08006545
 8006530:	0800654d 	.word	0x0800654d
 8006534:	08006555 	.word	0x08006555
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006565 	.word	0x08006565
 8006540:	0800656d 	.word	0x0800656d
 8006544:	2300      	movs	r3, #0
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654a:	e18a      	b.n	8006862 <UART_SetConfig+0x7ae>
 800654c:	2304      	movs	r3, #4
 800654e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006552:	e186      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006554:	2308      	movs	r3, #8
 8006556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655a:	e182      	b.n	8006862 <UART_SetConfig+0x7ae>
 800655c:	2310      	movs	r3, #16
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006562:	e17e      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006564:	2320      	movs	r3, #32
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656a:	e17a      	b.n	8006862 <UART_SetConfig+0x7ae>
 800656c:	2340      	movs	r3, #64	; 0x40
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006572:	e176      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006574:	2380      	movs	r3, #128	; 0x80
 8006576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657a:	e172      	b.n	8006862 <UART_SetConfig+0x7ae>
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a5b      	ldr	r2, [pc, #364]	; (80066f0 <UART_SetConfig+0x63c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d130      	bne.n	80065e8 <UART_SetConfig+0x534>
 8006586:	4b58      	ldr	r3, [pc, #352]	; (80066e8 <UART_SetConfig+0x634>)
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	2b05      	cmp	r3, #5
 8006590:	d826      	bhi.n	80065e0 <UART_SetConfig+0x52c>
 8006592:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <UART_SetConfig+0x4e4>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	080065b1 	.word	0x080065b1
 800659c:	080065b9 	.word	0x080065b9
 80065a0:	080065c1 	.word	0x080065c1
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065d1 	.word	0x080065d1
 80065ac:	080065d9 	.word	0x080065d9
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e154      	b.n	8006862 <UART_SetConfig+0x7ae>
 80065b8:	2304      	movs	r3, #4
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e150      	b.n	8006862 <UART_SetConfig+0x7ae>
 80065c0:	2308      	movs	r3, #8
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e14c      	b.n	8006862 <UART_SetConfig+0x7ae>
 80065c8:	2310      	movs	r3, #16
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e148      	b.n	8006862 <UART_SetConfig+0x7ae>
 80065d0:	2320      	movs	r3, #32
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d6:	e144      	b.n	8006862 <UART_SetConfig+0x7ae>
 80065d8:	2340      	movs	r3, #64	; 0x40
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065de:	e140      	b.n	8006862 <UART_SetConfig+0x7ae>
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e6:	e13c      	b.n	8006862 <UART_SetConfig+0x7ae>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a41      	ldr	r2, [pc, #260]	; (80066f4 <UART_SetConfig+0x640>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	f040 8082 	bne.w	80066f8 <UART_SetConfig+0x644>
 80065f4:	4b3c      	ldr	r3, [pc, #240]	; (80066e8 <UART_SetConfig+0x634>)
 80065f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065fc:	2b28      	cmp	r3, #40	; 0x28
 80065fe:	d86d      	bhi.n	80066dc <UART_SetConfig+0x628>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0x554>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	080066ad 	.word	0x080066ad
 800660c:	080066dd 	.word	0x080066dd
 8006610:	080066dd 	.word	0x080066dd
 8006614:	080066dd 	.word	0x080066dd
 8006618:	080066dd 	.word	0x080066dd
 800661c:	080066dd 	.word	0x080066dd
 8006620:	080066dd 	.word	0x080066dd
 8006624:	080066dd 	.word	0x080066dd
 8006628:	080066b5 	.word	0x080066b5
 800662c:	080066dd 	.word	0x080066dd
 8006630:	080066dd 	.word	0x080066dd
 8006634:	080066dd 	.word	0x080066dd
 8006638:	080066dd 	.word	0x080066dd
 800663c:	080066dd 	.word	0x080066dd
 8006640:	080066dd 	.word	0x080066dd
 8006644:	080066dd 	.word	0x080066dd
 8006648:	080066bd 	.word	0x080066bd
 800664c:	080066dd 	.word	0x080066dd
 8006650:	080066dd 	.word	0x080066dd
 8006654:	080066dd 	.word	0x080066dd
 8006658:	080066dd 	.word	0x080066dd
 800665c:	080066dd 	.word	0x080066dd
 8006660:	080066dd 	.word	0x080066dd
 8006664:	080066dd 	.word	0x080066dd
 8006668:	080066c5 	.word	0x080066c5
 800666c:	080066dd 	.word	0x080066dd
 8006670:	080066dd 	.word	0x080066dd
 8006674:	080066dd 	.word	0x080066dd
 8006678:	080066dd 	.word	0x080066dd
 800667c:	080066dd 	.word	0x080066dd
 8006680:	080066dd 	.word	0x080066dd
 8006684:	080066dd 	.word	0x080066dd
 8006688:	080066cd 	.word	0x080066cd
 800668c:	080066dd 	.word	0x080066dd
 8006690:	080066dd 	.word	0x080066dd
 8006694:	080066dd 	.word	0x080066dd
 8006698:	080066dd 	.word	0x080066dd
 800669c:	080066dd 	.word	0x080066dd
 80066a0:	080066dd 	.word	0x080066dd
 80066a4:	080066dd 	.word	0x080066dd
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b2:	e0d6      	b.n	8006862 <UART_SetConfig+0x7ae>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ba:	e0d2      	b.n	8006862 <UART_SetConfig+0x7ae>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c2:	e0ce      	b.n	8006862 <UART_SetConfig+0x7ae>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ca:	e0ca      	b.n	8006862 <UART_SetConfig+0x7ae>
 80066cc:	2320      	movs	r3, #32
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d2:	e0c6      	b.n	8006862 <UART_SetConfig+0x7ae>
 80066d4:	2340      	movs	r3, #64	; 0x40
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066da:	e0c2      	b.n	8006862 <UART_SetConfig+0x7ae>
 80066dc:	2380      	movs	r3, #128	; 0x80
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e2:	e0be      	b.n	8006862 <UART_SetConfig+0x7ae>
 80066e4:	40011400 	.word	0x40011400
 80066e8:	58024400 	.word	0x58024400
 80066ec:	40007800 	.word	0x40007800
 80066f0:	40007c00 	.word	0x40007c00
 80066f4:	40011800 	.word	0x40011800
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4aad      	ldr	r2, [pc, #692]	; (80069b4 <UART_SetConfig+0x900>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d176      	bne.n	80067f0 <UART_SetConfig+0x73c>
 8006702:	4bad      	ldr	r3, [pc, #692]	; (80069b8 <UART_SetConfig+0x904>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800670a:	2b28      	cmp	r3, #40	; 0x28
 800670c:	d86c      	bhi.n	80067e8 <UART_SetConfig+0x734>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0x660>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	080067b9 	.word	0x080067b9
 8006718:	080067e9 	.word	0x080067e9
 800671c:	080067e9 	.word	0x080067e9
 8006720:	080067e9 	.word	0x080067e9
 8006724:	080067e9 	.word	0x080067e9
 8006728:	080067e9 	.word	0x080067e9
 800672c:	080067e9 	.word	0x080067e9
 8006730:	080067e9 	.word	0x080067e9
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067e9 	.word	0x080067e9
 800673c:	080067e9 	.word	0x080067e9
 8006740:	080067e9 	.word	0x080067e9
 8006744:	080067e9 	.word	0x080067e9
 8006748:	080067e9 	.word	0x080067e9
 800674c:	080067e9 	.word	0x080067e9
 8006750:	080067e9 	.word	0x080067e9
 8006754:	080067c9 	.word	0x080067c9
 8006758:	080067e9 	.word	0x080067e9
 800675c:	080067e9 	.word	0x080067e9
 8006760:	080067e9 	.word	0x080067e9
 8006764:	080067e9 	.word	0x080067e9
 8006768:	080067e9 	.word	0x080067e9
 800676c:	080067e9 	.word	0x080067e9
 8006770:	080067e9 	.word	0x080067e9
 8006774:	080067d1 	.word	0x080067d1
 8006778:	080067e9 	.word	0x080067e9
 800677c:	080067e9 	.word	0x080067e9
 8006780:	080067e9 	.word	0x080067e9
 8006784:	080067e9 	.word	0x080067e9
 8006788:	080067e9 	.word	0x080067e9
 800678c:	080067e9 	.word	0x080067e9
 8006790:	080067e9 	.word	0x080067e9
 8006794:	080067d9 	.word	0x080067d9
 8006798:	080067e9 	.word	0x080067e9
 800679c:	080067e9 	.word	0x080067e9
 80067a0:	080067e9 	.word	0x080067e9
 80067a4:	080067e9 	.word	0x080067e9
 80067a8:	080067e9 	.word	0x080067e9
 80067ac:	080067e9 	.word	0x080067e9
 80067b0:	080067e9 	.word	0x080067e9
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067be:	e050      	b.n	8006862 <UART_SetConfig+0x7ae>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c6:	e04c      	b.n	8006862 <UART_SetConfig+0x7ae>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ce:	e048      	b.n	8006862 <UART_SetConfig+0x7ae>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d6:	e044      	b.n	8006862 <UART_SetConfig+0x7ae>
 80067d8:	2320      	movs	r3, #32
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067de:	e040      	b.n	8006862 <UART_SetConfig+0x7ae>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e03c      	b.n	8006862 <UART_SetConfig+0x7ae>
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ee:	e038      	b.n	8006862 <UART_SetConfig+0x7ae>
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a71      	ldr	r2, [pc, #452]	; (80069bc <UART_SetConfig+0x908>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d130      	bne.n	800685c <UART_SetConfig+0x7a8>
 80067fa:	4b6f      	ldr	r3, [pc, #444]	; (80069b8 <UART_SetConfig+0x904>)
 80067fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b05      	cmp	r3, #5
 8006804:	d826      	bhi.n	8006854 <UART_SetConfig+0x7a0>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x758>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006825 	.word	0x08006825
 8006810:	0800682d 	.word	0x0800682d
 8006814:	08006835 	.word	0x08006835
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006845 	.word	0x08006845
 8006820:	0800684d 	.word	0x0800684d
 8006824:	2302      	movs	r3, #2
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682a:	e01a      	b.n	8006862 <UART_SetConfig+0x7ae>
 800682c:	2304      	movs	r3, #4
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006832:	e016      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006834:	2308      	movs	r3, #8
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683a:	e012      	b.n	8006862 <UART_SetConfig+0x7ae>
 800683c:	2310      	movs	r3, #16
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006842:	e00e      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006844:	2320      	movs	r3, #32
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684a:	e00a      	b.n	8006862 <UART_SetConfig+0x7ae>
 800684c:	2340      	movs	r3, #64	; 0x40
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006852:	e006      	b.n	8006862 <UART_SetConfig+0x7ae>
 8006854:	2380      	movs	r3, #128	; 0x80
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685a:	e002      	b.n	8006862 <UART_SetConfig+0x7ae>
 800685c:	2380      	movs	r3, #128	; 0x80
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a55      	ldr	r2, [pc, #340]	; (80069bc <UART_SetConfig+0x908>)
 8006868:	4293      	cmp	r3, r2
 800686a:	f040 80f8 	bne.w	8006a5e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800686e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006872:	2b20      	cmp	r3, #32
 8006874:	dc46      	bgt.n	8006904 <UART_SetConfig+0x850>
 8006876:	2b02      	cmp	r3, #2
 8006878:	db75      	blt.n	8006966 <UART_SetConfig+0x8b2>
 800687a:	3b02      	subs	r3, #2
 800687c:	2b1e      	cmp	r3, #30
 800687e:	d872      	bhi.n	8006966 <UART_SetConfig+0x8b2>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <UART_SetConfig+0x7d4>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	0800690b 	.word	0x0800690b
 800688c:	08006967 	.word	0x08006967
 8006890:	08006913 	.word	0x08006913
 8006894:	08006967 	.word	0x08006967
 8006898:	08006967 	.word	0x08006967
 800689c:	08006967 	.word	0x08006967
 80068a0:	08006923 	.word	0x08006923
 80068a4:	08006967 	.word	0x08006967
 80068a8:	08006967 	.word	0x08006967
 80068ac:	08006967 	.word	0x08006967
 80068b0:	08006967 	.word	0x08006967
 80068b4:	08006967 	.word	0x08006967
 80068b8:	08006967 	.word	0x08006967
 80068bc:	08006967 	.word	0x08006967
 80068c0:	08006933 	.word	0x08006933
 80068c4:	08006967 	.word	0x08006967
 80068c8:	08006967 	.word	0x08006967
 80068cc:	08006967 	.word	0x08006967
 80068d0:	08006967 	.word	0x08006967
 80068d4:	08006967 	.word	0x08006967
 80068d8:	08006967 	.word	0x08006967
 80068dc:	08006967 	.word	0x08006967
 80068e0:	08006967 	.word	0x08006967
 80068e4:	08006967 	.word	0x08006967
 80068e8:	08006967 	.word	0x08006967
 80068ec:	08006967 	.word	0x08006967
 80068f0:	08006967 	.word	0x08006967
 80068f4:	08006967 	.word	0x08006967
 80068f8:	08006967 	.word	0x08006967
 80068fc:	08006967 	.word	0x08006967
 8006900:	08006959 	.word	0x08006959
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d02a      	beq.n	800695e <UART_SetConfig+0x8aa>
 8006908:	e02d      	b.n	8006966 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800690a:	f7fd fd99 	bl	8004440 <HAL_RCCEx_GetD3PCLK1Freq>
 800690e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006910:	e02f      	b.n	8006972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006916:	4618      	mov	r0, r3
 8006918:	f7fd fda8 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006920:	e027      	b.n	8006972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006922:	f107 0318 	add.w	r3, r7, #24
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd fef4 	bl	8004714 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006930:	e01f      	b.n	8006972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006932:	4b21      	ldr	r3, [pc, #132]	; (80069b8 <UART_SetConfig+0x904>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800693e:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <UART_SetConfig+0x904>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	08db      	lsrs	r3, r3, #3
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	4a1d      	ldr	r2, [pc, #116]	; (80069c0 <UART_SetConfig+0x90c>)
 800694a:	fa22 f303 	lsr.w	r3, r2, r3
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006950:	e00f      	b.n	8006972 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006952:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <UART_SetConfig+0x90c>)
 8006954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006956:	e00c      	b.n	8006972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006958:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <UART_SetConfig+0x910>)
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800695c:	e009      	b.n	8006972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800695e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006964:	e005      	b.n	8006972 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006970:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 81ee 	beq.w	8006d56 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	4a12      	ldr	r2, [pc, #72]	; (80069c8 <UART_SetConfig+0x914>)
 8006980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006984:	461a      	mov	r2, r3
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	fbb3 f3f2 	udiv	r3, r3, r2
 800698c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	4413      	add	r3, r2
 8006998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699a:	429a      	cmp	r2, r3
 800699c:	d305      	bcc.n	80069aa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d910      	bls.n	80069cc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069b0:	e1d1      	b.n	8006d56 <UART_SetConfig+0xca2>
 80069b2:	bf00      	nop
 80069b4:	40011c00 	.word	0x40011c00
 80069b8:	58024400 	.word	0x58024400
 80069bc:	58000c00 	.word	0x58000c00
 80069c0:	03d09000 	.word	0x03d09000
 80069c4:	003d0900 	.word	0x003d0900
 80069c8:	08009fa4 	.word	0x08009fa4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ce:	2200      	movs	r2, #0
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	60fa      	str	r2, [r7, #12]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	4ac0      	ldr	r2, [pc, #768]	; (8006cdc <UART_SetConfig+0xc28>)
 80069da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2200      	movs	r2, #0
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	607a      	str	r2, [r7, #4]
 80069e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069ee:	f7f9 fcd7 	bl	80003a0 <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	020b      	lsls	r3, r1, #8
 8006a04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a08:	0202      	lsls	r2, r0, #8
 8006a0a:	6979      	ldr	r1, [r7, #20]
 8006a0c:	6849      	ldr	r1, [r1, #4]
 8006a0e:	0849      	lsrs	r1, r1, #1
 8006a10:	2000      	movs	r0, #0
 8006a12:	460c      	mov	r4, r1
 8006a14:	4605      	mov	r5, r0
 8006a16:	eb12 0804 	adds.w	r8, r2, r4
 8006a1a:	eb43 0905 	adc.w	r9, r3, r5
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	469a      	mov	sl, r3
 8006a26:	4693      	mov	fp, r2
 8006a28:	4652      	mov	r2, sl
 8006a2a:	465b      	mov	r3, fp
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	4649      	mov	r1, r9
 8006a30:	f7f9 fcb6 	bl	80003a0 <__aeabi_uldivmod>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4613      	mov	r3, r2
 8006a3a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a42:	d308      	bcc.n	8006a56 <UART_SetConfig+0x9a2>
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4a:	d204      	bcs.n	8006a56 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a52:	60da      	str	r2, [r3, #12]
 8006a54:	e17f      	b.n	8006d56 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a5c:	e17b      	b.n	8006d56 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a66:	f040 80bd 	bne.w	8006be4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006a6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	dc48      	bgt.n	8006b04 <UART_SetConfig+0xa50>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	db7b      	blt.n	8006b6e <UART_SetConfig+0xaba>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d879      	bhi.n	8006b6e <UART_SetConfig+0xaba>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <UART_SetConfig+0x9cc>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006b0b 	.word	0x08006b0b
 8006a84:	08006b13 	.word	0x08006b13
 8006a88:	08006b6f 	.word	0x08006b6f
 8006a8c:	08006b6f 	.word	0x08006b6f
 8006a90:	08006b1b 	.word	0x08006b1b
 8006a94:	08006b6f 	.word	0x08006b6f
 8006a98:	08006b6f 	.word	0x08006b6f
 8006a9c:	08006b6f 	.word	0x08006b6f
 8006aa0:	08006b2b 	.word	0x08006b2b
 8006aa4:	08006b6f 	.word	0x08006b6f
 8006aa8:	08006b6f 	.word	0x08006b6f
 8006aac:	08006b6f 	.word	0x08006b6f
 8006ab0:	08006b6f 	.word	0x08006b6f
 8006ab4:	08006b6f 	.word	0x08006b6f
 8006ab8:	08006b6f 	.word	0x08006b6f
 8006abc:	08006b6f 	.word	0x08006b6f
 8006ac0:	08006b3b 	.word	0x08006b3b
 8006ac4:	08006b6f 	.word	0x08006b6f
 8006ac8:	08006b6f 	.word	0x08006b6f
 8006acc:	08006b6f 	.word	0x08006b6f
 8006ad0:	08006b6f 	.word	0x08006b6f
 8006ad4:	08006b6f 	.word	0x08006b6f
 8006ad8:	08006b6f 	.word	0x08006b6f
 8006adc:	08006b6f 	.word	0x08006b6f
 8006ae0:	08006b6f 	.word	0x08006b6f
 8006ae4:	08006b6f 	.word	0x08006b6f
 8006ae8:	08006b6f 	.word	0x08006b6f
 8006aec:	08006b6f 	.word	0x08006b6f
 8006af0:	08006b6f 	.word	0x08006b6f
 8006af4:	08006b6f 	.word	0x08006b6f
 8006af8:	08006b6f 	.word	0x08006b6f
 8006afc:	08006b6f 	.word	0x08006b6f
 8006b00:	08006b61 	.word	0x08006b61
 8006b04:	2b40      	cmp	r3, #64	; 0x40
 8006b06:	d02e      	beq.n	8006b66 <UART_SetConfig+0xab2>
 8006b08:	e031      	b.n	8006b6e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0a:	f7fc faaf 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8006b0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b10:	e033      	b.n	8006b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b12:	f7fc fac1 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8006b16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b18:	e02f      	b.n	8006b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fd fca4 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b28:	e027      	b.n	8006b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b2a:	f107 0318 	add.w	r3, r7, #24
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fd fdf0 	bl	8004714 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b38:	e01f      	b.n	8006b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b3a:	4b69      	ldr	r3, [pc, #420]	; (8006ce0 <UART_SetConfig+0xc2c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b46:	4b66      	ldr	r3, [pc, #408]	; (8006ce0 <UART_SetConfig+0xc2c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	08db      	lsrs	r3, r3, #3
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	4a64      	ldr	r2, [pc, #400]	; (8006ce4 <UART_SetConfig+0xc30>)
 8006b52:	fa22 f303 	lsr.w	r3, r2, r3
 8006b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b58:	e00f      	b.n	8006b7a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006b5a:	4b62      	ldr	r3, [pc, #392]	; (8006ce4 <UART_SetConfig+0xc30>)
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b5e:	e00c      	b.n	8006b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b60:	4b61      	ldr	r3, [pc, #388]	; (8006ce8 <UART_SetConfig+0xc34>)
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b64:	e009      	b.n	8006b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b6c:	e005      	b.n	8006b7a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80ea 	beq.w	8006d56 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	4a55      	ldr	r2, [pc, #340]	; (8006cdc <UART_SetConfig+0xc28>)
 8006b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b94:	005a      	lsls	r2, r3, #1
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	085b      	lsrs	r3, r3, #1
 8006b9c:	441a      	add	r2, r3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	2b0f      	cmp	r3, #15
 8006bac:	d916      	bls.n	8006bdc <UART_SetConfig+0xb28>
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb4:	d212      	bcs.n	8006bdc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f023 030f 	bic.w	r3, r3, #15
 8006bbe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006bd8:	60da      	str	r2, [r3, #12]
 8006bda:	e0bc      	b.n	8006d56 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006be2:	e0b8      	b.n	8006d56 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006be4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	dc4b      	bgt.n	8006c84 <UART_SetConfig+0xbd0>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f2c0 8087 	blt.w	8006d00 <UART_SetConfig+0xc4c>
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	f200 8084 	bhi.w	8006d00 <UART_SetConfig+0xc4c>
 8006bf8:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <UART_SetConfig+0xb4c>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c8b 	.word	0x08006c8b
 8006c04:	08006c93 	.word	0x08006c93
 8006c08:	08006d01 	.word	0x08006d01
 8006c0c:	08006d01 	.word	0x08006d01
 8006c10:	08006c9b 	.word	0x08006c9b
 8006c14:	08006d01 	.word	0x08006d01
 8006c18:	08006d01 	.word	0x08006d01
 8006c1c:	08006d01 	.word	0x08006d01
 8006c20:	08006cab 	.word	0x08006cab
 8006c24:	08006d01 	.word	0x08006d01
 8006c28:	08006d01 	.word	0x08006d01
 8006c2c:	08006d01 	.word	0x08006d01
 8006c30:	08006d01 	.word	0x08006d01
 8006c34:	08006d01 	.word	0x08006d01
 8006c38:	08006d01 	.word	0x08006d01
 8006c3c:	08006d01 	.word	0x08006d01
 8006c40:	08006cbb 	.word	0x08006cbb
 8006c44:	08006d01 	.word	0x08006d01
 8006c48:	08006d01 	.word	0x08006d01
 8006c4c:	08006d01 	.word	0x08006d01
 8006c50:	08006d01 	.word	0x08006d01
 8006c54:	08006d01 	.word	0x08006d01
 8006c58:	08006d01 	.word	0x08006d01
 8006c5c:	08006d01 	.word	0x08006d01
 8006c60:	08006d01 	.word	0x08006d01
 8006c64:	08006d01 	.word	0x08006d01
 8006c68:	08006d01 	.word	0x08006d01
 8006c6c:	08006d01 	.word	0x08006d01
 8006c70:	08006d01 	.word	0x08006d01
 8006c74:	08006d01 	.word	0x08006d01
 8006c78:	08006d01 	.word	0x08006d01
 8006c7c:	08006d01 	.word	0x08006d01
 8006c80:	08006cf3 	.word	0x08006cf3
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d037      	beq.n	8006cf8 <UART_SetConfig+0xc44>
 8006c88:	e03a      	b.n	8006d00 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c8a:	f7fc f9ef 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8006c8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c90:	e03c      	b.n	8006d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c92:	f7fc fa01 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8006c96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c98:	e038      	b.n	8006d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fd fbe4 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca8:	e030      	b.n	8006d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006caa:	f107 0318 	add.w	r3, r7, #24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fd fd30 	bl	8004714 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb8:	e028      	b.n	8006d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <UART_SetConfig+0xc2c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d012      	beq.n	8006cec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cc6:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <UART_SetConfig+0xc2c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	08db      	lsrs	r3, r3, #3
 8006ccc:	f003 0303 	and.w	r3, r3, #3
 8006cd0:	4a04      	ldr	r2, [pc, #16]	; (8006ce4 <UART_SetConfig+0xc30>)
 8006cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cd8:	e018      	b.n	8006d0c <UART_SetConfig+0xc58>
 8006cda:	bf00      	nop
 8006cdc:	08009fa4 	.word	0x08009fa4
 8006ce0:	58024400 	.word	0x58024400
 8006ce4:	03d09000 	.word	0x03d09000
 8006ce8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b24      	ldr	r3, [pc, #144]	; (8006d80 <UART_SetConfig+0xccc>)
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf0:	e00c      	b.n	8006d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cf2:	4b24      	ldr	r3, [pc, #144]	; (8006d84 <UART_SetConfig+0xcd0>)
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf6:	e009      	b.n	8006d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cfe:	e005      	b.n	8006d0c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d0a:	bf00      	nop
    }

    if (pclk != 0U)
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d021      	beq.n	8006d56 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <UART_SetConfig+0xcd4>)
 8006d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d20:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	441a      	add	r2, r3
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	2b0f      	cmp	r3, #15
 8006d3a:	d909      	bls.n	8006d50 <UART_SetConfig+0xc9c>
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d42:	d205      	bcs.n	8006d50 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60da      	str	r2, [r3, #12]
 8006d4e:	e002      	b.n	8006d56 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006d72:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3748      	adds	r7, #72	; 0x48
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d80:	03d09000 	.word	0x03d09000
 8006d84:	003d0900 	.word	0x003d0900
 8006d88:	08009fa4 	.word	0x08009fa4

08006d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e8a:	d10a      	bne.n	8006ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b098      	sub	sp, #96	; 0x60
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ee0:	f7fa fbfc 	bl	80016dc <HAL_GetTick>
 8006ee4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d12f      	bne.n	8006f54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006efc:	2200      	movs	r2, #0
 8006efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f88e 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d022      	beq.n	8006f54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f22:	653b      	str	r3, [r7, #80]	; 0x50
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e6      	bne.n	8006f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e063      	b.n	800701c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d149      	bne.n	8006ff6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f857 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d03c      	beq.n	8006ff6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	623b      	str	r3, [r7, #32]
   return(result);
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e6      	bne.n	8006f7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fce:	61fa      	str	r2, [r7, #28]
 8006fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	69b9      	ldr	r1, [r7, #24]
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	617b      	str	r3, [r7, #20]
   return(result);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e5      	bne.n	8006fae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e012      	b.n	800701c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3758      	adds	r7, #88	; 0x58
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	4613      	mov	r3, r2
 8007032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007034:	e049      	b.n	80070ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d045      	beq.n	80070ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800703e:	f7fa fb4d 	bl	80016dc <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	429a      	cmp	r2, r3
 800704c:	d302      	bcc.n	8007054 <UART_WaitOnFlagUntilTimeout+0x30>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e048      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d031      	beq.n	80070ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b08      	cmp	r3, #8
 8007072:	d110      	bne.n	8007096 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2208      	movs	r2, #8
 800707a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f839 	bl	80070f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2208      	movs	r2, #8
 8007086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e029      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a4:	d111      	bne.n	80070ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f81f 	bl	80070f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e00f      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69da      	ldr	r2, [r3, #28]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4013      	ands	r3, r2
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	bf0c      	ite	eq
 80070da:	2301      	moveq	r3, #1
 80070dc:	2300      	movne	r3, #0
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d0a6      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b095      	sub	sp, #84	; 0x54
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007110:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711a:	643b      	str	r3, [r7, #64]	; 0x40
 800711c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e6      	bne.n	80070fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	61fb      	str	r3, [r7, #28]
   return(result);
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	4b1e      	ldr	r3, [pc, #120]	; (80071bc <UART_EndRxTransfer+0xc8>)
 8007142:	4013      	ands	r3, r2
 8007144:	64bb      	str	r3, [r7, #72]	; 0x48
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800714e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e5      	bne.n	800712e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007166:	2b01      	cmp	r3, #1
 8007168:	d118      	bne.n	800719c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	60bb      	str	r3, [r7, #8]
   return(result);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f023 0310 	bic.w	r3, r3, #16
 800717e:	647b      	str	r3, [r7, #68]	; 0x44
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6979      	ldr	r1, [r7, #20]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	613b      	str	r3, [r7, #16]
   return(result);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e6      	bne.n	800716a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 80071b0:	bf00      	nop
 80071b2:	3754      	adds	r7, #84	; 0x54
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	effffffe 	.word	0xeffffffe

080071c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e027      	b.n	8007226 <HAL_UARTEx_DisableFifoMode+0x66>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2224      	movs	r2, #36	; 0x24
 80071e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0201 	bic.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007204:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007246:	2302      	movs	r3, #2
 8007248:	e02d      	b.n	80072a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2224      	movs	r2, #36	; 0x24
 8007256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f850 	bl	800732c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e02d      	b.n	8007322 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2224      	movs	r2, #36	; 0x24
 80072d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f022 0201 	bic.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f812 	bl	800732c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007338:	2b00      	cmp	r3, #0
 800733a:	d108      	bne.n	800734e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800734c:	e031      	b.n	80073b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800734e:	2310      	movs	r3, #16
 8007350:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007352:	2310      	movs	r3, #16
 8007354:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	0e5b      	lsrs	r3, r3, #25
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	0f5b      	lsrs	r3, r3, #29
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	7b3a      	ldrb	r2, [r7, #12]
 800737a:	4911      	ldr	r1, [pc, #68]	; (80073c0 <UARTEx_SetNbDataToProcess+0x94>)
 800737c:	5c8a      	ldrb	r2, [r1, r2]
 800737e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007382:	7b3a      	ldrb	r2, [r7, #12]
 8007384:	490f      	ldr	r1, [pc, #60]	; (80073c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007386:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007388:	fb93 f3f2 	sdiv	r3, r3, r2
 800738c:	b29a      	uxth	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	7b7a      	ldrb	r2, [r7, #13]
 8007398:	4909      	ldr	r1, [pc, #36]	; (80073c0 <UARTEx_SetNbDataToProcess+0x94>)
 800739a:	5c8a      	ldrb	r2, [r1, r2]
 800739c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073a0:	7b7a      	ldrb	r2, [r7, #13]
 80073a2:	4908      	ldr	r1, [pc, #32]	; (80073c4 <UARTEx_SetNbDataToProcess+0x98>)
 80073a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	08009fbc 	.word	0x08009fbc
 80073c4:	08009fc4 	.word	0x08009fc4

080073c8 <__cvt>:
 80073c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ca:	ed2d 8b02 	vpush	{d8}
 80073ce:	eeb0 8b40 	vmov.f64	d8, d0
 80073d2:	b085      	sub	sp, #20
 80073d4:	4617      	mov	r7, r2
 80073d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80073d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80073da:	ee18 2a90 	vmov	r2, s17
 80073de:	f025 0520 	bic.w	r5, r5, #32
 80073e2:	2a00      	cmp	r2, #0
 80073e4:	bfb6      	itet	lt
 80073e6:	222d      	movlt	r2, #45	; 0x2d
 80073e8:	2200      	movge	r2, #0
 80073ea:	eeb1 8b40 	vneglt.f64	d8, d0
 80073ee:	2d46      	cmp	r5, #70	; 0x46
 80073f0:	460c      	mov	r4, r1
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	d004      	beq.n	8007400 <__cvt+0x38>
 80073f6:	2d45      	cmp	r5, #69	; 0x45
 80073f8:	d100      	bne.n	80073fc <__cvt+0x34>
 80073fa:	3401      	adds	r4, #1
 80073fc:	2102      	movs	r1, #2
 80073fe:	e000      	b.n	8007402 <__cvt+0x3a>
 8007400:	2103      	movs	r1, #3
 8007402:	ab03      	add	r3, sp, #12
 8007404:	9301      	str	r3, [sp, #4]
 8007406:	ab02      	add	r3, sp, #8
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	4622      	mov	r2, r4
 800740c:	4633      	mov	r3, r6
 800740e:	eeb0 0b48 	vmov.f64	d0, d8
 8007412:	f000 fe41 	bl	8008098 <_dtoa_r>
 8007416:	2d47      	cmp	r5, #71	; 0x47
 8007418:	d101      	bne.n	800741e <__cvt+0x56>
 800741a:	07fb      	lsls	r3, r7, #31
 800741c:	d51a      	bpl.n	8007454 <__cvt+0x8c>
 800741e:	2d46      	cmp	r5, #70	; 0x46
 8007420:	eb00 0204 	add.w	r2, r0, r4
 8007424:	d10c      	bne.n	8007440 <__cvt+0x78>
 8007426:	7803      	ldrb	r3, [r0, #0]
 8007428:	2b30      	cmp	r3, #48	; 0x30
 800742a:	d107      	bne.n	800743c <__cvt+0x74>
 800742c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	bf1c      	itt	ne
 8007436:	f1c4 0401 	rsbne	r4, r4, #1
 800743a:	6034      	strne	r4, [r6, #0]
 800743c:	6833      	ldr	r3, [r6, #0]
 800743e:	441a      	add	r2, r3
 8007440:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	bf08      	it	eq
 800744a:	9203      	streq	r2, [sp, #12]
 800744c:	2130      	movs	r1, #48	; 0x30
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	4293      	cmp	r3, r2
 8007452:	d307      	bcc.n	8007464 <__cvt+0x9c>
 8007454:	9b03      	ldr	r3, [sp, #12]
 8007456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007458:	1a1b      	subs	r3, r3, r0
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	b005      	add	sp, #20
 800745e:	ecbd 8b02 	vpop	{d8}
 8007462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007464:	1c5c      	adds	r4, r3, #1
 8007466:	9403      	str	r4, [sp, #12]
 8007468:	7019      	strb	r1, [r3, #0]
 800746a:	e7f0      	b.n	800744e <__cvt+0x86>

0800746c <__exponent>:
 800746c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800746e:	4603      	mov	r3, r0
 8007470:	2900      	cmp	r1, #0
 8007472:	bfb8      	it	lt
 8007474:	4249      	neglt	r1, r1
 8007476:	f803 2b02 	strb.w	r2, [r3], #2
 800747a:	bfb4      	ite	lt
 800747c:	222d      	movlt	r2, #45	; 0x2d
 800747e:	222b      	movge	r2, #43	; 0x2b
 8007480:	2909      	cmp	r1, #9
 8007482:	7042      	strb	r2, [r0, #1]
 8007484:	dd2a      	ble.n	80074dc <__exponent+0x70>
 8007486:	f10d 0207 	add.w	r2, sp, #7
 800748a:	4617      	mov	r7, r2
 800748c:	260a      	movs	r6, #10
 800748e:	4694      	mov	ip, r2
 8007490:	fb91 f5f6 	sdiv	r5, r1, r6
 8007494:	fb06 1415 	mls	r4, r6, r5, r1
 8007498:	3430      	adds	r4, #48	; 0x30
 800749a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800749e:	460c      	mov	r4, r1
 80074a0:	2c63      	cmp	r4, #99	; 0x63
 80074a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80074a6:	4629      	mov	r1, r5
 80074a8:	dcf1      	bgt.n	800748e <__exponent+0x22>
 80074aa:	3130      	adds	r1, #48	; 0x30
 80074ac:	f1ac 0402 	sub.w	r4, ip, #2
 80074b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074b4:	1c41      	adds	r1, r0, #1
 80074b6:	4622      	mov	r2, r4
 80074b8:	42ba      	cmp	r2, r7
 80074ba:	d30a      	bcc.n	80074d2 <__exponent+0x66>
 80074bc:	f10d 0209 	add.w	r2, sp, #9
 80074c0:	eba2 020c 	sub.w	r2, r2, ip
 80074c4:	42bc      	cmp	r4, r7
 80074c6:	bf88      	it	hi
 80074c8:	2200      	movhi	r2, #0
 80074ca:	4413      	add	r3, r2
 80074cc:	1a18      	subs	r0, r3, r0
 80074ce:	b003      	add	sp, #12
 80074d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80074d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80074da:	e7ed      	b.n	80074b8 <__exponent+0x4c>
 80074dc:	2330      	movs	r3, #48	; 0x30
 80074de:	3130      	adds	r1, #48	; 0x30
 80074e0:	7083      	strb	r3, [r0, #2]
 80074e2:	70c1      	strb	r1, [r0, #3]
 80074e4:	1d03      	adds	r3, r0, #4
 80074e6:	e7f1      	b.n	80074cc <__exponent+0x60>

080074e8 <_printf_float>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	b08b      	sub	sp, #44	; 0x2c
 80074ee:	460c      	mov	r4, r1
 80074f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80074f4:	4616      	mov	r6, r2
 80074f6:	461f      	mov	r7, r3
 80074f8:	4605      	mov	r5, r0
 80074fa:	f000 fccd 	bl	8007e98 <_localeconv_r>
 80074fe:	f8d0 b000 	ldr.w	fp, [r0]
 8007502:	4658      	mov	r0, fp
 8007504:	f7f8 ff44 	bl	8000390 <strlen>
 8007508:	2300      	movs	r3, #0
 800750a:	9308      	str	r3, [sp, #32]
 800750c:	f8d8 3000 	ldr.w	r3, [r8]
 8007510:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007514:	6822      	ldr	r2, [r4, #0]
 8007516:	3307      	adds	r3, #7
 8007518:	f023 0307 	bic.w	r3, r3, #7
 800751c:	f103 0108 	add.w	r1, r3, #8
 8007520:	f8c8 1000 	str.w	r1, [r8]
 8007524:	ed93 0b00 	vldr	d0, [r3]
 8007528:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8007788 <_printf_float+0x2a0>
 800752c:	eeb0 7bc0 	vabs.f64	d7, d0
 8007530:	eeb4 7b46 	vcmp.f64	d7, d6
 8007534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007538:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800753c:	4682      	mov	sl, r0
 800753e:	dd24      	ble.n	800758a <_printf_float+0xa2>
 8007540:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007548:	d502      	bpl.n	8007550 <_printf_float+0x68>
 800754a:	232d      	movs	r3, #45	; 0x2d
 800754c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007550:	498f      	ldr	r1, [pc, #572]	; (8007790 <_printf_float+0x2a8>)
 8007552:	4b90      	ldr	r3, [pc, #576]	; (8007794 <_printf_float+0x2ac>)
 8007554:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007558:	bf94      	ite	ls
 800755a:	4688      	movls	r8, r1
 800755c:	4698      	movhi	r8, r3
 800755e:	2303      	movs	r3, #3
 8007560:	6123      	str	r3, [r4, #16]
 8007562:	f022 0204 	bic.w	r2, r2, #4
 8007566:	2300      	movs	r3, #0
 8007568:	6022      	str	r2, [r4, #0]
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	9700      	str	r7, [sp, #0]
 800756e:	4633      	mov	r3, r6
 8007570:	aa09      	add	r2, sp, #36	; 0x24
 8007572:	4621      	mov	r1, r4
 8007574:	4628      	mov	r0, r5
 8007576:	f000 f9d1 	bl	800791c <_printf_common>
 800757a:	3001      	adds	r0, #1
 800757c:	f040 808a 	bne.w	8007694 <_printf_float+0x1ac>
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	b00b      	add	sp, #44	; 0x2c
 8007586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758a:	eeb4 0b40 	vcmp.f64	d0, d0
 800758e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007592:	d709      	bvc.n	80075a8 <_printf_float+0xc0>
 8007594:	ee10 3a90 	vmov	r3, s1
 8007598:	2b00      	cmp	r3, #0
 800759a:	bfbc      	itt	lt
 800759c:	232d      	movlt	r3, #45	; 0x2d
 800759e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075a2:	497d      	ldr	r1, [pc, #500]	; (8007798 <_printf_float+0x2b0>)
 80075a4:	4b7d      	ldr	r3, [pc, #500]	; (800779c <_printf_float+0x2b4>)
 80075a6:	e7d5      	b.n	8007554 <_printf_float+0x6c>
 80075a8:	6863      	ldr	r3, [r4, #4]
 80075aa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80075ae:	9104      	str	r1, [sp, #16]
 80075b0:	1c59      	adds	r1, r3, #1
 80075b2:	d13c      	bne.n	800762e <_printf_float+0x146>
 80075b4:	2306      	movs	r3, #6
 80075b6:	6063      	str	r3, [r4, #4]
 80075b8:	2300      	movs	r3, #0
 80075ba:	9303      	str	r3, [sp, #12]
 80075bc:	ab08      	add	r3, sp, #32
 80075be:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80075c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075c6:	ab07      	add	r3, sp, #28
 80075c8:	6861      	ldr	r1, [r4, #4]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	6022      	str	r2, [r4, #0]
 80075ce:	f10d 031b 	add.w	r3, sp, #27
 80075d2:	4628      	mov	r0, r5
 80075d4:	f7ff fef8 	bl	80073c8 <__cvt>
 80075d8:	9b04      	ldr	r3, [sp, #16]
 80075da:	9907      	ldr	r1, [sp, #28]
 80075dc:	2b47      	cmp	r3, #71	; 0x47
 80075de:	4680      	mov	r8, r0
 80075e0:	d108      	bne.n	80075f4 <_printf_float+0x10c>
 80075e2:	1cc8      	adds	r0, r1, #3
 80075e4:	db02      	blt.n	80075ec <_printf_float+0x104>
 80075e6:	6863      	ldr	r3, [r4, #4]
 80075e8:	4299      	cmp	r1, r3
 80075ea:	dd41      	ble.n	8007670 <_printf_float+0x188>
 80075ec:	f1a9 0902 	sub.w	r9, r9, #2
 80075f0:	fa5f f989 	uxtb.w	r9, r9
 80075f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075f8:	d820      	bhi.n	800763c <_printf_float+0x154>
 80075fa:	3901      	subs	r1, #1
 80075fc:	464a      	mov	r2, r9
 80075fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007602:	9107      	str	r1, [sp, #28]
 8007604:	f7ff ff32 	bl	800746c <__exponent>
 8007608:	9a08      	ldr	r2, [sp, #32]
 800760a:	9004      	str	r0, [sp, #16]
 800760c:	1813      	adds	r3, r2, r0
 800760e:	2a01      	cmp	r2, #1
 8007610:	6123      	str	r3, [r4, #16]
 8007612:	dc02      	bgt.n	800761a <_printf_float+0x132>
 8007614:	6822      	ldr	r2, [r4, #0]
 8007616:	07d2      	lsls	r2, r2, #31
 8007618:	d501      	bpl.n	800761e <_printf_float+0x136>
 800761a:	3301      	adds	r3, #1
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0a2      	beq.n	800756c <_printf_float+0x84>
 8007626:	232d      	movs	r3, #45	; 0x2d
 8007628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800762c:	e79e      	b.n	800756c <_printf_float+0x84>
 800762e:	9904      	ldr	r1, [sp, #16]
 8007630:	2947      	cmp	r1, #71	; 0x47
 8007632:	d1c1      	bne.n	80075b8 <_printf_float+0xd0>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1bf      	bne.n	80075b8 <_printf_float+0xd0>
 8007638:	2301      	movs	r3, #1
 800763a:	e7bc      	b.n	80075b6 <_printf_float+0xce>
 800763c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007640:	d118      	bne.n	8007674 <_printf_float+0x18c>
 8007642:	2900      	cmp	r1, #0
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	dd0b      	ble.n	8007660 <_printf_float+0x178>
 8007648:	6121      	str	r1, [r4, #16]
 800764a:	b913      	cbnz	r3, 8007652 <_printf_float+0x16a>
 800764c:	6822      	ldr	r2, [r4, #0]
 800764e:	07d0      	lsls	r0, r2, #31
 8007650:	d502      	bpl.n	8007658 <_printf_float+0x170>
 8007652:	3301      	adds	r3, #1
 8007654:	440b      	add	r3, r1
 8007656:	6123      	str	r3, [r4, #16]
 8007658:	2300      	movs	r3, #0
 800765a:	65a1      	str	r1, [r4, #88]	; 0x58
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	e7de      	b.n	800761e <_printf_float+0x136>
 8007660:	b913      	cbnz	r3, 8007668 <_printf_float+0x180>
 8007662:	6822      	ldr	r2, [r4, #0]
 8007664:	07d2      	lsls	r2, r2, #31
 8007666:	d501      	bpl.n	800766c <_printf_float+0x184>
 8007668:	3302      	adds	r3, #2
 800766a:	e7f4      	b.n	8007656 <_printf_float+0x16e>
 800766c:	2301      	movs	r3, #1
 800766e:	e7f2      	b.n	8007656 <_printf_float+0x16e>
 8007670:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007674:	9b08      	ldr	r3, [sp, #32]
 8007676:	4299      	cmp	r1, r3
 8007678:	db05      	blt.n	8007686 <_printf_float+0x19e>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	6121      	str	r1, [r4, #16]
 800767e:	07d8      	lsls	r0, r3, #31
 8007680:	d5ea      	bpl.n	8007658 <_printf_float+0x170>
 8007682:	1c4b      	adds	r3, r1, #1
 8007684:	e7e7      	b.n	8007656 <_printf_float+0x16e>
 8007686:	2900      	cmp	r1, #0
 8007688:	bfd4      	ite	le
 800768a:	f1c1 0202 	rsble	r2, r1, #2
 800768e:	2201      	movgt	r2, #1
 8007690:	4413      	add	r3, r2
 8007692:	e7e0      	b.n	8007656 <_printf_float+0x16e>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	055a      	lsls	r2, r3, #21
 8007698:	d407      	bmi.n	80076aa <_printf_float+0x1c2>
 800769a:	6923      	ldr	r3, [r4, #16]
 800769c:	4642      	mov	r2, r8
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	d12a      	bne.n	80076fe <_printf_float+0x216>
 80076a8:	e76a      	b.n	8007580 <_printf_float+0x98>
 80076aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80076ae:	f240 80e0 	bls.w	8007872 <_printf_float+0x38a>
 80076b2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80076b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076be:	d133      	bne.n	8007728 <_printf_float+0x240>
 80076c0:	4a37      	ldr	r2, [pc, #220]	; (80077a0 <_printf_float+0x2b8>)
 80076c2:	2301      	movs	r3, #1
 80076c4:	4631      	mov	r1, r6
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f af58 	beq.w	8007580 <_printf_float+0x98>
 80076d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	db02      	blt.n	80076de <_printf_float+0x1f6>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	07d8      	lsls	r0, r3, #31
 80076dc:	d50f      	bpl.n	80076fe <_printf_float+0x216>
 80076de:	4653      	mov	r3, sl
 80076e0:	465a      	mov	r2, fp
 80076e2:	4631      	mov	r1, r6
 80076e4:	4628      	mov	r0, r5
 80076e6:	47b8      	blx	r7
 80076e8:	3001      	adds	r0, #1
 80076ea:	f43f af49 	beq.w	8007580 <_printf_float+0x98>
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	f104 091a 	add.w	r9, r4, #26
 80076f6:	9b08      	ldr	r3, [sp, #32]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	4543      	cmp	r3, r8
 80076fc:	dc09      	bgt.n	8007712 <_printf_float+0x22a>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	079b      	lsls	r3, r3, #30
 8007702:	f100 8106 	bmi.w	8007912 <_printf_float+0x42a>
 8007706:	68e0      	ldr	r0, [r4, #12]
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	4298      	cmp	r0, r3
 800770c:	bfb8      	it	lt
 800770e:	4618      	movlt	r0, r3
 8007710:	e738      	b.n	8007584 <_printf_float+0x9c>
 8007712:	2301      	movs	r3, #1
 8007714:	464a      	mov	r2, r9
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	47b8      	blx	r7
 800771c:	3001      	adds	r0, #1
 800771e:	f43f af2f 	beq.w	8007580 <_printf_float+0x98>
 8007722:	f108 0801 	add.w	r8, r8, #1
 8007726:	e7e6      	b.n	80076f6 <_printf_float+0x20e>
 8007728:	9b07      	ldr	r3, [sp, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	dc3a      	bgt.n	80077a4 <_printf_float+0x2bc>
 800772e:	4a1c      	ldr	r2, [pc, #112]	; (80077a0 <_printf_float+0x2b8>)
 8007730:	2301      	movs	r3, #1
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	f43f af21 	beq.w	8007580 <_printf_float+0x98>
 800773e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007742:	4313      	orrs	r3, r2
 8007744:	d102      	bne.n	800774c <_printf_float+0x264>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	07d9      	lsls	r1, r3, #31
 800774a:	d5d8      	bpl.n	80076fe <_printf_float+0x216>
 800774c:	4653      	mov	r3, sl
 800774e:	465a      	mov	r2, fp
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	f43f af12 	beq.w	8007580 <_printf_float+0x98>
 800775c:	f04f 0900 	mov.w	r9, #0
 8007760:	f104 0a1a 	add.w	sl, r4, #26
 8007764:	9b07      	ldr	r3, [sp, #28]
 8007766:	425b      	negs	r3, r3
 8007768:	454b      	cmp	r3, r9
 800776a:	dc01      	bgt.n	8007770 <_printf_float+0x288>
 800776c:	9b08      	ldr	r3, [sp, #32]
 800776e:	e795      	b.n	800769c <_printf_float+0x1b4>
 8007770:	2301      	movs	r3, #1
 8007772:	4652      	mov	r2, sl
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f af00 	beq.w	8007580 <_printf_float+0x98>
 8007780:	f109 0901 	add.w	r9, r9, #1
 8007784:	e7ee      	b.n	8007764 <_printf_float+0x27c>
 8007786:	bf00      	nop
 8007788:	ffffffff 	.word	0xffffffff
 800778c:	7fefffff 	.word	0x7fefffff
 8007790:	08009fcc 	.word	0x08009fcc
 8007794:	08009fd0 	.word	0x08009fd0
 8007798:	08009fd4 	.word	0x08009fd4
 800779c:	08009fd8 	.word	0x08009fd8
 80077a0:	08009fdc 	.word	0x08009fdc
 80077a4:	9a08      	ldr	r2, [sp, #32]
 80077a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077a8:	429a      	cmp	r2, r3
 80077aa:	bfa8      	it	ge
 80077ac:	461a      	movge	r2, r3
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	4691      	mov	r9, r2
 80077b2:	dc38      	bgt.n	8007826 <_printf_float+0x33e>
 80077b4:	2300      	movs	r3, #0
 80077b6:	9305      	str	r3, [sp, #20]
 80077b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077bc:	f104 021a 	add.w	r2, r4, #26
 80077c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077c2:	9905      	ldr	r1, [sp, #20]
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	eba3 0309 	sub.w	r3, r3, r9
 80077ca:	428b      	cmp	r3, r1
 80077cc:	dc33      	bgt.n	8007836 <_printf_float+0x34e>
 80077ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	db3c      	blt.n	8007850 <_printf_float+0x368>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	07da      	lsls	r2, r3, #31
 80077da:	d439      	bmi.n	8007850 <_printf_float+0x368>
 80077dc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80077e0:	eba2 0903 	sub.w	r9, r2, r3
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	4591      	cmp	r9, r2
 80077ea:	bfa8      	it	ge
 80077ec:	4691      	movge	r9, r2
 80077ee:	f1b9 0f00 	cmp.w	r9, #0
 80077f2:	dc35      	bgt.n	8007860 <_printf_float+0x378>
 80077f4:	f04f 0800 	mov.w	r8, #0
 80077f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077fc:	f104 0a1a 	add.w	sl, r4, #26
 8007800:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	eba3 0309 	sub.w	r3, r3, r9
 800780a:	4543      	cmp	r3, r8
 800780c:	f77f af77 	ble.w	80076fe <_printf_float+0x216>
 8007810:	2301      	movs	r3, #1
 8007812:	4652      	mov	r2, sl
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	f43f aeb0 	beq.w	8007580 <_printf_float+0x98>
 8007820:	f108 0801 	add.w	r8, r8, #1
 8007824:	e7ec      	b.n	8007800 <_printf_float+0x318>
 8007826:	4613      	mov	r3, r2
 8007828:	4631      	mov	r1, r6
 800782a:	4642      	mov	r2, r8
 800782c:	4628      	mov	r0, r5
 800782e:	47b8      	blx	r7
 8007830:	3001      	adds	r0, #1
 8007832:	d1bf      	bne.n	80077b4 <_printf_float+0x2cc>
 8007834:	e6a4      	b.n	8007580 <_printf_float+0x98>
 8007836:	2301      	movs	r3, #1
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	9204      	str	r2, [sp, #16]
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f ae9d 	beq.w	8007580 <_printf_float+0x98>
 8007846:	9b05      	ldr	r3, [sp, #20]
 8007848:	9a04      	ldr	r2, [sp, #16]
 800784a:	3301      	adds	r3, #1
 800784c:	9305      	str	r3, [sp, #20]
 800784e:	e7b7      	b.n	80077c0 <_printf_float+0x2d8>
 8007850:	4653      	mov	r3, sl
 8007852:	465a      	mov	r2, fp
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	47b8      	blx	r7
 800785a:	3001      	adds	r0, #1
 800785c:	d1be      	bne.n	80077dc <_printf_float+0x2f4>
 800785e:	e68f      	b.n	8007580 <_printf_float+0x98>
 8007860:	9a04      	ldr	r2, [sp, #16]
 8007862:	464b      	mov	r3, r9
 8007864:	4442      	add	r2, r8
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	d1c1      	bne.n	80077f4 <_printf_float+0x30c>
 8007870:	e686      	b.n	8007580 <_printf_float+0x98>
 8007872:	9a08      	ldr	r2, [sp, #32]
 8007874:	2a01      	cmp	r2, #1
 8007876:	dc01      	bgt.n	800787c <_printf_float+0x394>
 8007878:	07db      	lsls	r3, r3, #31
 800787a:	d537      	bpl.n	80078ec <_printf_float+0x404>
 800787c:	2301      	movs	r3, #1
 800787e:	4642      	mov	r2, r8
 8007880:	4631      	mov	r1, r6
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	f43f ae7a 	beq.w	8007580 <_printf_float+0x98>
 800788c:	4653      	mov	r3, sl
 800788e:	465a      	mov	r2, fp
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f ae72 	beq.w	8007580 <_printf_float+0x98>
 800789c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80078a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	d01a      	beq.n	80078e2 <_printf_float+0x3fa>
 80078ac:	3b01      	subs	r3, #1
 80078ae:	f108 0201 	add.w	r2, r8, #1
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	d10e      	bne.n	80078da <_printf_float+0x3f2>
 80078bc:	e660      	b.n	8007580 <_printf_float+0x98>
 80078be:	2301      	movs	r3, #1
 80078c0:	464a      	mov	r2, r9
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	f43f ae59 	beq.w	8007580 <_printf_float+0x98>
 80078ce:	f108 0801 	add.w	r8, r8, #1
 80078d2:	9b08      	ldr	r3, [sp, #32]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	4543      	cmp	r3, r8
 80078d8:	dcf1      	bgt.n	80078be <_printf_float+0x3d6>
 80078da:	9b04      	ldr	r3, [sp, #16]
 80078dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078e0:	e6dd      	b.n	800769e <_printf_float+0x1b6>
 80078e2:	f04f 0800 	mov.w	r8, #0
 80078e6:	f104 091a 	add.w	r9, r4, #26
 80078ea:	e7f2      	b.n	80078d2 <_printf_float+0x3ea>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4642      	mov	r2, r8
 80078f0:	e7df      	b.n	80078b2 <_printf_float+0x3ca>
 80078f2:	2301      	movs	r3, #1
 80078f4:	464a      	mov	r2, r9
 80078f6:	4631      	mov	r1, r6
 80078f8:	4628      	mov	r0, r5
 80078fa:	47b8      	blx	r7
 80078fc:	3001      	adds	r0, #1
 80078fe:	f43f ae3f 	beq.w	8007580 <_printf_float+0x98>
 8007902:	f108 0801 	add.w	r8, r8, #1
 8007906:	68e3      	ldr	r3, [r4, #12]
 8007908:	9909      	ldr	r1, [sp, #36]	; 0x24
 800790a:	1a5b      	subs	r3, r3, r1
 800790c:	4543      	cmp	r3, r8
 800790e:	dcf0      	bgt.n	80078f2 <_printf_float+0x40a>
 8007910:	e6f9      	b.n	8007706 <_printf_float+0x21e>
 8007912:	f04f 0800 	mov.w	r8, #0
 8007916:	f104 0919 	add.w	r9, r4, #25
 800791a:	e7f4      	b.n	8007906 <_printf_float+0x41e>

0800791c <_printf_common>:
 800791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007920:	4616      	mov	r6, r2
 8007922:	4699      	mov	r9, r3
 8007924:	688a      	ldr	r2, [r1, #8]
 8007926:	690b      	ldr	r3, [r1, #16]
 8007928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800792c:	4293      	cmp	r3, r2
 800792e:	bfb8      	it	lt
 8007930:	4613      	movlt	r3, r2
 8007932:	6033      	str	r3, [r6, #0]
 8007934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007938:	4607      	mov	r7, r0
 800793a:	460c      	mov	r4, r1
 800793c:	b10a      	cbz	r2, 8007942 <_printf_common+0x26>
 800793e:	3301      	adds	r3, #1
 8007940:	6033      	str	r3, [r6, #0]
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	0699      	lsls	r1, r3, #26
 8007946:	bf42      	ittt	mi
 8007948:	6833      	ldrmi	r3, [r6, #0]
 800794a:	3302      	addmi	r3, #2
 800794c:	6033      	strmi	r3, [r6, #0]
 800794e:	6825      	ldr	r5, [r4, #0]
 8007950:	f015 0506 	ands.w	r5, r5, #6
 8007954:	d106      	bne.n	8007964 <_printf_common+0x48>
 8007956:	f104 0a19 	add.w	sl, r4, #25
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	6832      	ldr	r2, [r6, #0]
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	42ab      	cmp	r3, r5
 8007962:	dc26      	bgt.n	80079b2 <_printf_common+0x96>
 8007964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007968:	1e13      	subs	r3, r2, #0
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	bf18      	it	ne
 800796e:	2301      	movne	r3, #1
 8007970:	0692      	lsls	r2, r2, #26
 8007972:	d42b      	bmi.n	80079cc <_printf_common+0xb0>
 8007974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007978:	4649      	mov	r1, r9
 800797a:	4638      	mov	r0, r7
 800797c:	47c0      	blx	r8
 800797e:	3001      	adds	r0, #1
 8007980:	d01e      	beq.n	80079c0 <_printf_common+0xa4>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	6922      	ldr	r2, [r4, #16]
 8007986:	f003 0306 	and.w	r3, r3, #6
 800798a:	2b04      	cmp	r3, #4
 800798c:	bf02      	ittt	eq
 800798e:	68e5      	ldreq	r5, [r4, #12]
 8007990:	6833      	ldreq	r3, [r6, #0]
 8007992:	1aed      	subeq	r5, r5, r3
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	bf0c      	ite	eq
 8007998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800799c:	2500      	movne	r5, #0
 800799e:	4293      	cmp	r3, r2
 80079a0:	bfc4      	itt	gt
 80079a2:	1a9b      	subgt	r3, r3, r2
 80079a4:	18ed      	addgt	r5, r5, r3
 80079a6:	2600      	movs	r6, #0
 80079a8:	341a      	adds	r4, #26
 80079aa:	42b5      	cmp	r5, r6
 80079ac:	d11a      	bne.n	80079e4 <_printf_common+0xc8>
 80079ae:	2000      	movs	r0, #0
 80079b0:	e008      	b.n	80079c4 <_printf_common+0xa8>
 80079b2:	2301      	movs	r3, #1
 80079b4:	4652      	mov	r2, sl
 80079b6:	4649      	mov	r1, r9
 80079b8:	4638      	mov	r0, r7
 80079ba:	47c0      	blx	r8
 80079bc:	3001      	adds	r0, #1
 80079be:	d103      	bne.n	80079c8 <_printf_common+0xac>
 80079c0:	f04f 30ff 	mov.w	r0, #4294967295
 80079c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c8:	3501      	adds	r5, #1
 80079ca:	e7c6      	b.n	800795a <_printf_common+0x3e>
 80079cc:	18e1      	adds	r1, r4, r3
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	2030      	movs	r0, #48	; 0x30
 80079d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079d6:	4422      	add	r2, r4
 80079d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079e0:	3302      	adds	r3, #2
 80079e2:	e7c7      	b.n	8007974 <_printf_common+0x58>
 80079e4:	2301      	movs	r3, #1
 80079e6:	4622      	mov	r2, r4
 80079e8:	4649      	mov	r1, r9
 80079ea:	4638      	mov	r0, r7
 80079ec:	47c0      	blx	r8
 80079ee:	3001      	adds	r0, #1
 80079f0:	d0e6      	beq.n	80079c0 <_printf_common+0xa4>
 80079f2:	3601      	adds	r6, #1
 80079f4:	e7d9      	b.n	80079aa <_printf_common+0x8e>
	...

080079f8 <_printf_i>:
 80079f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079fc:	7e0f      	ldrb	r7, [r1, #24]
 80079fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a00:	2f78      	cmp	r7, #120	; 0x78
 8007a02:	4691      	mov	r9, r2
 8007a04:	4680      	mov	r8, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	469a      	mov	sl, r3
 8007a0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a0e:	d807      	bhi.n	8007a20 <_printf_i+0x28>
 8007a10:	2f62      	cmp	r7, #98	; 0x62
 8007a12:	d80a      	bhi.n	8007a2a <_printf_i+0x32>
 8007a14:	2f00      	cmp	r7, #0
 8007a16:	f000 80d4 	beq.w	8007bc2 <_printf_i+0x1ca>
 8007a1a:	2f58      	cmp	r7, #88	; 0x58
 8007a1c:	f000 80c0 	beq.w	8007ba0 <_printf_i+0x1a8>
 8007a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a28:	e03a      	b.n	8007aa0 <_printf_i+0xa8>
 8007a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a2e:	2b15      	cmp	r3, #21
 8007a30:	d8f6      	bhi.n	8007a20 <_printf_i+0x28>
 8007a32:	a101      	add	r1, pc, #4	; (adr r1, 8007a38 <_printf_i+0x40>)
 8007a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a38:	08007a91 	.word	0x08007a91
 8007a3c:	08007aa5 	.word	0x08007aa5
 8007a40:	08007a21 	.word	0x08007a21
 8007a44:	08007a21 	.word	0x08007a21
 8007a48:	08007a21 	.word	0x08007a21
 8007a4c:	08007a21 	.word	0x08007a21
 8007a50:	08007aa5 	.word	0x08007aa5
 8007a54:	08007a21 	.word	0x08007a21
 8007a58:	08007a21 	.word	0x08007a21
 8007a5c:	08007a21 	.word	0x08007a21
 8007a60:	08007a21 	.word	0x08007a21
 8007a64:	08007ba9 	.word	0x08007ba9
 8007a68:	08007ad1 	.word	0x08007ad1
 8007a6c:	08007b63 	.word	0x08007b63
 8007a70:	08007a21 	.word	0x08007a21
 8007a74:	08007a21 	.word	0x08007a21
 8007a78:	08007bcb 	.word	0x08007bcb
 8007a7c:	08007a21 	.word	0x08007a21
 8007a80:	08007ad1 	.word	0x08007ad1
 8007a84:	08007a21 	.word	0x08007a21
 8007a88:	08007a21 	.word	0x08007a21
 8007a8c:	08007b6b 	.word	0x08007b6b
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	1d1a      	adds	r2, r3, #4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	602a      	str	r2, [r5, #0]
 8007a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e09f      	b.n	8007be4 <_printf_i+0x1ec>
 8007aa4:	6820      	ldr	r0, [r4, #0]
 8007aa6:	682b      	ldr	r3, [r5, #0]
 8007aa8:	0607      	lsls	r7, r0, #24
 8007aaa:	f103 0104 	add.w	r1, r3, #4
 8007aae:	6029      	str	r1, [r5, #0]
 8007ab0:	d501      	bpl.n	8007ab6 <_printf_i+0xbe>
 8007ab2:	681e      	ldr	r6, [r3, #0]
 8007ab4:	e003      	b.n	8007abe <_printf_i+0xc6>
 8007ab6:	0646      	lsls	r6, r0, #25
 8007ab8:	d5fb      	bpl.n	8007ab2 <_printf_i+0xba>
 8007aba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	da03      	bge.n	8007aca <_printf_i+0xd2>
 8007ac2:	232d      	movs	r3, #45	; 0x2d
 8007ac4:	4276      	negs	r6, r6
 8007ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aca:	485a      	ldr	r0, [pc, #360]	; (8007c34 <_printf_i+0x23c>)
 8007acc:	230a      	movs	r3, #10
 8007ace:	e012      	b.n	8007af6 <_printf_i+0xfe>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	6820      	ldr	r0, [r4, #0]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	6029      	str	r1, [r5, #0]
 8007ad8:	0605      	lsls	r5, r0, #24
 8007ada:	d501      	bpl.n	8007ae0 <_printf_i+0xe8>
 8007adc:	681e      	ldr	r6, [r3, #0]
 8007ade:	e002      	b.n	8007ae6 <_printf_i+0xee>
 8007ae0:	0641      	lsls	r1, r0, #25
 8007ae2:	d5fb      	bpl.n	8007adc <_printf_i+0xe4>
 8007ae4:	881e      	ldrh	r6, [r3, #0]
 8007ae6:	4853      	ldr	r0, [pc, #332]	; (8007c34 <_printf_i+0x23c>)
 8007ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8007aea:	bf0c      	ite	eq
 8007aec:	2308      	moveq	r3, #8
 8007aee:	230a      	movne	r3, #10
 8007af0:	2100      	movs	r1, #0
 8007af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007af6:	6865      	ldr	r5, [r4, #4]
 8007af8:	60a5      	str	r5, [r4, #8]
 8007afa:	2d00      	cmp	r5, #0
 8007afc:	bfa2      	ittt	ge
 8007afe:	6821      	ldrge	r1, [r4, #0]
 8007b00:	f021 0104 	bicge.w	r1, r1, #4
 8007b04:	6021      	strge	r1, [r4, #0]
 8007b06:	b90e      	cbnz	r6, 8007b0c <_printf_i+0x114>
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	d04b      	beq.n	8007ba4 <_printf_i+0x1ac>
 8007b0c:	4615      	mov	r5, r2
 8007b0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b12:	fb03 6711 	mls	r7, r3, r1, r6
 8007b16:	5dc7      	ldrb	r7, [r0, r7]
 8007b18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b1c:	4637      	mov	r7, r6
 8007b1e:	42bb      	cmp	r3, r7
 8007b20:	460e      	mov	r6, r1
 8007b22:	d9f4      	bls.n	8007b0e <_printf_i+0x116>
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d10b      	bne.n	8007b40 <_printf_i+0x148>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	07de      	lsls	r6, r3, #31
 8007b2c:	d508      	bpl.n	8007b40 <_printf_i+0x148>
 8007b2e:	6923      	ldr	r3, [r4, #16]
 8007b30:	6861      	ldr	r1, [r4, #4]
 8007b32:	4299      	cmp	r1, r3
 8007b34:	bfde      	ittt	le
 8007b36:	2330      	movle	r3, #48	; 0x30
 8007b38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b40:	1b52      	subs	r2, r2, r5
 8007b42:	6122      	str	r2, [r4, #16]
 8007b44:	f8cd a000 	str.w	sl, [sp]
 8007b48:	464b      	mov	r3, r9
 8007b4a:	aa03      	add	r2, sp, #12
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4640      	mov	r0, r8
 8007b50:	f7ff fee4 	bl	800791c <_printf_common>
 8007b54:	3001      	adds	r0, #1
 8007b56:	d14a      	bne.n	8007bee <_printf_i+0x1f6>
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	b004      	add	sp, #16
 8007b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	f043 0320 	orr.w	r3, r3, #32
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	4833      	ldr	r0, [pc, #204]	; (8007c38 <_printf_i+0x240>)
 8007b6c:	2778      	movs	r7, #120	; 0x78
 8007b6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	6829      	ldr	r1, [r5, #0]
 8007b76:	061f      	lsls	r7, r3, #24
 8007b78:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b7c:	d402      	bmi.n	8007b84 <_printf_i+0x18c>
 8007b7e:	065f      	lsls	r7, r3, #25
 8007b80:	bf48      	it	mi
 8007b82:	b2b6      	uxthmi	r6, r6
 8007b84:	07df      	lsls	r7, r3, #31
 8007b86:	bf48      	it	mi
 8007b88:	f043 0320 	orrmi.w	r3, r3, #32
 8007b8c:	6029      	str	r1, [r5, #0]
 8007b8e:	bf48      	it	mi
 8007b90:	6023      	strmi	r3, [r4, #0]
 8007b92:	b91e      	cbnz	r6, 8007b9c <_printf_i+0x1a4>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	f023 0320 	bic.w	r3, r3, #32
 8007b9a:	6023      	str	r3, [r4, #0]
 8007b9c:	2310      	movs	r3, #16
 8007b9e:	e7a7      	b.n	8007af0 <_printf_i+0xf8>
 8007ba0:	4824      	ldr	r0, [pc, #144]	; (8007c34 <_printf_i+0x23c>)
 8007ba2:	e7e4      	b.n	8007b6e <_printf_i+0x176>
 8007ba4:	4615      	mov	r5, r2
 8007ba6:	e7bd      	b.n	8007b24 <_printf_i+0x12c>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	6826      	ldr	r6, [r4, #0]
 8007bac:	6961      	ldr	r1, [r4, #20]
 8007bae:	1d18      	adds	r0, r3, #4
 8007bb0:	6028      	str	r0, [r5, #0]
 8007bb2:	0635      	lsls	r5, r6, #24
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	d501      	bpl.n	8007bbc <_printf_i+0x1c4>
 8007bb8:	6019      	str	r1, [r3, #0]
 8007bba:	e002      	b.n	8007bc2 <_printf_i+0x1ca>
 8007bbc:	0670      	lsls	r0, r6, #25
 8007bbe:	d5fb      	bpl.n	8007bb8 <_printf_i+0x1c0>
 8007bc0:	8019      	strh	r1, [r3, #0]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6123      	str	r3, [r4, #16]
 8007bc6:	4615      	mov	r5, r2
 8007bc8:	e7bc      	b.n	8007b44 <_printf_i+0x14c>
 8007bca:	682b      	ldr	r3, [r5, #0]
 8007bcc:	1d1a      	adds	r2, r3, #4
 8007bce:	602a      	str	r2, [r5, #0]
 8007bd0:	681d      	ldr	r5, [r3, #0]
 8007bd2:	6862      	ldr	r2, [r4, #4]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f7f8 fb8a 	bl	80002f0 <memchr>
 8007bdc:	b108      	cbz	r0, 8007be2 <_printf_i+0x1ea>
 8007bde:	1b40      	subs	r0, r0, r5
 8007be0:	6060      	str	r0, [r4, #4]
 8007be2:	6863      	ldr	r3, [r4, #4]
 8007be4:	6123      	str	r3, [r4, #16]
 8007be6:	2300      	movs	r3, #0
 8007be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bec:	e7aa      	b.n	8007b44 <_printf_i+0x14c>
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	47d0      	blx	sl
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d0ad      	beq.n	8007b58 <_printf_i+0x160>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	079b      	lsls	r3, r3, #30
 8007c00:	d413      	bmi.n	8007c2a <_printf_i+0x232>
 8007c02:	68e0      	ldr	r0, [r4, #12]
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	4298      	cmp	r0, r3
 8007c08:	bfb8      	it	lt
 8007c0a:	4618      	movlt	r0, r3
 8007c0c:	e7a6      	b.n	8007b5c <_printf_i+0x164>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	4632      	mov	r2, r6
 8007c12:	4649      	mov	r1, r9
 8007c14:	4640      	mov	r0, r8
 8007c16:	47d0      	blx	sl
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d09d      	beq.n	8007b58 <_printf_i+0x160>
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	68e3      	ldr	r3, [r4, #12]
 8007c20:	9903      	ldr	r1, [sp, #12]
 8007c22:	1a5b      	subs	r3, r3, r1
 8007c24:	42ab      	cmp	r3, r5
 8007c26:	dcf2      	bgt.n	8007c0e <_printf_i+0x216>
 8007c28:	e7eb      	b.n	8007c02 <_printf_i+0x20a>
 8007c2a:	2500      	movs	r5, #0
 8007c2c:	f104 0619 	add.w	r6, r4, #25
 8007c30:	e7f5      	b.n	8007c1e <_printf_i+0x226>
 8007c32:	bf00      	nop
 8007c34:	08009fde 	.word	0x08009fde
 8007c38:	08009fef 	.word	0x08009fef

08007c3c <std>:
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	4604      	mov	r4, r0
 8007c42:	e9c0 3300 	strd	r3, r3, [r0]
 8007c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c4a:	6083      	str	r3, [r0, #8]
 8007c4c:	8181      	strh	r1, [r0, #12]
 8007c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c50:	81c2      	strh	r2, [r0, #14]
 8007c52:	6183      	str	r3, [r0, #24]
 8007c54:	4619      	mov	r1, r3
 8007c56:	2208      	movs	r2, #8
 8007c58:	305c      	adds	r0, #92	; 0x5c
 8007c5a:	f000 f914 	bl	8007e86 <memset>
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <std+0x58>)
 8007c60:	6263      	str	r3, [r4, #36]	; 0x24
 8007c62:	4b0d      	ldr	r3, [pc, #52]	; (8007c98 <std+0x5c>)
 8007c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <std+0x60>)
 8007c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <std+0x64>)
 8007c6c:	6323      	str	r3, [r4, #48]	; 0x30
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <std+0x68>)
 8007c70:	6224      	str	r4, [r4, #32]
 8007c72:	429c      	cmp	r4, r3
 8007c74:	d006      	beq.n	8007c84 <std+0x48>
 8007c76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c7a:	4294      	cmp	r4, r2
 8007c7c:	d002      	beq.n	8007c84 <std+0x48>
 8007c7e:	33d0      	adds	r3, #208	; 0xd0
 8007c80:	429c      	cmp	r4, r3
 8007c82:	d105      	bne.n	8007c90 <std+0x54>
 8007c84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c8c:	f000 b978 	b.w	8007f80 <__retarget_lock_init_recursive>
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	bf00      	nop
 8007c94:	08007e01 	.word	0x08007e01
 8007c98:	08007e23 	.word	0x08007e23
 8007c9c:	08007e5b 	.word	0x08007e5b
 8007ca0:	08007e7f 	.word	0x08007e7f
 8007ca4:	24000388 	.word	0x24000388

08007ca8 <stdio_exit_handler>:
 8007ca8:	4a02      	ldr	r2, [pc, #8]	; (8007cb4 <stdio_exit_handler+0xc>)
 8007caa:	4903      	ldr	r1, [pc, #12]	; (8007cb8 <stdio_exit_handler+0x10>)
 8007cac:	4803      	ldr	r0, [pc, #12]	; (8007cbc <stdio_exit_handler+0x14>)
 8007cae:	f000 b869 	b.w	8007d84 <_fwalk_sglue>
 8007cb2:	bf00      	nop
 8007cb4:	24000010 	.word	0x24000010
 8007cb8:	08009825 	.word	0x08009825
 8007cbc:	2400001c 	.word	0x2400001c

08007cc0 <cleanup_stdio>:
 8007cc0:	6841      	ldr	r1, [r0, #4]
 8007cc2:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <cleanup_stdio+0x34>)
 8007cc4:	4299      	cmp	r1, r3
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	4604      	mov	r4, r0
 8007cca:	d001      	beq.n	8007cd0 <cleanup_stdio+0x10>
 8007ccc:	f001 fdaa 	bl	8009824 <_fflush_r>
 8007cd0:	68a1      	ldr	r1, [r4, #8]
 8007cd2:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <cleanup_stdio+0x38>)
 8007cd4:	4299      	cmp	r1, r3
 8007cd6:	d002      	beq.n	8007cde <cleanup_stdio+0x1e>
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f001 fda3 	bl	8009824 <_fflush_r>
 8007cde:	68e1      	ldr	r1, [r4, #12]
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <cleanup_stdio+0x3c>)
 8007ce2:	4299      	cmp	r1, r3
 8007ce4:	d004      	beq.n	8007cf0 <cleanup_stdio+0x30>
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cec:	f001 bd9a 	b.w	8009824 <_fflush_r>
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	bf00      	nop
 8007cf4:	24000388 	.word	0x24000388
 8007cf8:	240003f0 	.word	0x240003f0
 8007cfc:	24000458 	.word	0x24000458

08007d00 <global_stdio_init.part.0>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	4b0b      	ldr	r3, [pc, #44]	; (8007d30 <global_stdio_init.part.0+0x30>)
 8007d04:	4c0b      	ldr	r4, [pc, #44]	; (8007d34 <global_stdio_init.part.0+0x34>)
 8007d06:	4a0c      	ldr	r2, [pc, #48]	; (8007d38 <global_stdio_init.part.0+0x38>)
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2104      	movs	r1, #4
 8007d10:	f7ff ff94 	bl	8007c3c <std>
 8007d14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d18:	2201      	movs	r2, #1
 8007d1a:	2109      	movs	r1, #9
 8007d1c:	f7ff ff8e 	bl	8007c3c <std>
 8007d20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d24:	2202      	movs	r2, #2
 8007d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d2a:	2112      	movs	r1, #18
 8007d2c:	f7ff bf86 	b.w	8007c3c <std>
 8007d30:	240004c0 	.word	0x240004c0
 8007d34:	24000388 	.word	0x24000388
 8007d38:	08007ca9 	.word	0x08007ca9

08007d3c <__sfp_lock_acquire>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__sfp_lock_acquire+0x8>)
 8007d3e:	f000 b920 	b.w	8007f82 <__retarget_lock_acquire_recursive>
 8007d42:	bf00      	nop
 8007d44:	240004c9 	.word	0x240004c9

08007d48 <__sfp_lock_release>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__sfp_lock_release+0x8>)
 8007d4a:	f000 b91b 	b.w	8007f84 <__retarget_lock_release_recursive>
 8007d4e:	bf00      	nop
 8007d50:	240004c9 	.word	0x240004c9

08007d54 <__sinit>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	4604      	mov	r4, r0
 8007d58:	f7ff fff0 	bl	8007d3c <__sfp_lock_acquire>
 8007d5c:	6a23      	ldr	r3, [r4, #32]
 8007d5e:	b11b      	cbz	r3, 8007d68 <__sinit+0x14>
 8007d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d64:	f7ff bff0 	b.w	8007d48 <__sfp_lock_release>
 8007d68:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <__sinit+0x28>)
 8007d6a:	6223      	str	r3, [r4, #32]
 8007d6c:	4b04      	ldr	r3, [pc, #16]	; (8007d80 <__sinit+0x2c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f5      	bne.n	8007d60 <__sinit+0xc>
 8007d74:	f7ff ffc4 	bl	8007d00 <global_stdio_init.part.0>
 8007d78:	e7f2      	b.n	8007d60 <__sinit+0xc>
 8007d7a:	bf00      	nop
 8007d7c:	08007cc1 	.word	0x08007cc1
 8007d80:	240004c0 	.word	0x240004c0

08007d84 <_fwalk_sglue>:
 8007d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d88:	4607      	mov	r7, r0
 8007d8a:	4688      	mov	r8, r1
 8007d8c:	4614      	mov	r4, r2
 8007d8e:	2600      	movs	r6, #0
 8007d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d94:	f1b9 0901 	subs.w	r9, r9, #1
 8007d98:	d505      	bpl.n	8007da6 <_fwalk_sglue+0x22>
 8007d9a:	6824      	ldr	r4, [r4, #0]
 8007d9c:	2c00      	cmp	r4, #0
 8007d9e:	d1f7      	bne.n	8007d90 <_fwalk_sglue+0xc>
 8007da0:	4630      	mov	r0, r6
 8007da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da6:	89ab      	ldrh	r3, [r5, #12]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d907      	bls.n	8007dbc <_fwalk_sglue+0x38>
 8007dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007db0:	3301      	adds	r3, #1
 8007db2:	d003      	beq.n	8007dbc <_fwalk_sglue+0x38>
 8007db4:	4629      	mov	r1, r5
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c0      	blx	r8
 8007dba:	4306      	orrs	r6, r0
 8007dbc:	3568      	adds	r5, #104	; 0x68
 8007dbe:	e7e9      	b.n	8007d94 <_fwalk_sglue+0x10>

08007dc0 <siprintf>:
 8007dc0:	b40e      	push	{r1, r2, r3}
 8007dc2:	b500      	push	{lr}
 8007dc4:	b09c      	sub	sp, #112	; 0x70
 8007dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8007dc8:	9002      	str	r0, [sp, #8]
 8007dca:	9006      	str	r0, [sp, #24]
 8007dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dd0:	4809      	ldr	r0, [pc, #36]	; (8007df8 <siprintf+0x38>)
 8007dd2:	9107      	str	r1, [sp, #28]
 8007dd4:	9104      	str	r1, [sp, #16]
 8007dd6:	4909      	ldr	r1, [pc, #36]	; (8007dfc <siprintf+0x3c>)
 8007dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ddc:	9105      	str	r1, [sp, #20]
 8007dde:	6800      	ldr	r0, [r0, #0]
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	a902      	add	r1, sp, #8
 8007de4:	f001 fb9a 	bl	800951c <_svfiprintf_r>
 8007de8:	9b02      	ldr	r3, [sp, #8]
 8007dea:	2200      	movs	r2, #0
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	b01c      	add	sp, #112	; 0x70
 8007df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007df4:	b003      	add	sp, #12
 8007df6:	4770      	bx	lr
 8007df8:	24000068 	.word	0x24000068
 8007dfc:	ffff0208 	.word	0xffff0208

08007e00 <__sread>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	460c      	mov	r4, r1
 8007e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e08:	f000 f86c 	bl	8007ee4 <_read_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	bfab      	itete	ge
 8007e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e12:	89a3      	ldrhlt	r3, [r4, #12]
 8007e14:	181b      	addge	r3, r3, r0
 8007e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e1a:	bfac      	ite	ge
 8007e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e1e:	81a3      	strhlt	r3, [r4, #12]
 8007e20:	bd10      	pop	{r4, pc}

08007e22 <__swrite>:
 8007e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e26:	461f      	mov	r7, r3
 8007e28:	898b      	ldrh	r3, [r1, #12]
 8007e2a:	05db      	lsls	r3, r3, #23
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	4616      	mov	r6, r2
 8007e32:	d505      	bpl.n	8007e40 <__swrite+0x1e>
 8007e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e38:	2302      	movs	r3, #2
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f000 f840 	bl	8007ec0 <_lseek_r>
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e4a:	81a3      	strh	r3, [r4, #12]
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	463b      	mov	r3, r7
 8007e50:	4628      	mov	r0, r5
 8007e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e56:	f000 b857 	b.w	8007f08 <_write_r>

08007e5a <__sseek>:
 8007e5a:	b510      	push	{r4, lr}
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e62:	f000 f82d 	bl	8007ec0 <_lseek_r>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	bf15      	itete	ne
 8007e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e76:	81a3      	strheq	r3, [r4, #12]
 8007e78:	bf18      	it	ne
 8007e7a:	81a3      	strhne	r3, [r4, #12]
 8007e7c:	bd10      	pop	{r4, pc}

08007e7e <__sclose>:
 8007e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e82:	f000 b80d 	b.w	8007ea0 <_close_r>

08007e86 <memset>:
 8007e86:	4402      	add	r2, r0
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d100      	bne.n	8007e90 <memset+0xa>
 8007e8e:	4770      	bx	lr
 8007e90:	f803 1b01 	strb.w	r1, [r3], #1
 8007e94:	e7f9      	b.n	8007e8a <memset+0x4>
	...

08007e98 <_localeconv_r>:
 8007e98:	4800      	ldr	r0, [pc, #0]	; (8007e9c <_localeconv_r+0x4>)
 8007e9a:	4770      	bx	lr
 8007e9c:	2400015c 	.word	0x2400015c

08007ea0 <_close_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4d06      	ldr	r5, [pc, #24]	; (8007ebc <_close_r+0x1c>)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	f7f9 fa83 	bl	80013b6 <_close>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_close_r+0x1a>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_close_r+0x1a>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	240004c4 	.word	0x240004c4

08007ec0 <_lseek_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	; (8007ee0 <_lseek_r+0x20>)
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	602a      	str	r2, [r5, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f7f9 fa98 	bl	8001404 <_lseek>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d102      	bne.n	8007ede <_lseek_r+0x1e>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	b103      	cbz	r3, 8007ede <_lseek_r+0x1e>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	240004c4 	.word	0x240004c4

08007ee4 <_read_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4d07      	ldr	r5, [pc, #28]	; (8007f04 <_read_r+0x20>)
 8007ee8:	4604      	mov	r4, r0
 8007eea:	4608      	mov	r0, r1
 8007eec:	4611      	mov	r1, r2
 8007eee:	2200      	movs	r2, #0
 8007ef0:	602a      	str	r2, [r5, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f7f9 fa26 	bl	8001344 <_read>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_read_r+0x1e>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_read_r+0x1e>
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	240004c4 	.word	0x240004c4

08007f08 <_write_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4d07      	ldr	r5, [pc, #28]	; (8007f28 <_write_r+0x20>)
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	4608      	mov	r0, r1
 8007f10:	4611      	mov	r1, r2
 8007f12:	2200      	movs	r2, #0
 8007f14:	602a      	str	r2, [r5, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	f7f9 fa31 	bl	800137e <_write>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d102      	bne.n	8007f26 <_write_r+0x1e>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	b103      	cbz	r3, 8007f26 <_write_r+0x1e>
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	240004c4 	.word	0x240004c4

08007f2c <__errno>:
 8007f2c:	4b01      	ldr	r3, [pc, #4]	; (8007f34 <__errno+0x8>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	24000068 	.word	0x24000068

08007f38 <__libc_init_array>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	4d0d      	ldr	r5, [pc, #52]	; (8007f70 <__libc_init_array+0x38>)
 8007f3c:	4c0d      	ldr	r4, [pc, #52]	; (8007f74 <__libc_init_array+0x3c>)
 8007f3e:	1b64      	subs	r4, r4, r5
 8007f40:	10a4      	asrs	r4, r4, #2
 8007f42:	2600      	movs	r6, #0
 8007f44:	42a6      	cmp	r6, r4
 8007f46:	d109      	bne.n	8007f5c <__libc_init_array+0x24>
 8007f48:	4d0b      	ldr	r5, [pc, #44]	; (8007f78 <__libc_init_array+0x40>)
 8007f4a:	4c0c      	ldr	r4, [pc, #48]	; (8007f7c <__libc_init_array+0x44>)
 8007f4c:	f002 f80e 	bl	8009f6c <_init>
 8007f50:	1b64      	subs	r4, r4, r5
 8007f52:	10a4      	asrs	r4, r4, #2
 8007f54:	2600      	movs	r6, #0
 8007f56:	42a6      	cmp	r6, r4
 8007f58:	d105      	bne.n	8007f66 <__libc_init_array+0x2e>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f60:	4798      	blx	r3
 8007f62:	3601      	adds	r6, #1
 8007f64:	e7ee      	b.n	8007f44 <__libc_init_array+0xc>
 8007f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6a:	4798      	blx	r3
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	e7f2      	b.n	8007f56 <__libc_init_array+0x1e>
 8007f70:	0800a344 	.word	0x0800a344
 8007f74:	0800a344 	.word	0x0800a344
 8007f78:	0800a344 	.word	0x0800a344
 8007f7c:	0800a348 	.word	0x0800a348

08007f80 <__retarget_lock_init_recursive>:
 8007f80:	4770      	bx	lr

08007f82 <__retarget_lock_acquire_recursive>:
 8007f82:	4770      	bx	lr

08007f84 <__retarget_lock_release_recursive>:
 8007f84:	4770      	bx	lr

08007f86 <quorem>:
 8007f86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	6903      	ldr	r3, [r0, #16]
 8007f8c:	690c      	ldr	r4, [r1, #16]
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	4607      	mov	r7, r0
 8007f92:	db7e      	blt.n	8008092 <quorem+0x10c>
 8007f94:	3c01      	subs	r4, #1
 8007f96:	f101 0814 	add.w	r8, r1, #20
 8007f9a:	f100 0514 	add.w	r5, r0, #20
 8007f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fac:	3301      	adds	r3, #1
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fbc:	d331      	bcc.n	8008022 <quorem+0x9c>
 8007fbe:	f04f 0e00 	mov.w	lr, #0
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	46ac      	mov	ip, r5
 8007fc6:	46f2      	mov	sl, lr
 8007fc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fcc:	b293      	uxth	r3, r2
 8007fce:	fb06 e303 	mla	r3, r6, r3, lr
 8007fd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fd6:	0c1a      	lsrs	r2, r3, #16
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	ebaa 0303 	sub.w	r3, sl, r3
 8007fde:	f8dc a000 	ldr.w	sl, [ip]
 8007fe2:	fa13 f38a 	uxtah	r3, r3, sl
 8007fe6:	fb06 220e 	mla	r2, r6, lr, r2
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	9b00      	ldr	r3, [sp, #0]
 8007fee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ff2:	b292      	uxth	r2, r2
 8007ff4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ffc:	f8bd 3000 	ldrh.w	r3, [sp]
 8008000:	4581      	cmp	r9, r0
 8008002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008006:	f84c 3b04 	str.w	r3, [ip], #4
 800800a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800800e:	d2db      	bcs.n	8007fc8 <quorem+0x42>
 8008010:	f855 300b 	ldr.w	r3, [r5, fp]
 8008014:	b92b      	cbnz	r3, 8008022 <quorem+0x9c>
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	3b04      	subs	r3, #4
 800801a:	429d      	cmp	r5, r3
 800801c:	461a      	mov	r2, r3
 800801e:	d32c      	bcc.n	800807a <quorem+0xf4>
 8008020:	613c      	str	r4, [r7, #16]
 8008022:	4638      	mov	r0, r7
 8008024:	f001 f920 	bl	8009268 <__mcmp>
 8008028:	2800      	cmp	r0, #0
 800802a:	db22      	blt.n	8008072 <quorem+0xec>
 800802c:	3601      	adds	r6, #1
 800802e:	4629      	mov	r1, r5
 8008030:	2000      	movs	r0, #0
 8008032:	f858 2b04 	ldr.w	r2, [r8], #4
 8008036:	f8d1 c000 	ldr.w	ip, [r1]
 800803a:	b293      	uxth	r3, r2
 800803c:	1ac3      	subs	r3, r0, r3
 800803e:	0c12      	lsrs	r2, r2, #16
 8008040:	fa13 f38c 	uxtah	r3, r3, ip
 8008044:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800804c:	b29b      	uxth	r3, r3
 800804e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008052:	45c1      	cmp	r9, r8
 8008054:	f841 3b04 	str.w	r3, [r1], #4
 8008058:	ea4f 4022 	mov.w	r0, r2, asr #16
 800805c:	d2e9      	bcs.n	8008032 <quorem+0xac>
 800805e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008066:	b922      	cbnz	r2, 8008072 <quorem+0xec>
 8008068:	3b04      	subs	r3, #4
 800806a:	429d      	cmp	r5, r3
 800806c:	461a      	mov	r2, r3
 800806e:	d30a      	bcc.n	8008086 <quorem+0x100>
 8008070:	613c      	str	r4, [r7, #16]
 8008072:	4630      	mov	r0, r6
 8008074:	b003      	add	sp, #12
 8008076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	3b04      	subs	r3, #4
 800807e:	2a00      	cmp	r2, #0
 8008080:	d1ce      	bne.n	8008020 <quorem+0x9a>
 8008082:	3c01      	subs	r4, #1
 8008084:	e7c9      	b.n	800801a <quorem+0x94>
 8008086:	6812      	ldr	r2, [r2, #0]
 8008088:	3b04      	subs	r3, #4
 800808a:	2a00      	cmp	r2, #0
 800808c:	d1f0      	bne.n	8008070 <quorem+0xea>
 800808e:	3c01      	subs	r4, #1
 8008090:	e7eb      	b.n	800806a <quorem+0xe4>
 8008092:	2000      	movs	r0, #0
 8008094:	e7ee      	b.n	8008074 <quorem+0xee>
	...

08008098 <_dtoa_r>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	ed2d 8b02 	vpush	{d8}
 80080a0:	69c5      	ldr	r5, [r0, #28]
 80080a2:	b091      	sub	sp, #68	; 0x44
 80080a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080a8:	ec59 8b10 	vmov	r8, r9, d0
 80080ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80080ae:	9106      	str	r1, [sp, #24]
 80080b0:	4606      	mov	r6, r0
 80080b2:	9208      	str	r2, [sp, #32]
 80080b4:	930c      	str	r3, [sp, #48]	; 0x30
 80080b6:	b975      	cbnz	r5, 80080d6 <_dtoa_r+0x3e>
 80080b8:	2010      	movs	r0, #16
 80080ba:	f000 fda5 	bl	8008c08 <malloc>
 80080be:	4602      	mov	r2, r0
 80080c0:	61f0      	str	r0, [r6, #28]
 80080c2:	b920      	cbnz	r0, 80080ce <_dtoa_r+0x36>
 80080c4:	4ba6      	ldr	r3, [pc, #664]	; (8008360 <_dtoa_r+0x2c8>)
 80080c6:	21ef      	movs	r1, #239	; 0xef
 80080c8:	48a6      	ldr	r0, [pc, #664]	; (8008364 <_dtoa_r+0x2cc>)
 80080ca:	f001 fc0b 	bl	80098e4 <__assert_func>
 80080ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080d2:	6005      	str	r5, [r0, #0]
 80080d4:	60c5      	str	r5, [r0, #12]
 80080d6:	69f3      	ldr	r3, [r6, #28]
 80080d8:	6819      	ldr	r1, [r3, #0]
 80080da:	b151      	cbz	r1, 80080f2 <_dtoa_r+0x5a>
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	604a      	str	r2, [r1, #4]
 80080e0:	2301      	movs	r3, #1
 80080e2:	4093      	lsls	r3, r2
 80080e4:	608b      	str	r3, [r1, #8]
 80080e6:	4630      	mov	r0, r6
 80080e8:	f000 fe82 	bl	8008df0 <_Bfree>
 80080ec:	69f3      	ldr	r3, [r6, #28]
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	f1b9 0300 	subs.w	r3, r9, #0
 80080f6:	bfbb      	ittet	lt
 80080f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080fc:	9303      	strlt	r3, [sp, #12]
 80080fe:	2300      	movge	r3, #0
 8008100:	2201      	movlt	r2, #1
 8008102:	bfac      	ite	ge
 8008104:	6023      	strge	r3, [r4, #0]
 8008106:	6022      	strlt	r2, [r4, #0]
 8008108:	4b97      	ldr	r3, [pc, #604]	; (8008368 <_dtoa_r+0x2d0>)
 800810a:	9c03      	ldr	r4, [sp, #12]
 800810c:	43a3      	bics	r3, r4
 800810e:	d11c      	bne.n	800814a <_dtoa_r+0xb2>
 8008110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008112:	f242 730f 	movw	r3, #9999	; 0x270f
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800811c:	ea53 0308 	orrs.w	r3, r3, r8
 8008120:	f000 84fb 	beq.w	8008b1a <_dtoa_r+0xa82>
 8008124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008126:	b963      	cbnz	r3, 8008142 <_dtoa_r+0xaa>
 8008128:	4b90      	ldr	r3, [pc, #576]	; (800836c <_dtoa_r+0x2d4>)
 800812a:	e020      	b.n	800816e <_dtoa_r+0xd6>
 800812c:	4b90      	ldr	r3, [pc, #576]	; (8008370 <_dtoa_r+0x2d8>)
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	3308      	adds	r3, #8
 8008132:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	9801      	ldr	r0, [sp, #4]
 8008138:	b011      	add	sp, #68	; 0x44
 800813a:	ecbd 8b02 	vpop	{d8}
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	4b8a      	ldr	r3, [pc, #552]	; (800836c <_dtoa_r+0x2d4>)
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	3303      	adds	r3, #3
 8008148:	e7f3      	b.n	8008132 <_dtoa_r+0x9a>
 800814a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800814e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008156:	d10c      	bne.n	8008172 <_dtoa_r+0xda>
 8008158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800815a:	2301      	movs	r3, #1
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 84d7 	beq.w	8008b14 <_dtoa_r+0xa7c>
 8008166:	4b83      	ldr	r3, [pc, #524]	; (8008374 <_dtoa_r+0x2dc>)
 8008168:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	3b01      	subs	r3, #1
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	e7e1      	b.n	8008136 <_dtoa_r+0x9e>
 8008172:	aa0e      	add	r2, sp, #56	; 0x38
 8008174:	a90f      	add	r1, sp, #60	; 0x3c
 8008176:	4630      	mov	r0, r6
 8008178:	eeb0 0b48 	vmov.f64	d0, d8
 800817c:	f001 f91a 	bl	80093b4 <__d2b>
 8008180:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008186:	4605      	mov	r5, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d046      	beq.n	800821a <_dtoa_r+0x182>
 800818c:	eeb0 7b48 	vmov.f64	d7, d8
 8008190:	ee18 1a90 	vmov	r1, s17
 8008194:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008198:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800819c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80081a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80081a4:	2000      	movs	r0, #0
 80081a6:	ee07 1a90 	vmov	s15, r1
 80081aa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80081ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008348 <_dtoa_r+0x2b0>
 80081b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80081b6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008350 <_dtoa_r+0x2b8>
 80081ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80081be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008358 <_dtoa_r+0x2c0>
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80081ca:	eeb0 7b46 	vmov.f64	d7, d6
 80081ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80081d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80081d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80081da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081de:	ee16 ba90 	vmov	fp, s13
 80081e2:	9009      	str	r0, [sp, #36]	; 0x24
 80081e4:	d508      	bpl.n	80081f8 <_dtoa_r+0x160>
 80081e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80081ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80081ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f2:	bf18      	it	ne
 80081f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80081f8:	f1bb 0f16 	cmp.w	fp, #22
 80081fc:	d82b      	bhi.n	8008256 <_dtoa_r+0x1be>
 80081fe:	495e      	ldr	r1, [pc, #376]	; (8008378 <_dtoa_r+0x2e0>)
 8008200:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008204:	ed91 7b00 	vldr	d7, [r1]
 8008208:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800820c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008210:	d501      	bpl.n	8008216 <_dtoa_r+0x17e>
 8008212:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008216:	2100      	movs	r1, #0
 8008218:	e01e      	b.n	8008258 <_dtoa_r+0x1c0>
 800821a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800821c:	4413      	add	r3, r2
 800821e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8008222:	2920      	cmp	r1, #32
 8008224:	bfc1      	itttt	gt
 8008226:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800822a:	408c      	lslgt	r4, r1
 800822c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8008230:	fa28 f101 	lsrgt.w	r1, r8, r1
 8008234:	bfd6      	itet	le
 8008236:	f1c1 0120 	rsble	r1, r1, #32
 800823a:	4321      	orrgt	r1, r4
 800823c:	fa08 f101 	lslle.w	r1, r8, r1
 8008240:	ee07 1a90 	vmov	s15, r1
 8008244:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008248:	3b01      	subs	r3, #1
 800824a:	ee17 1a90 	vmov	r1, s15
 800824e:	2001      	movs	r0, #1
 8008250:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008254:	e7a7      	b.n	80081a6 <_dtoa_r+0x10e>
 8008256:	2101      	movs	r1, #1
 8008258:	1ad2      	subs	r2, r2, r3
 800825a:	1e53      	subs	r3, r2, #1
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	bf45      	ittet	mi
 8008260:	f1c2 0301 	rsbmi	r3, r2, #1
 8008264:	9304      	strmi	r3, [sp, #16]
 8008266:	2300      	movpl	r3, #0
 8008268:	2300      	movmi	r3, #0
 800826a:	bf4c      	ite	mi
 800826c:	9305      	strmi	r3, [sp, #20]
 800826e:	9304      	strpl	r3, [sp, #16]
 8008270:	f1bb 0f00 	cmp.w	fp, #0
 8008274:	910b      	str	r1, [sp, #44]	; 0x2c
 8008276:	db18      	blt.n	80082aa <_dtoa_r+0x212>
 8008278:	9b05      	ldr	r3, [sp, #20]
 800827a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800827e:	445b      	add	r3, fp
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	2300      	movs	r3, #0
 8008284:	9a06      	ldr	r2, [sp, #24]
 8008286:	2a09      	cmp	r2, #9
 8008288:	d848      	bhi.n	800831c <_dtoa_r+0x284>
 800828a:	2a05      	cmp	r2, #5
 800828c:	bfc4      	itt	gt
 800828e:	3a04      	subgt	r2, #4
 8008290:	9206      	strgt	r2, [sp, #24]
 8008292:	9a06      	ldr	r2, [sp, #24]
 8008294:	f1a2 0202 	sub.w	r2, r2, #2
 8008298:	bfcc      	ite	gt
 800829a:	2400      	movgt	r4, #0
 800829c:	2401      	movle	r4, #1
 800829e:	2a03      	cmp	r2, #3
 80082a0:	d847      	bhi.n	8008332 <_dtoa_r+0x29a>
 80082a2:	e8df f002 	tbb	[pc, r2]
 80082a6:	2d0b      	.short	0x2d0b
 80082a8:	392b      	.short	0x392b
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	2200      	movs	r2, #0
 80082ae:	eba3 030b 	sub.w	r3, r3, fp
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	920a      	str	r2, [sp, #40]	; 0x28
 80082b6:	f1cb 0300 	rsb	r3, fp, #0
 80082ba:	e7e3      	b.n	8008284 <_dtoa_r+0x1ec>
 80082bc:	2200      	movs	r2, #0
 80082be:	9207      	str	r2, [sp, #28]
 80082c0:	9a08      	ldr	r2, [sp, #32]
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	dc38      	bgt.n	8008338 <_dtoa_r+0x2a0>
 80082c6:	f04f 0a01 	mov.w	sl, #1
 80082ca:	46d1      	mov	r9, sl
 80082cc:	4652      	mov	r2, sl
 80082ce:	f8cd a020 	str.w	sl, [sp, #32]
 80082d2:	69f7      	ldr	r7, [r6, #28]
 80082d4:	2100      	movs	r1, #0
 80082d6:	2004      	movs	r0, #4
 80082d8:	f100 0c14 	add.w	ip, r0, #20
 80082dc:	4594      	cmp	ip, r2
 80082de:	d930      	bls.n	8008342 <_dtoa_r+0x2aa>
 80082e0:	6079      	str	r1, [r7, #4]
 80082e2:	4630      	mov	r0, r6
 80082e4:	930d      	str	r3, [sp, #52]	; 0x34
 80082e6:	f000 fd43 	bl	8008d70 <_Balloc>
 80082ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ec:	9001      	str	r0, [sp, #4]
 80082ee:	4602      	mov	r2, r0
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d145      	bne.n	8008380 <_dtoa_r+0x2e8>
 80082f4:	4b21      	ldr	r3, [pc, #132]	; (800837c <_dtoa_r+0x2e4>)
 80082f6:	f240 11af 	movw	r1, #431	; 0x1af
 80082fa:	e6e5      	b.n	80080c8 <_dtoa_r+0x30>
 80082fc:	2201      	movs	r2, #1
 80082fe:	e7de      	b.n	80082be <_dtoa_r+0x226>
 8008300:	2200      	movs	r2, #0
 8008302:	9207      	str	r2, [sp, #28]
 8008304:	9a08      	ldr	r2, [sp, #32]
 8008306:	eb0b 0a02 	add.w	sl, fp, r2
 800830a:	f10a 0901 	add.w	r9, sl, #1
 800830e:	464a      	mov	r2, r9
 8008310:	2a01      	cmp	r2, #1
 8008312:	bfb8      	it	lt
 8008314:	2201      	movlt	r2, #1
 8008316:	e7dc      	b.n	80082d2 <_dtoa_r+0x23a>
 8008318:	2201      	movs	r2, #1
 800831a:	e7f2      	b.n	8008302 <_dtoa_r+0x26a>
 800831c:	2401      	movs	r4, #1
 800831e:	2200      	movs	r2, #0
 8008320:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008324:	f04f 3aff 	mov.w	sl, #4294967295
 8008328:	2100      	movs	r1, #0
 800832a:	46d1      	mov	r9, sl
 800832c:	2212      	movs	r2, #18
 800832e:	9108      	str	r1, [sp, #32]
 8008330:	e7cf      	b.n	80082d2 <_dtoa_r+0x23a>
 8008332:	2201      	movs	r2, #1
 8008334:	9207      	str	r2, [sp, #28]
 8008336:	e7f5      	b.n	8008324 <_dtoa_r+0x28c>
 8008338:	f8dd a020 	ldr.w	sl, [sp, #32]
 800833c:	46d1      	mov	r9, sl
 800833e:	4652      	mov	r2, sl
 8008340:	e7c7      	b.n	80082d2 <_dtoa_r+0x23a>
 8008342:	3101      	adds	r1, #1
 8008344:	0040      	lsls	r0, r0, #1
 8008346:	e7c7      	b.n	80082d8 <_dtoa_r+0x240>
 8008348:	636f4361 	.word	0x636f4361
 800834c:	3fd287a7 	.word	0x3fd287a7
 8008350:	8b60c8b3 	.word	0x8b60c8b3
 8008354:	3fc68a28 	.word	0x3fc68a28
 8008358:	509f79fb 	.word	0x509f79fb
 800835c:	3fd34413 	.word	0x3fd34413
 8008360:	0800a00d 	.word	0x0800a00d
 8008364:	0800a024 	.word	0x0800a024
 8008368:	7ff00000 	.word	0x7ff00000
 800836c:	0800a009 	.word	0x0800a009
 8008370:	0800a000 	.word	0x0800a000
 8008374:	08009fdd 	.word	0x08009fdd
 8008378:	0800a110 	.word	0x0800a110
 800837c:	0800a07c 	.word	0x0800a07c
 8008380:	69f2      	ldr	r2, [r6, #28]
 8008382:	9901      	ldr	r1, [sp, #4]
 8008384:	6011      	str	r1, [r2, #0]
 8008386:	f1b9 0f0e 	cmp.w	r9, #14
 800838a:	d86c      	bhi.n	8008466 <_dtoa_r+0x3ce>
 800838c:	2c00      	cmp	r4, #0
 800838e:	d06a      	beq.n	8008466 <_dtoa_r+0x3ce>
 8008390:	f1bb 0f00 	cmp.w	fp, #0
 8008394:	f340 80a0 	ble.w	80084d8 <_dtoa_r+0x440>
 8008398:	4ac1      	ldr	r2, [pc, #772]	; (80086a0 <_dtoa_r+0x608>)
 800839a:	f00b 010f 	and.w	r1, fp, #15
 800839e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80083a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80083a6:	ed92 7b00 	vldr	d7, [r2]
 80083aa:	ea4f 122b 	mov.w	r2, fp, asr #4
 80083ae:	f000 8087 	beq.w	80084c0 <_dtoa_r+0x428>
 80083b2:	49bc      	ldr	r1, [pc, #752]	; (80086a4 <_dtoa_r+0x60c>)
 80083b4:	ed91 6b08 	vldr	d6, [r1, #32]
 80083b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80083bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80083c0:	f002 020f 	and.w	r2, r2, #15
 80083c4:	2103      	movs	r1, #3
 80083c6:	48b7      	ldr	r0, [pc, #732]	; (80086a4 <_dtoa_r+0x60c>)
 80083c8:	2a00      	cmp	r2, #0
 80083ca:	d17b      	bne.n	80084c4 <_dtoa_r+0x42c>
 80083cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80083d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80083d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083de:	2a00      	cmp	r2, #0
 80083e0:	f000 80a0 	beq.w	8008524 <_dtoa_r+0x48c>
 80083e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80083e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80083ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f0:	f140 8098 	bpl.w	8008524 <_dtoa_r+0x48c>
 80083f4:	f1b9 0f00 	cmp.w	r9, #0
 80083f8:	f000 8094 	beq.w	8008524 <_dtoa_r+0x48c>
 80083fc:	f1ba 0f00 	cmp.w	sl, #0
 8008400:	dd2f      	ble.n	8008462 <_dtoa_r+0x3ca>
 8008402:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800840a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800840e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008412:	3101      	adds	r1, #1
 8008414:	4654      	mov	r4, sl
 8008416:	ed9d 6b02 	vldr	d6, [sp, #8]
 800841a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800841e:	ee07 1a90 	vmov	s15, r1
 8008422:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008426:	eea7 5b06 	vfma.f64	d5, d7, d6
 800842a:	ee15 7a90 	vmov	r7, s11
 800842e:	ec51 0b15 	vmov	r0, r1, d5
 8008432:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8008436:	2c00      	cmp	r4, #0
 8008438:	d177      	bne.n	800852a <_dtoa_r+0x492>
 800843a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800843e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008442:	ec41 0b17 	vmov	d7, r0, r1
 8008446:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800844a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844e:	f300 826a 	bgt.w	8008926 <_dtoa_r+0x88e>
 8008452:	eeb1 7b47 	vneg.f64	d7, d7
 8008456:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800845a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800845e:	f100 8260 	bmi.w	8008922 <_dtoa_r+0x88a>
 8008462:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008468:	2a00      	cmp	r2, #0
 800846a:	f2c0 811d 	blt.w	80086a8 <_dtoa_r+0x610>
 800846e:	f1bb 0f0e 	cmp.w	fp, #14
 8008472:	f300 8119 	bgt.w	80086a8 <_dtoa_r+0x610>
 8008476:	4b8a      	ldr	r3, [pc, #552]	; (80086a0 <_dtoa_r+0x608>)
 8008478:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800847c:	ed93 6b00 	vldr	d6, [r3]
 8008480:	9b08      	ldr	r3, [sp, #32]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f280 80b7 	bge.w	80085f6 <_dtoa_r+0x55e>
 8008488:	f1b9 0f00 	cmp.w	r9, #0
 800848c:	f300 80b3 	bgt.w	80085f6 <_dtoa_r+0x55e>
 8008490:	f040 8246 	bne.w	8008920 <_dtoa_r+0x888>
 8008494:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008498:	ee26 6b07 	vmul.f64	d6, d6, d7
 800849c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a8:	464c      	mov	r4, r9
 80084aa:	464f      	mov	r7, r9
 80084ac:	f280 821c 	bge.w	80088e8 <_dtoa_r+0x850>
 80084b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084b4:	2331      	movs	r3, #49	; 0x31
 80084b6:	f808 3b01 	strb.w	r3, [r8], #1
 80084ba:	f10b 0b01 	add.w	fp, fp, #1
 80084be:	e218      	b.n	80088f2 <_dtoa_r+0x85a>
 80084c0:	2102      	movs	r1, #2
 80084c2:	e780      	b.n	80083c6 <_dtoa_r+0x32e>
 80084c4:	07d4      	lsls	r4, r2, #31
 80084c6:	d504      	bpl.n	80084d2 <_dtoa_r+0x43a>
 80084c8:	ed90 6b00 	vldr	d6, [r0]
 80084cc:	3101      	adds	r1, #1
 80084ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80084d2:	1052      	asrs	r2, r2, #1
 80084d4:	3008      	adds	r0, #8
 80084d6:	e777      	b.n	80083c8 <_dtoa_r+0x330>
 80084d8:	d022      	beq.n	8008520 <_dtoa_r+0x488>
 80084da:	f1cb 0200 	rsb	r2, fp, #0
 80084de:	4970      	ldr	r1, [pc, #448]	; (80086a0 <_dtoa_r+0x608>)
 80084e0:	f002 000f 	and.w	r0, r2, #15
 80084e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80084e8:	ed91 7b00 	vldr	d7, [r1]
 80084ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80084f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084f4:	486b      	ldr	r0, [pc, #428]	; (80086a4 <_dtoa_r+0x60c>)
 80084f6:	1112      	asrs	r2, r2, #4
 80084f8:	2400      	movs	r4, #0
 80084fa:	2102      	movs	r1, #2
 80084fc:	b92a      	cbnz	r2, 800850a <_dtoa_r+0x472>
 80084fe:	2c00      	cmp	r4, #0
 8008500:	f43f af6a 	beq.w	80083d8 <_dtoa_r+0x340>
 8008504:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008508:	e766      	b.n	80083d8 <_dtoa_r+0x340>
 800850a:	07d7      	lsls	r7, r2, #31
 800850c:	d505      	bpl.n	800851a <_dtoa_r+0x482>
 800850e:	ed90 6b00 	vldr	d6, [r0]
 8008512:	3101      	adds	r1, #1
 8008514:	2401      	movs	r4, #1
 8008516:	ee27 7b06 	vmul.f64	d7, d7, d6
 800851a:	1052      	asrs	r2, r2, #1
 800851c:	3008      	adds	r0, #8
 800851e:	e7ed      	b.n	80084fc <_dtoa_r+0x464>
 8008520:	2102      	movs	r1, #2
 8008522:	e759      	b.n	80083d8 <_dtoa_r+0x340>
 8008524:	465a      	mov	r2, fp
 8008526:	464c      	mov	r4, r9
 8008528:	e775      	b.n	8008416 <_dtoa_r+0x37e>
 800852a:	ec41 0b17 	vmov	d7, r0, r1
 800852e:	495c      	ldr	r1, [pc, #368]	; (80086a0 <_dtoa_r+0x608>)
 8008530:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008534:	ed11 4b02 	vldr	d4, [r1, #-8]
 8008538:	9901      	ldr	r1, [sp, #4]
 800853a:	440c      	add	r4, r1
 800853c:	9907      	ldr	r1, [sp, #28]
 800853e:	b351      	cbz	r1, 8008596 <_dtoa_r+0x4fe>
 8008540:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008544:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008548:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800854c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008550:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008554:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008558:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800855c:	ee14 1a90 	vmov	r1, s9
 8008560:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008564:	3130      	adds	r1, #48	; 0x30
 8008566:	ee36 6b45 	vsub.f64	d6, d6, d5
 800856a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800856e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008572:	f808 1b01 	strb.w	r1, [r8], #1
 8008576:	d439      	bmi.n	80085ec <_dtoa_r+0x554>
 8008578:	ee32 5b46 	vsub.f64	d5, d2, d6
 800857c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008584:	d472      	bmi.n	800866c <_dtoa_r+0x5d4>
 8008586:	45a0      	cmp	r8, r4
 8008588:	f43f af6b 	beq.w	8008462 <_dtoa_r+0x3ca>
 800858c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008590:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008594:	e7e0      	b.n	8008558 <_dtoa_r+0x4c0>
 8008596:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800859a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800859e:	4620      	mov	r0, r4
 80085a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80085a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80085a8:	ee14 1a90 	vmov	r1, s9
 80085ac:	3130      	adds	r1, #48	; 0x30
 80085ae:	f808 1b01 	strb.w	r1, [r8], #1
 80085b2:	45a0      	cmp	r8, r4
 80085b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80085b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80085bc:	d118      	bne.n	80085f0 <_dtoa_r+0x558>
 80085be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80085c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80085c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80085ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ce:	dc4d      	bgt.n	800866c <_dtoa_r+0x5d4>
 80085d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80085d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80085d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085dc:	f57f af41 	bpl.w	8008462 <_dtoa_r+0x3ca>
 80085e0:	4680      	mov	r8, r0
 80085e2:	3801      	subs	r0, #1
 80085e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80085e8:	2b30      	cmp	r3, #48	; 0x30
 80085ea:	d0f9      	beq.n	80085e0 <_dtoa_r+0x548>
 80085ec:	4693      	mov	fp, r2
 80085ee:	e02a      	b.n	8008646 <_dtoa_r+0x5ae>
 80085f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80085f4:	e7d6      	b.n	80085a4 <_dtoa_r+0x50c>
 80085f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80085fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008602:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008606:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800860a:	ee15 3a10 	vmov	r3, s10
 800860e:	3330      	adds	r3, #48	; 0x30
 8008610:	f808 3b01 	strb.w	r3, [r8], #1
 8008614:	9b01      	ldr	r3, [sp, #4]
 8008616:	eba8 0303 	sub.w	r3, r8, r3
 800861a:	4599      	cmp	r9, r3
 800861c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008620:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008624:	d133      	bne.n	800868e <_dtoa_r+0x5f6>
 8008626:	ee37 7b07 	vadd.f64	d7, d7, d7
 800862a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008632:	dc1a      	bgt.n	800866a <_dtoa_r+0x5d2>
 8008634:	eeb4 7b46 	vcmp.f64	d7, d6
 8008638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863c:	d103      	bne.n	8008646 <_dtoa_r+0x5ae>
 800863e:	ee15 3a10 	vmov	r3, s10
 8008642:	07d9      	lsls	r1, r3, #31
 8008644:	d411      	bmi.n	800866a <_dtoa_r+0x5d2>
 8008646:	4629      	mov	r1, r5
 8008648:	4630      	mov	r0, r6
 800864a:	f000 fbd1 	bl	8008df0 <_Bfree>
 800864e:	2300      	movs	r3, #0
 8008650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008652:	f888 3000 	strb.w	r3, [r8]
 8008656:	f10b 0301 	add.w	r3, fp, #1
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800865e:	2b00      	cmp	r3, #0
 8008660:	f43f ad69 	beq.w	8008136 <_dtoa_r+0x9e>
 8008664:	f8c3 8000 	str.w	r8, [r3]
 8008668:	e565      	b.n	8008136 <_dtoa_r+0x9e>
 800866a:	465a      	mov	r2, fp
 800866c:	4643      	mov	r3, r8
 800866e:	4698      	mov	r8, r3
 8008670:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8008674:	2939      	cmp	r1, #57	; 0x39
 8008676:	d106      	bne.n	8008686 <_dtoa_r+0x5ee>
 8008678:	9901      	ldr	r1, [sp, #4]
 800867a:	4299      	cmp	r1, r3
 800867c:	d1f7      	bne.n	800866e <_dtoa_r+0x5d6>
 800867e:	9801      	ldr	r0, [sp, #4]
 8008680:	2130      	movs	r1, #48	; 0x30
 8008682:	3201      	adds	r2, #1
 8008684:	7001      	strb	r1, [r0, #0]
 8008686:	7819      	ldrb	r1, [r3, #0]
 8008688:	3101      	adds	r1, #1
 800868a:	7019      	strb	r1, [r3, #0]
 800868c:	e7ae      	b.n	80085ec <_dtoa_r+0x554>
 800868e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008692:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869a:	d1b2      	bne.n	8008602 <_dtoa_r+0x56a>
 800869c:	e7d3      	b.n	8008646 <_dtoa_r+0x5ae>
 800869e:	bf00      	nop
 80086a0:	0800a110 	.word	0x0800a110
 80086a4:	0800a0e8 	.word	0x0800a0e8
 80086a8:	9907      	ldr	r1, [sp, #28]
 80086aa:	2900      	cmp	r1, #0
 80086ac:	f000 80d0 	beq.w	8008850 <_dtoa_r+0x7b8>
 80086b0:	9906      	ldr	r1, [sp, #24]
 80086b2:	2901      	cmp	r1, #1
 80086b4:	f300 80b4 	bgt.w	8008820 <_dtoa_r+0x788>
 80086b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086ba:	2900      	cmp	r1, #0
 80086bc:	f000 80ac 	beq.w	8008818 <_dtoa_r+0x780>
 80086c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80086c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80086c8:	461c      	mov	r4, r3
 80086ca:	9309      	str	r3, [sp, #36]	; 0x24
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	4413      	add	r3, r2
 80086d0:	9304      	str	r3, [sp, #16]
 80086d2:	9b05      	ldr	r3, [sp, #20]
 80086d4:	2101      	movs	r1, #1
 80086d6:	4413      	add	r3, r2
 80086d8:	4630      	mov	r0, r6
 80086da:	9305      	str	r3, [sp, #20]
 80086dc:	f000 fc3e 	bl	8008f5c <__i2b>
 80086e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e2:	4607      	mov	r7, r0
 80086e4:	f1b8 0f00 	cmp.w	r8, #0
 80086e8:	d00d      	beq.n	8008706 <_dtoa_r+0x66e>
 80086ea:	9a05      	ldr	r2, [sp, #20]
 80086ec:	2a00      	cmp	r2, #0
 80086ee:	dd0a      	ble.n	8008706 <_dtoa_r+0x66e>
 80086f0:	4542      	cmp	r2, r8
 80086f2:	9904      	ldr	r1, [sp, #16]
 80086f4:	bfa8      	it	ge
 80086f6:	4642      	movge	r2, r8
 80086f8:	1a89      	subs	r1, r1, r2
 80086fa:	9104      	str	r1, [sp, #16]
 80086fc:	9905      	ldr	r1, [sp, #20]
 80086fe:	eba8 0802 	sub.w	r8, r8, r2
 8008702:	1a8a      	subs	r2, r1, r2
 8008704:	9205      	str	r2, [sp, #20]
 8008706:	b303      	cbz	r3, 800874a <_dtoa_r+0x6b2>
 8008708:	9a07      	ldr	r2, [sp, #28]
 800870a:	2a00      	cmp	r2, #0
 800870c:	f000 80a5 	beq.w	800885a <_dtoa_r+0x7c2>
 8008710:	2c00      	cmp	r4, #0
 8008712:	dd13      	ble.n	800873c <_dtoa_r+0x6a4>
 8008714:	4639      	mov	r1, r7
 8008716:	4622      	mov	r2, r4
 8008718:	4630      	mov	r0, r6
 800871a:	930d      	str	r3, [sp, #52]	; 0x34
 800871c:	f000 fcde 	bl	80090dc <__pow5mult>
 8008720:	462a      	mov	r2, r5
 8008722:	4601      	mov	r1, r0
 8008724:	4607      	mov	r7, r0
 8008726:	4630      	mov	r0, r6
 8008728:	f000 fc2e 	bl	8008f88 <__multiply>
 800872c:	4629      	mov	r1, r5
 800872e:	9009      	str	r0, [sp, #36]	; 0x24
 8008730:	4630      	mov	r0, r6
 8008732:	f000 fb5d 	bl	8008df0 <_Bfree>
 8008736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800873a:	4615      	mov	r5, r2
 800873c:	1b1a      	subs	r2, r3, r4
 800873e:	d004      	beq.n	800874a <_dtoa_r+0x6b2>
 8008740:	4629      	mov	r1, r5
 8008742:	4630      	mov	r0, r6
 8008744:	f000 fcca 	bl	80090dc <__pow5mult>
 8008748:	4605      	mov	r5, r0
 800874a:	2101      	movs	r1, #1
 800874c:	4630      	mov	r0, r6
 800874e:	f000 fc05 	bl	8008f5c <__i2b>
 8008752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008754:	2b00      	cmp	r3, #0
 8008756:	4604      	mov	r4, r0
 8008758:	f340 8081 	ble.w	800885e <_dtoa_r+0x7c6>
 800875c:	461a      	mov	r2, r3
 800875e:	4601      	mov	r1, r0
 8008760:	4630      	mov	r0, r6
 8008762:	f000 fcbb 	bl	80090dc <__pow5mult>
 8008766:	9b06      	ldr	r3, [sp, #24]
 8008768:	2b01      	cmp	r3, #1
 800876a:	4604      	mov	r4, r0
 800876c:	dd7a      	ble.n	8008864 <_dtoa_r+0x7cc>
 800876e:	2300      	movs	r3, #0
 8008770:	9309      	str	r3, [sp, #36]	; 0x24
 8008772:	6922      	ldr	r2, [r4, #16]
 8008774:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008778:	6910      	ldr	r0, [r2, #16]
 800877a:	f000 fba1 	bl	8008ec0 <__hi0bits>
 800877e:	f1c0 0020 	rsb	r0, r0, #32
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	4418      	add	r0, r3
 8008786:	f010 001f 	ands.w	r0, r0, #31
 800878a:	f000 8093 	beq.w	80088b4 <_dtoa_r+0x81c>
 800878e:	f1c0 0220 	rsb	r2, r0, #32
 8008792:	2a04      	cmp	r2, #4
 8008794:	f340 8085 	ble.w	80088a2 <_dtoa_r+0x80a>
 8008798:	9b04      	ldr	r3, [sp, #16]
 800879a:	f1c0 001c 	rsb	r0, r0, #28
 800879e:	4403      	add	r3, r0
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	9b05      	ldr	r3, [sp, #20]
 80087a4:	4480      	add	r8, r0
 80087a6:	4403      	add	r3, r0
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd05      	ble.n	80087bc <_dtoa_r+0x724>
 80087b0:	4629      	mov	r1, r5
 80087b2:	461a      	mov	r2, r3
 80087b4:	4630      	mov	r0, r6
 80087b6:	f000 fceb 	bl	8009190 <__lshift>
 80087ba:	4605      	mov	r5, r0
 80087bc:	9b05      	ldr	r3, [sp, #20]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dd05      	ble.n	80087ce <_dtoa_r+0x736>
 80087c2:	4621      	mov	r1, r4
 80087c4:	461a      	mov	r2, r3
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 fce2 	bl	8009190 <__lshift>
 80087cc:	4604      	mov	r4, r0
 80087ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d071      	beq.n	80088b8 <_dtoa_r+0x820>
 80087d4:	4621      	mov	r1, r4
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 fd46 	bl	8009268 <__mcmp>
 80087dc:	2800      	cmp	r0, #0
 80087de:	da6b      	bge.n	80088b8 <_dtoa_r+0x820>
 80087e0:	2300      	movs	r3, #0
 80087e2:	4629      	mov	r1, r5
 80087e4:	220a      	movs	r2, #10
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 fb24 	bl	8008e34 <__multadd>
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087f2:	4605      	mov	r5, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8197 	beq.w	8008b28 <_dtoa_r+0xa90>
 80087fa:	4639      	mov	r1, r7
 80087fc:	2300      	movs	r3, #0
 80087fe:	220a      	movs	r2, #10
 8008800:	4630      	mov	r0, r6
 8008802:	f000 fb17 	bl	8008e34 <__multadd>
 8008806:	f1ba 0f00 	cmp.w	sl, #0
 800880a:	4607      	mov	r7, r0
 800880c:	f300 8093 	bgt.w	8008936 <_dtoa_r+0x89e>
 8008810:	9b06      	ldr	r3, [sp, #24]
 8008812:	2b02      	cmp	r3, #2
 8008814:	dc57      	bgt.n	80088c6 <_dtoa_r+0x82e>
 8008816:	e08e      	b.n	8008936 <_dtoa_r+0x89e>
 8008818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800881a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800881e:	e751      	b.n	80086c4 <_dtoa_r+0x62c>
 8008820:	f109 34ff 	add.w	r4, r9, #4294967295
 8008824:	42a3      	cmp	r3, r4
 8008826:	bfbf      	itttt	lt
 8008828:	1ae2      	sublt	r2, r4, r3
 800882a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800882c:	189b      	addlt	r3, r3, r2
 800882e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008830:	bfae      	itee	ge
 8008832:	1b1c      	subge	r4, r3, r4
 8008834:	4623      	movlt	r3, r4
 8008836:	2400      	movlt	r4, #0
 8008838:	f1b9 0f00 	cmp.w	r9, #0
 800883c:	bfb5      	itete	lt
 800883e:	9a04      	ldrlt	r2, [sp, #16]
 8008840:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008844:	eba2 0809 	sublt.w	r8, r2, r9
 8008848:	464a      	movge	r2, r9
 800884a:	bfb8      	it	lt
 800884c:	2200      	movlt	r2, #0
 800884e:	e73c      	b.n	80086ca <_dtoa_r+0x632>
 8008850:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008854:	9f07      	ldr	r7, [sp, #28]
 8008856:	461c      	mov	r4, r3
 8008858:	e744      	b.n	80086e4 <_dtoa_r+0x64c>
 800885a:	461a      	mov	r2, r3
 800885c:	e770      	b.n	8008740 <_dtoa_r+0x6a8>
 800885e:	9b06      	ldr	r3, [sp, #24]
 8008860:	2b01      	cmp	r3, #1
 8008862:	dc18      	bgt.n	8008896 <_dtoa_r+0x7fe>
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	b9b3      	cbnz	r3, 8008896 <_dtoa_r+0x7fe>
 8008868:	9b03      	ldr	r3, [sp, #12]
 800886a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800886e:	b9a2      	cbnz	r2, 800889a <_dtoa_r+0x802>
 8008870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008874:	0d12      	lsrs	r2, r2, #20
 8008876:	0512      	lsls	r2, r2, #20
 8008878:	b18a      	cbz	r2, 800889e <_dtoa_r+0x806>
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	3301      	adds	r3, #1
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	9b05      	ldr	r3, [sp, #20]
 8008882:	3301      	adds	r3, #1
 8008884:	9305      	str	r3, [sp, #20]
 8008886:	2301      	movs	r3, #1
 8008888:	9309      	str	r3, [sp, #36]	; 0x24
 800888a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888c:	2b00      	cmp	r3, #0
 800888e:	f47f af70 	bne.w	8008772 <_dtoa_r+0x6da>
 8008892:	2001      	movs	r0, #1
 8008894:	e775      	b.n	8008782 <_dtoa_r+0x6ea>
 8008896:	2300      	movs	r3, #0
 8008898:	e7f6      	b.n	8008888 <_dtoa_r+0x7f0>
 800889a:	9b02      	ldr	r3, [sp, #8]
 800889c:	e7f4      	b.n	8008888 <_dtoa_r+0x7f0>
 800889e:	9209      	str	r2, [sp, #36]	; 0x24
 80088a0:	e7f3      	b.n	800888a <_dtoa_r+0x7f2>
 80088a2:	d082      	beq.n	80087aa <_dtoa_r+0x712>
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	321c      	adds	r2, #28
 80088a8:	4413      	add	r3, r2
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	9b05      	ldr	r3, [sp, #20]
 80088ae:	4490      	add	r8, r2
 80088b0:	4413      	add	r3, r2
 80088b2:	e779      	b.n	80087a8 <_dtoa_r+0x710>
 80088b4:	4602      	mov	r2, r0
 80088b6:	e7f5      	b.n	80088a4 <_dtoa_r+0x80c>
 80088b8:	f1b9 0f00 	cmp.w	r9, #0
 80088bc:	dc36      	bgt.n	800892c <_dtoa_r+0x894>
 80088be:	9b06      	ldr	r3, [sp, #24]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	dd33      	ble.n	800892c <_dtoa_r+0x894>
 80088c4:	46ca      	mov	sl, r9
 80088c6:	f1ba 0f00 	cmp.w	sl, #0
 80088ca:	d10d      	bne.n	80088e8 <_dtoa_r+0x850>
 80088cc:	4621      	mov	r1, r4
 80088ce:	4653      	mov	r3, sl
 80088d0:	2205      	movs	r2, #5
 80088d2:	4630      	mov	r0, r6
 80088d4:	f000 faae 	bl	8008e34 <__multadd>
 80088d8:	4601      	mov	r1, r0
 80088da:	4604      	mov	r4, r0
 80088dc:	4628      	mov	r0, r5
 80088de:	f000 fcc3 	bl	8009268 <__mcmp>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	f73f ade4 	bgt.w	80084b0 <_dtoa_r+0x418>
 80088e8:	9b08      	ldr	r3, [sp, #32]
 80088ea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80088ee:	ea6f 0b03 	mvn.w	fp, r3
 80088f2:	f04f 0900 	mov.w	r9, #0
 80088f6:	4621      	mov	r1, r4
 80088f8:	4630      	mov	r0, r6
 80088fa:	f000 fa79 	bl	8008df0 <_Bfree>
 80088fe:	2f00      	cmp	r7, #0
 8008900:	f43f aea1 	beq.w	8008646 <_dtoa_r+0x5ae>
 8008904:	f1b9 0f00 	cmp.w	r9, #0
 8008908:	d005      	beq.n	8008916 <_dtoa_r+0x87e>
 800890a:	45b9      	cmp	r9, r7
 800890c:	d003      	beq.n	8008916 <_dtoa_r+0x87e>
 800890e:	4649      	mov	r1, r9
 8008910:	4630      	mov	r0, r6
 8008912:	f000 fa6d 	bl	8008df0 <_Bfree>
 8008916:	4639      	mov	r1, r7
 8008918:	4630      	mov	r0, r6
 800891a:	f000 fa69 	bl	8008df0 <_Bfree>
 800891e:	e692      	b.n	8008646 <_dtoa_r+0x5ae>
 8008920:	2400      	movs	r4, #0
 8008922:	4627      	mov	r7, r4
 8008924:	e7e0      	b.n	80088e8 <_dtoa_r+0x850>
 8008926:	4693      	mov	fp, r2
 8008928:	4627      	mov	r7, r4
 800892a:	e5c1      	b.n	80084b0 <_dtoa_r+0x418>
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	46ca      	mov	sl, r9
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 8100 	beq.w	8008b36 <_dtoa_r+0xa9e>
 8008936:	f1b8 0f00 	cmp.w	r8, #0
 800893a:	dd05      	ble.n	8008948 <_dtoa_r+0x8b0>
 800893c:	4639      	mov	r1, r7
 800893e:	4642      	mov	r2, r8
 8008940:	4630      	mov	r0, r6
 8008942:	f000 fc25 	bl	8009190 <__lshift>
 8008946:	4607      	mov	r7, r0
 8008948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894a:	2b00      	cmp	r3, #0
 800894c:	d05d      	beq.n	8008a0a <_dtoa_r+0x972>
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4630      	mov	r0, r6
 8008952:	f000 fa0d 	bl	8008d70 <_Balloc>
 8008956:	4680      	mov	r8, r0
 8008958:	b928      	cbnz	r0, 8008966 <_dtoa_r+0x8ce>
 800895a:	4b82      	ldr	r3, [pc, #520]	; (8008b64 <_dtoa_r+0xacc>)
 800895c:	4602      	mov	r2, r0
 800895e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008962:	f7ff bbb1 	b.w	80080c8 <_dtoa_r+0x30>
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	3202      	adds	r2, #2
 800896a:	0092      	lsls	r2, r2, #2
 800896c:	f107 010c 	add.w	r1, r7, #12
 8008970:	300c      	adds	r0, #12
 8008972:	f000 ffa9 	bl	80098c8 <memcpy>
 8008976:	2201      	movs	r2, #1
 8008978:	4641      	mov	r1, r8
 800897a:	4630      	mov	r0, r6
 800897c:	f000 fc08 	bl	8009190 <__lshift>
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	3301      	adds	r3, #1
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	9b01      	ldr	r3, [sp, #4]
 8008988:	4453      	add	r3, sl
 800898a:	9308      	str	r3, [sp, #32]
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	46b9      	mov	r9, r7
 8008994:	9307      	str	r3, [sp, #28]
 8008996:	4607      	mov	r7, r0
 8008998:	9b04      	ldr	r3, [sp, #16]
 800899a:	4621      	mov	r1, r4
 800899c:	3b01      	subs	r3, #1
 800899e:	4628      	mov	r0, r5
 80089a0:	9302      	str	r3, [sp, #8]
 80089a2:	f7ff faf0 	bl	8007f86 <quorem>
 80089a6:	4603      	mov	r3, r0
 80089a8:	3330      	adds	r3, #48	; 0x30
 80089aa:	9005      	str	r0, [sp, #20]
 80089ac:	4649      	mov	r1, r9
 80089ae:	4628      	mov	r0, r5
 80089b0:	9309      	str	r3, [sp, #36]	; 0x24
 80089b2:	f000 fc59 	bl	8009268 <__mcmp>
 80089b6:	463a      	mov	r2, r7
 80089b8:	4682      	mov	sl, r0
 80089ba:	4621      	mov	r1, r4
 80089bc:	4630      	mov	r0, r6
 80089be:	f000 fc6f 	bl	80092a0 <__mdiff>
 80089c2:	68c2      	ldr	r2, [r0, #12]
 80089c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c6:	4680      	mov	r8, r0
 80089c8:	bb0a      	cbnz	r2, 8008a0e <_dtoa_r+0x976>
 80089ca:	4601      	mov	r1, r0
 80089cc:	4628      	mov	r0, r5
 80089ce:	f000 fc4b 	bl	8009268 <__mcmp>
 80089d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d4:	4602      	mov	r2, r0
 80089d6:	4641      	mov	r1, r8
 80089d8:	4630      	mov	r0, r6
 80089da:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80089de:	f000 fa07 	bl	8008df0 <_Bfree>
 80089e2:	9b06      	ldr	r3, [sp, #24]
 80089e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089e6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80089ea:	ea43 0102 	orr.w	r1, r3, r2
 80089ee:	9b07      	ldr	r3, [sp, #28]
 80089f0:	4319      	orrs	r1, r3
 80089f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f4:	d10d      	bne.n	8008a12 <_dtoa_r+0x97a>
 80089f6:	2b39      	cmp	r3, #57	; 0x39
 80089f8:	d029      	beq.n	8008a4e <_dtoa_r+0x9b6>
 80089fa:	f1ba 0f00 	cmp.w	sl, #0
 80089fe:	dd01      	ble.n	8008a04 <_dtoa_r+0x96c>
 8008a00:	9b05      	ldr	r3, [sp, #20]
 8008a02:	3331      	adds	r3, #49	; 0x31
 8008a04:	9a02      	ldr	r2, [sp, #8]
 8008a06:	7013      	strb	r3, [r2, #0]
 8008a08:	e775      	b.n	80088f6 <_dtoa_r+0x85e>
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	e7b8      	b.n	8008980 <_dtoa_r+0x8e8>
 8008a0e:	2201      	movs	r2, #1
 8008a10:	e7e1      	b.n	80089d6 <_dtoa_r+0x93e>
 8008a12:	f1ba 0f00 	cmp.w	sl, #0
 8008a16:	db06      	blt.n	8008a26 <_dtoa_r+0x98e>
 8008a18:	9906      	ldr	r1, [sp, #24]
 8008a1a:	ea41 0a0a 	orr.w	sl, r1, sl
 8008a1e:	9907      	ldr	r1, [sp, #28]
 8008a20:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008a24:	d120      	bne.n	8008a68 <_dtoa_r+0x9d0>
 8008a26:	2a00      	cmp	r2, #0
 8008a28:	ddec      	ble.n	8008a04 <_dtoa_r+0x96c>
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	4630      	mov	r0, r6
 8008a30:	9304      	str	r3, [sp, #16]
 8008a32:	f000 fbad 	bl	8009190 <__lshift>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4605      	mov	r5, r0
 8008a3a:	f000 fc15 	bl	8009268 <__mcmp>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	dc02      	bgt.n	8008a4a <_dtoa_r+0x9b2>
 8008a44:	d1de      	bne.n	8008a04 <_dtoa_r+0x96c>
 8008a46:	07da      	lsls	r2, r3, #31
 8008a48:	d5dc      	bpl.n	8008a04 <_dtoa_r+0x96c>
 8008a4a:	2b39      	cmp	r3, #57	; 0x39
 8008a4c:	d1d8      	bne.n	8008a00 <_dtoa_r+0x968>
 8008a4e:	9a02      	ldr	r2, [sp, #8]
 8008a50:	2339      	movs	r3, #57	; 0x39
 8008a52:	7013      	strb	r3, [r2, #0]
 8008a54:	4643      	mov	r3, r8
 8008a56:	4698      	mov	r8, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008a5e:	2a39      	cmp	r2, #57	; 0x39
 8008a60:	d051      	beq.n	8008b06 <_dtoa_r+0xa6e>
 8008a62:	3201      	adds	r2, #1
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	e746      	b.n	80088f6 <_dtoa_r+0x85e>
 8008a68:	2a00      	cmp	r2, #0
 8008a6a:	dd03      	ble.n	8008a74 <_dtoa_r+0x9dc>
 8008a6c:	2b39      	cmp	r3, #57	; 0x39
 8008a6e:	d0ee      	beq.n	8008a4e <_dtoa_r+0x9b6>
 8008a70:	3301      	adds	r3, #1
 8008a72:	e7c7      	b.n	8008a04 <_dtoa_r+0x96c>
 8008a74:	9a04      	ldr	r2, [sp, #16]
 8008a76:	9908      	ldr	r1, [sp, #32]
 8008a78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a7c:	428a      	cmp	r2, r1
 8008a7e:	d02b      	beq.n	8008ad8 <_dtoa_r+0xa40>
 8008a80:	4629      	mov	r1, r5
 8008a82:	2300      	movs	r3, #0
 8008a84:	220a      	movs	r2, #10
 8008a86:	4630      	mov	r0, r6
 8008a88:	f000 f9d4 	bl	8008e34 <__multadd>
 8008a8c:	45b9      	cmp	r9, r7
 8008a8e:	4605      	mov	r5, r0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	f04f 020a 	mov.w	r2, #10
 8008a98:	4649      	mov	r1, r9
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	d107      	bne.n	8008aae <_dtoa_r+0xa16>
 8008a9e:	f000 f9c9 	bl	8008e34 <__multadd>
 8008aa2:	4681      	mov	r9, r0
 8008aa4:	4607      	mov	r7, r0
 8008aa6:	9b04      	ldr	r3, [sp, #16]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	e774      	b.n	8008998 <_dtoa_r+0x900>
 8008aae:	f000 f9c1 	bl	8008e34 <__multadd>
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	4681      	mov	r9, r0
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	220a      	movs	r2, #10
 8008aba:	4630      	mov	r0, r6
 8008abc:	f000 f9ba 	bl	8008e34 <__multadd>
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	e7f0      	b.n	8008aa6 <_dtoa_r+0xa0e>
 8008ac4:	f1ba 0f00 	cmp.w	sl, #0
 8008ac8:	9a01      	ldr	r2, [sp, #4]
 8008aca:	bfcc      	ite	gt
 8008acc:	46d0      	movgt	r8, sl
 8008ace:	f04f 0801 	movle.w	r8, #1
 8008ad2:	4490      	add	r8, r2
 8008ad4:	f04f 0900 	mov.w	r9, #0
 8008ad8:	4629      	mov	r1, r5
 8008ada:	2201      	movs	r2, #1
 8008adc:	4630      	mov	r0, r6
 8008ade:	9302      	str	r3, [sp, #8]
 8008ae0:	f000 fb56 	bl	8009190 <__lshift>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	f000 fbbe 	bl	8009268 <__mcmp>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	dcb1      	bgt.n	8008a54 <_dtoa_r+0x9bc>
 8008af0:	d102      	bne.n	8008af8 <_dtoa_r+0xa60>
 8008af2:	9b02      	ldr	r3, [sp, #8]
 8008af4:	07db      	lsls	r3, r3, #31
 8008af6:	d4ad      	bmi.n	8008a54 <_dtoa_r+0x9bc>
 8008af8:	4643      	mov	r3, r8
 8008afa:	4698      	mov	r8, r3
 8008afc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b00:	2a30      	cmp	r2, #48	; 0x30
 8008b02:	d0fa      	beq.n	8008afa <_dtoa_r+0xa62>
 8008b04:	e6f7      	b.n	80088f6 <_dtoa_r+0x85e>
 8008b06:	9a01      	ldr	r2, [sp, #4]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d1a4      	bne.n	8008a56 <_dtoa_r+0x9be>
 8008b0c:	f10b 0b01 	add.w	fp, fp, #1
 8008b10:	2331      	movs	r3, #49	; 0x31
 8008b12:	e778      	b.n	8008a06 <_dtoa_r+0x96e>
 8008b14:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <_dtoa_r+0xad0>)
 8008b16:	f7ff bb2a 	b.w	800816e <_dtoa_r+0xd6>
 8008b1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f47f ab05 	bne.w	800812c <_dtoa_r+0x94>
 8008b22:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <_dtoa_r+0xad4>)
 8008b24:	f7ff bb23 	b.w	800816e <_dtoa_r+0xd6>
 8008b28:	f1ba 0f00 	cmp.w	sl, #0
 8008b2c:	dc03      	bgt.n	8008b36 <_dtoa_r+0xa9e>
 8008b2e:	9b06      	ldr	r3, [sp, #24]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	f73f aec8 	bgt.w	80088c6 <_dtoa_r+0x82e>
 8008b36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f7ff fa22 	bl	8007f86 <quorem>
 8008b42:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b46:	f808 3b01 	strb.w	r3, [r8], #1
 8008b4a:	9a01      	ldr	r2, [sp, #4]
 8008b4c:	eba8 0202 	sub.w	r2, r8, r2
 8008b50:	4592      	cmp	sl, r2
 8008b52:	ddb7      	ble.n	8008ac4 <_dtoa_r+0xa2c>
 8008b54:	4629      	mov	r1, r5
 8008b56:	2300      	movs	r3, #0
 8008b58:	220a      	movs	r2, #10
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 f96a 	bl	8008e34 <__multadd>
 8008b60:	4605      	mov	r5, r0
 8008b62:	e7ea      	b.n	8008b3a <_dtoa_r+0xaa2>
 8008b64:	0800a07c 	.word	0x0800a07c
 8008b68:	08009fdc 	.word	0x08009fdc
 8008b6c:	0800a000 	.word	0x0800a000

08008b70 <_free_r>:
 8008b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b72:	2900      	cmp	r1, #0
 8008b74:	d044      	beq.n	8008c00 <_free_r+0x90>
 8008b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b7a:	9001      	str	r0, [sp, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b82:	bfb8      	it	lt
 8008b84:	18e4      	addlt	r4, r4, r3
 8008b86:	f000 f8e7 	bl	8008d58 <__malloc_lock>
 8008b8a:	4a1e      	ldr	r2, [pc, #120]	; (8008c04 <_free_r+0x94>)
 8008b8c:	9801      	ldr	r0, [sp, #4]
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	b933      	cbnz	r3, 8008ba0 <_free_r+0x30>
 8008b92:	6063      	str	r3, [r4, #4]
 8008b94:	6014      	str	r4, [r2, #0]
 8008b96:	b003      	add	sp, #12
 8008b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b9c:	f000 b8e2 	b.w	8008d64 <__malloc_unlock>
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	d908      	bls.n	8008bb6 <_free_r+0x46>
 8008ba4:	6825      	ldr	r5, [r4, #0]
 8008ba6:	1961      	adds	r1, r4, r5
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	bf01      	itttt	eq
 8008bac:	6819      	ldreq	r1, [r3, #0]
 8008bae:	685b      	ldreq	r3, [r3, #4]
 8008bb0:	1949      	addeq	r1, r1, r5
 8008bb2:	6021      	streq	r1, [r4, #0]
 8008bb4:	e7ed      	b.n	8008b92 <_free_r+0x22>
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	b10b      	cbz	r3, 8008bc0 <_free_r+0x50>
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d9fa      	bls.n	8008bb6 <_free_r+0x46>
 8008bc0:	6811      	ldr	r1, [r2, #0]
 8008bc2:	1855      	adds	r5, r2, r1
 8008bc4:	42a5      	cmp	r5, r4
 8008bc6:	d10b      	bne.n	8008be0 <_free_r+0x70>
 8008bc8:	6824      	ldr	r4, [r4, #0]
 8008bca:	4421      	add	r1, r4
 8008bcc:	1854      	adds	r4, r2, r1
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	d1e0      	bne.n	8008b96 <_free_r+0x26>
 8008bd4:	681c      	ldr	r4, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	6053      	str	r3, [r2, #4]
 8008bda:	440c      	add	r4, r1
 8008bdc:	6014      	str	r4, [r2, #0]
 8008bde:	e7da      	b.n	8008b96 <_free_r+0x26>
 8008be0:	d902      	bls.n	8008be8 <_free_r+0x78>
 8008be2:	230c      	movs	r3, #12
 8008be4:	6003      	str	r3, [r0, #0]
 8008be6:	e7d6      	b.n	8008b96 <_free_r+0x26>
 8008be8:	6825      	ldr	r5, [r4, #0]
 8008bea:	1961      	adds	r1, r4, r5
 8008bec:	428b      	cmp	r3, r1
 8008bee:	bf04      	itt	eq
 8008bf0:	6819      	ldreq	r1, [r3, #0]
 8008bf2:	685b      	ldreq	r3, [r3, #4]
 8008bf4:	6063      	str	r3, [r4, #4]
 8008bf6:	bf04      	itt	eq
 8008bf8:	1949      	addeq	r1, r1, r5
 8008bfa:	6021      	streq	r1, [r4, #0]
 8008bfc:	6054      	str	r4, [r2, #4]
 8008bfe:	e7ca      	b.n	8008b96 <_free_r+0x26>
 8008c00:	b003      	add	sp, #12
 8008c02:	bd30      	pop	{r4, r5, pc}
 8008c04:	240004cc 	.word	0x240004cc

08008c08 <malloc>:
 8008c08:	4b02      	ldr	r3, [pc, #8]	; (8008c14 <malloc+0xc>)
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	6818      	ldr	r0, [r3, #0]
 8008c0e:	f000 b823 	b.w	8008c58 <_malloc_r>
 8008c12:	bf00      	nop
 8008c14:	24000068 	.word	0x24000068

08008c18 <sbrk_aligned>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	4e0e      	ldr	r6, [pc, #56]	; (8008c54 <sbrk_aligned+0x3c>)
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	6831      	ldr	r1, [r6, #0]
 8008c20:	4605      	mov	r5, r0
 8008c22:	b911      	cbnz	r1, 8008c2a <sbrk_aligned+0x12>
 8008c24:	f000 fe40 	bl	80098a8 <_sbrk_r>
 8008c28:	6030      	str	r0, [r6, #0]
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f000 fe3b 	bl	80098a8 <_sbrk_r>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	d00a      	beq.n	8008c4c <sbrk_aligned+0x34>
 8008c36:	1cc4      	adds	r4, r0, #3
 8008c38:	f024 0403 	bic.w	r4, r4, #3
 8008c3c:	42a0      	cmp	r0, r4
 8008c3e:	d007      	beq.n	8008c50 <sbrk_aligned+0x38>
 8008c40:	1a21      	subs	r1, r4, r0
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 fe30 	bl	80098a8 <_sbrk_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d101      	bne.n	8008c50 <sbrk_aligned+0x38>
 8008c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c50:	4620      	mov	r0, r4
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	240004d0 	.word	0x240004d0

08008c58 <_malloc_r>:
 8008c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	1ccd      	adds	r5, r1, #3
 8008c5e:	f025 0503 	bic.w	r5, r5, #3
 8008c62:	3508      	adds	r5, #8
 8008c64:	2d0c      	cmp	r5, #12
 8008c66:	bf38      	it	cc
 8008c68:	250c      	movcc	r5, #12
 8008c6a:	2d00      	cmp	r5, #0
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	db01      	blt.n	8008c74 <_malloc_r+0x1c>
 8008c70:	42a9      	cmp	r1, r5
 8008c72:	d905      	bls.n	8008c80 <_malloc_r+0x28>
 8008c74:	230c      	movs	r3, #12
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	2600      	movs	r6, #0
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d54 <_malloc_r+0xfc>
 8008c84:	f000 f868 	bl	8008d58 <__malloc_lock>
 8008c88:	f8d8 3000 	ldr.w	r3, [r8]
 8008c8c:	461c      	mov	r4, r3
 8008c8e:	bb5c      	cbnz	r4, 8008ce8 <_malloc_r+0x90>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4638      	mov	r0, r7
 8008c94:	f7ff ffc0 	bl	8008c18 <sbrk_aligned>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	d155      	bne.n	8008d4a <_malloc_r+0xf2>
 8008c9e:	f8d8 4000 	ldr.w	r4, [r8]
 8008ca2:	4626      	mov	r6, r4
 8008ca4:	2e00      	cmp	r6, #0
 8008ca6:	d145      	bne.n	8008d34 <_malloc_r+0xdc>
 8008ca8:	2c00      	cmp	r4, #0
 8008caa:	d048      	beq.n	8008d3e <_malloc_r+0xe6>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	eb04 0903 	add.w	r9, r4, r3
 8008cb6:	f000 fdf7 	bl	80098a8 <_sbrk_r>
 8008cba:	4581      	cmp	r9, r0
 8008cbc:	d13f      	bne.n	8008d3e <_malloc_r+0xe6>
 8008cbe:	6821      	ldr	r1, [r4, #0]
 8008cc0:	1a6d      	subs	r5, r5, r1
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	f7ff ffa7 	bl	8008c18 <sbrk_aligned>
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d037      	beq.n	8008d3e <_malloc_r+0xe6>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	442b      	add	r3, r5
 8008cd2:	6023      	str	r3, [r4, #0]
 8008cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d038      	beq.n	8008d4e <_malloc_r+0xf6>
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	42a2      	cmp	r2, r4
 8008ce0:	d12b      	bne.n	8008d3a <_malloc_r+0xe2>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	e00f      	b.n	8008d08 <_malloc_r+0xb0>
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	1b52      	subs	r2, r2, r5
 8008cec:	d41f      	bmi.n	8008d2e <_malloc_r+0xd6>
 8008cee:	2a0b      	cmp	r2, #11
 8008cf0:	d917      	bls.n	8008d22 <_malloc_r+0xca>
 8008cf2:	1961      	adds	r1, r4, r5
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	6025      	str	r5, [r4, #0]
 8008cf8:	bf18      	it	ne
 8008cfa:	6059      	strne	r1, [r3, #4]
 8008cfc:	6863      	ldr	r3, [r4, #4]
 8008cfe:	bf08      	it	eq
 8008d00:	f8c8 1000 	streq.w	r1, [r8]
 8008d04:	5162      	str	r2, [r4, r5]
 8008d06:	604b      	str	r3, [r1, #4]
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f104 060b 	add.w	r6, r4, #11
 8008d0e:	f000 f829 	bl	8008d64 <__malloc_unlock>
 8008d12:	f026 0607 	bic.w	r6, r6, #7
 8008d16:	1d23      	adds	r3, r4, #4
 8008d18:	1af2      	subs	r2, r6, r3
 8008d1a:	d0ae      	beq.n	8008c7a <_malloc_r+0x22>
 8008d1c:	1b9b      	subs	r3, r3, r6
 8008d1e:	50a3      	str	r3, [r4, r2]
 8008d20:	e7ab      	b.n	8008c7a <_malloc_r+0x22>
 8008d22:	42a3      	cmp	r3, r4
 8008d24:	6862      	ldr	r2, [r4, #4]
 8008d26:	d1dd      	bne.n	8008ce4 <_malloc_r+0x8c>
 8008d28:	f8c8 2000 	str.w	r2, [r8]
 8008d2c:	e7ec      	b.n	8008d08 <_malloc_r+0xb0>
 8008d2e:	4623      	mov	r3, r4
 8008d30:	6864      	ldr	r4, [r4, #4]
 8008d32:	e7ac      	b.n	8008c8e <_malloc_r+0x36>
 8008d34:	4634      	mov	r4, r6
 8008d36:	6876      	ldr	r6, [r6, #4]
 8008d38:	e7b4      	b.n	8008ca4 <_malloc_r+0x4c>
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	e7cc      	b.n	8008cd8 <_malloc_r+0x80>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	603b      	str	r3, [r7, #0]
 8008d42:	4638      	mov	r0, r7
 8008d44:	f000 f80e 	bl	8008d64 <__malloc_unlock>
 8008d48:	e797      	b.n	8008c7a <_malloc_r+0x22>
 8008d4a:	6025      	str	r5, [r4, #0]
 8008d4c:	e7dc      	b.n	8008d08 <_malloc_r+0xb0>
 8008d4e:	605b      	str	r3, [r3, #4]
 8008d50:	deff      	udf	#255	; 0xff
 8008d52:	bf00      	nop
 8008d54:	240004cc 	.word	0x240004cc

08008d58 <__malloc_lock>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__malloc_lock+0x8>)
 8008d5a:	f7ff b912 	b.w	8007f82 <__retarget_lock_acquire_recursive>
 8008d5e:	bf00      	nop
 8008d60:	240004c8 	.word	0x240004c8

08008d64 <__malloc_unlock>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__malloc_unlock+0x8>)
 8008d66:	f7ff b90d 	b.w	8007f84 <__retarget_lock_release_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	240004c8 	.word	0x240004c8

08008d70 <_Balloc>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	69c6      	ldr	r6, [r0, #28]
 8008d74:	4604      	mov	r4, r0
 8008d76:	460d      	mov	r5, r1
 8008d78:	b976      	cbnz	r6, 8008d98 <_Balloc+0x28>
 8008d7a:	2010      	movs	r0, #16
 8008d7c:	f7ff ff44 	bl	8008c08 <malloc>
 8008d80:	4602      	mov	r2, r0
 8008d82:	61e0      	str	r0, [r4, #28]
 8008d84:	b920      	cbnz	r0, 8008d90 <_Balloc+0x20>
 8008d86:	4b18      	ldr	r3, [pc, #96]	; (8008de8 <_Balloc+0x78>)
 8008d88:	4818      	ldr	r0, [pc, #96]	; (8008dec <_Balloc+0x7c>)
 8008d8a:	216b      	movs	r1, #107	; 0x6b
 8008d8c:	f000 fdaa 	bl	80098e4 <__assert_func>
 8008d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d94:	6006      	str	r6, [r0, #0]
 8008d96:	60c6      	str	r6, [r0, #12]
 8008d98:	69e6      	ldr	r6, [r4, #28]
 8008d9a:	68f3      	ldr	r3, [r6, #12]
 8008d9c:	b183      	cbz	r3, 8008dc0 <_Balloc+0x50>
 8008d9e:	69e3      	ldr	r3, [r4, #28]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008da6:	b9b8      	cbnz	r0, 8008dd8 <_Balloc+0x68>
 8008da8:	2101      	movs	r1, #1
 8008daa:	fa01 f605 	lsl.w	r6, r1, r5
 8008dae:	1d72      	adds	r2, r6, #5
 8008db0:	0092      	lsls	r2, r2, #2
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 fdb4 	bl	8009920 <_calloc_r>
 8008db8:	b160      	cbz	r0, 8008dd4 <_Balloc+0x64>
 8008dba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dbe:	e00e      	b.n	8008dde <_Balloc+0x6e>
 8008dc0:	2221      	movs	r2, #33	; 0x21
 8008dc2:	2104      	movs	r1, #4
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 fdab 	bl	8009920 <_calloc_r>
 8008dca:	69e3      	ldr	r3, [r4, #28]
 8008dcc:	60f0      	str	r0, [r6, #12]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e4      	bne.n	8008d9e <_Balloc+0x2e>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	6802      	ldr	r2, [r0, #0]
 8008dda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dde:	2300      	movs	r3, #0
 8008de0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008de4:	e7f7      	b.n	8008dd6 <_Balloc+0x66>
 8008de6:	bf00      	nop
 8008de8:	0800a00d 	.word	0x0800a00d
 8008dec:	0800a08d 	.word	0x0800a08d

08008df0 <_Bfree>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	69c6      	ldr	r6, [r0, #28]
 8008df4:	4605      	mov	r5, r0
 8008df6:	460c      	mov	r4, r1
 8008df8:	b976      	cbnz	r6, 8008e18 <_Bfree+0x28>
 8008dfa:	2010      	movs	r0, #16
 8008dfc:	f7ff ff04 	bl	8008c08 <malloc>
 8008e00:	4602      	mov	r2, r0
 8008e02:	61e8      	str	r0, [r5, #28]
 8008e04:	b920      	cbnz	r0, 8008e10 <_Bfree+0x20>
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <_Bfree+0x3c>)
 8008e08:	4809      	ldr	r0, [pc, #36]	; (8008e30 <_Bfree+0x40>)
 8008e0a:	218f      	movs	r1, #143	; 0x8f
 8008e0c:	f000 fd6a 	bl	80098e4 <__assert_func>
 8008e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e14:	6006      	str	r6, [r0, #0]
 8008e16:	60c6      	str	r6, [r0, #12]
 8008e18:	b13c      	cbz	r4, 8008e2a <_Bfree+0x3a>
 8008e1a:	69eb      	ldr	r3, [r5, #28]
 8008e1c:	6862      	ldr	r2, [r4, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e24:	6021      	str	r1, [r4, #0]
 8008e26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	0800a00d 	.word	0x0800a00d
 8008e30:	0800a08d 	.word	0x0800a08d

08008e34 <__multadd>:
 8008e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e38:	690d      	ldr	r5, [r1, #16]
 8008e3a:	4607      	mov	r7, r0
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	461e      	mov	r6, r3
 8008e40:	f101 0c14 	add.w	ip, r1, #20
 8008e44:	2000      	movs	r0, #0
 8008e46:	f8dc 3000 	ldr.w	r3, [ip]
 8008e4a:	b299      	uxth	r1, r3
 8008e4c:	fb02 6101 	mla	r1, r2, r1, r6
 8008e50:	0c1e      	lsrs	r6, r3, #16
 8008e52:	0c0b      	lsrs	r3, r1, #16
 8008e54:	fb02 3306 	mla	r3, r2, r6, r3
 8008e58:	b289      	uxth	r1, r1
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e60:	4285      	cmp	r5, r0
 8008e62:	f84c 1b04 	str.w	r1, [ip], #4
 8008e66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e6a:	dcec      	bgt.n	8008e46 <__multadd+0x12>
 8008e6c:	b30e      	cbz	r6, 8008eb2 <__multadd+0x7e>
 8008e6e:	68a3      	ldr	r3, [r4, #8]
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dc19      	bgt.n	8008ea8 <__multadd+0x74>
 8008e74:	6861      	ldr	r1, [r4, #4]
 8008e76:	4638      	mov	r0, r7
 8008e78:	3101      	adds	r1, #1
 8008e7a:	f7ff ff79 	bl	8008d70 <_Balloc>
 8008e7e:	4680      	mov	r8, r0
 8008e80:	b928      	cbnz	r0, 8008e8e <__multadd+0x5a>
 8008e82:	4602      	mov	r2, r0
 8008e84:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <__multadd+0x84>)
 8008e86:	480d      	ldr	r0, [pc, #52]	; (8008ebc <__multadd+0x88>)
 8008e88:	21ba      	movs	r1, #186	; 0xba
 8008e8a:	f000 fd2b 	bl	80098e4 <__assert_func>
 8008e8e:	6922      	ldr	r2, [r4, #16]
 8008e90:	3202      	adds	r2, #2
 8008e92:	f104 010c 	add.w	r1, r4, #12
 8008e96:	0092      	lsls	r2, r2, #2
 8008e98:	300c      	adds	r0, #12
 8008e9a:	f000 fd15 	bl	80098c8 <memcpy>
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4638      	mov	r0, r7
 8008ea2:	f7ff ffa5 	bl	8008df0 <_Bfree>
 8008ea6:	4644      	mov	r4, r8
 8008ea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008eac:	3501      	adds	r5, #1
 8008eae:	615e      	str	r6, [r3, #20]
 8008eb0:	6125      	str	r5, [r4, #16]
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb8:	0800a07c 	.word	0x0800a07c
 8008ebc:	0800a08d 	.word	0x0800a08d

08008ec0 <__hi0bits>:
 8008ec0:	0c03      	lsrs	r3, r0, #16
 8008ec2:	041b      	lsls	r3, r3, #16
 8008ec4:	b9d3      	cbnz	r3, 8008efc <__hi0bits+0x3c>
 8008ec6:	0400      	lsls	r0, r0, #16
 8008ec8:	2310      	movs	r3, #16
 8008eca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ece:	bf04      	itt	eq
 8008ed0:	0200      	lsleq	r0, r0, #8
 8008ed2:	3308      	addeq	r3, #8
 8008ed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ed8:	bf04      	itt	eq
 8008eda:	0100      	lsleq	r0, r0, #4
 8008edc:	3304      	addeq	r3, #4
 8008ede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ee2:	bf04      	itt	eq
 8008ee4:	0080      	lsleq	r0, r0, #2
 8008ee6:	3302      	addeq	r3, #2
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	db05      	blt.n	8008ef8 <__hi0bits+0x38>
 8008eec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ef0:	f103 0301 	add.w	r3, r3, #1
 8008ef4:	bf08      	it	eq
 8008ef6:	2320      	moveq	r3, #32
 8008ef8:	4618      	mov	r0, r3
 8008efa:	4770      	bx	lr
 8008efc:	2300      	movs	r3, #0
 8008efe:	e7e4      	b.n	8008eca <__hi0bits+0xa>

08008f00 <__lo0bits>:
 8008f00:	6803      	ldr	r3, [r0, #0]
 8008f02:	f013 0207 	ands.w	r2, r3, #7
 8008f06:	d00c      	beq.n	8008f22 <__lo0bits+0x22>
 8008f08:	07d9      	lsls	r1, r3, #31
 8008f0a:	d422      	bmi.n	8008f52 <__lo0bits+0x52>
 8008f0c:	079a      	lsls	r2, r3, #30
 8008f0e:	bf49      	itett	mi
 8008f10:	085b      	lsrmi	r3, r3, #1
 8008f12:	089b      	lsrpl	r3, r3, #2
 8008f14:	6003      	strmi	r3, [r0, #0]
 8008f16:	2201      	movmi	r2, #1
 8008f18:	bf5c      	itt	pl
 8008f1a:	6003      	strpl	r3, [r0, #0]
 8008f1c:	2202      	movpl	r2, #2
 8008f1e:	4610      	mov	r0, r2
 8008f20:	4770      	bx	lr
 8008f22:	b299      	uxth	r1, r3
 8008f24:	b909      	cbnz	r1, 8008f2a <__lo0bits+0x2a>
 8008f26:	0c1b      	lsrs	r3, r3, #16
 8008f28:	2210      	movs	r2, #16
 8008f2a:	b2d9      	uxtb	r1, r3
 8008f2c:	b909      	cbnz	r1, 8008f32 <__lo0bits+0x32>
 8008f2e:	3208      	adds	r2, #8
 8008f30:	0a1b      	lsrs	r3, r3, #8
 8008f32:	0719      	lsls	r1, r3, #28
 8008f34:	bf04      	itt	eq
 8008f36:	091b      	lsreq	r3, r3, #4
 8008f38:	3204      	addeq	r2, #4
 8008f3a:	0799      	lsls	r1, r3, #30
 8008f3c:	bf04      	itt	eq
 8008f3e:	089b      	lsreq	r3, r3, #2
 8008f40:	3202      	addeq	r2, #2
 8008f42:	07d9      	lsls	r1, r3, #31
 8008f44:	d403      	bmi.n	8008f4e <__lo0bits+0x4e>
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	f102 0201 	add.w	r2, r2, #1
 8008f4c:	d003      	beq.n	8008f56 <__lo0bits+0x56>
 8008f4e:	6003      	str	r3, [r0, #0]
 8008f50:	e7e5      	b.n	8008f1e <__lo0bits+0x1e>
 8008f52:	2200      	movs	r2, #0
 8008f54:	e7e3      	b.n	8008f1e <__lo0bits+0x1e>
 8008f56:	2220      	movs	r2, #32
 8008f58:	e7e1      	b.n	8008f1e <__lo0bits+0x1e>
	...

08008f5c <__i2b>:
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	460c      	mov	r4, r1
 8008f60:	2101      	movs	r1, #1
 8008f62:	f7ff ff05 	bl	8008d70 <_Balloc>
 8008f66:	4602      	mov	r2, r0
 8008f68:	b928      	cbnz	r0, 8008f76 <__i2b+0x1a>
 8008f6a:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <__i2b+0x24>)
 8008f6c:	4805      	ldr	r0, [pc, #20]	; (8008f84 <__i2b+0x28>)
 8008f6e:	f240 1145 	movw	r1, #325	; 0x145
 8008f72:	f000 fcb7 	bl	80098e4 <__assert_func>
 8008f76:	2301      	movs	r3, #1
 8008f78:	6144      	str	r4, [r0, #20]
 8008f7a:	6103      	str	r3, [r0, #16]
 8008f7c:	bd10      	pop	{r4, pc}
 8008f7e:	bf00      	nop
 8008f80:	0800a07c 	.word	0x0800a07c
 8008f84:	0800a08d 	.word	0x0800a08d

08008f88 <__multiply>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	4691      	mov	r9, r2
 8008f8e:	690a      	ldr	r2, [r1, #16]
 8008f90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	bfb8      	it	lt
 8008f98:	460b      	movlt	r3, r1
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	bfbc      	itt	lt
 8008f9e:	464c      	movlt	r4, r9
 8008fa0:	4699      	movlt	r9, r3
 8008fa2:	6927      	ldr	r7, [r4, #16]
 8008fa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fa8:	68a3      	ldr	r3, [r4, #8]
 8008faa:	6861      	ldr	r1, [r4, #4]
 8008fac:	eb07 060a 	add.w	r6, r7, sl
 8008fb0:	42b3      	cmp	r3, r6
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	bfb8      	it	lt
 8008fb6:	3101      	addlt	r1, #1
 8008fb8:	f7ff feda 	bl	8008d70 <_Balloc>
 8008fbc:	b930      	cbnz	r0, 8008fcc <__multiply+0x44>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	4b44      	ldr	r3, [pc, #272]	; (80090d4 <__multiply+0x14c>)
 8008fc2:	4845      	ldr	r0, [pc, #276]	; (80090d8 <__multiply+0x150>)
 8008fc4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008fc8:	f000 fc8c 	bl	80098e4 <__assert_func>
 8008fcc:	f100 0514 	add.w	r5, r0, #20
 8008fd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fd4:	462b      	mov	r3, r5
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	4543      	cmp	r3, r8
 8008fda:	d321      	bcc.n	8009020 <__multiply+0x98>
 8008fdc:	f104 0314 	add.w	r3, r4, #20
 8008fe0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008fe4:	f109 0314 	add.w	r3, r9, #20
 8008fe8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008fec:	9202      	str	r2, [sp, #8]
 8008fee:	1b3a      	subs	r2, r7, r4
 8008ff0:	3a15      	subs	r2, #21
 8008ff2:	f022 0203 	bic.w	r2, r2, #3
 8008ff6:	3204      	adds	r2, #4
 8008ff8:	f104 0115 	add.w	r1, r4, #21
 8008ffc:	428f      	cmp	r7, r1
 8008ffe:	bf38      	it	cc
 8009000:	2204      	movcc	r2, #4
 8009002:	9201      	str	r2, [sp, #4]
 8009004:	9a02      	ldr	r2, [sp, #8]
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	429a      	cmp	r2, r3
 800900a:	d80c      	bhi.n	8009026 <__multiply+0x9e>
 800900c:	2e00      	cmp	r6, #0
 800900e:	dd03      	ble.n	8009018 <__multiply+0x90>
 8009010:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009014:	2b00      	cmp	r3, #0
 8009016:	d05b      	beq.n	80090d0 <__multiply+0x148>
 8009018:	6106      	str	r6, [r0, #16]
 800901a:	b005      	add	sp, #20
 800901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009020:	f843 2b04 	str.w	r2, [r3], #4
 8009024:	e7d8      	b.n	8008fd8 <__multiply+0x50>
 8009026:	f8b3 a000 	ldrh.w	sl, [r3]
 800902a:	f1ba 0f00 	cmp.w	sl, #0
 800902e:	d024      	beq.n	800907a <__multiply+0xf2>
 8009030:	f104 0e14 	add.w	lr, r4, #20
 8009034:	46a9      	mov	r9, r5
 8009036:	f04f 0c00 	mov.w	ip, #0
 800903a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800903e:	f8d9 1000 	ldr.w	r1, [r9]
 8009042:	fa1f fb82 	uxth.w	fp, r2
 8009046:	b289      	uxth	r1, r1
 8009048:	fb0a 110b 	mla	r1, sl, fp, r1
 800904c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009050:	f8d9 2000 	ldr.w	r2, [r9]
 8009054:	4461      	add	r1, ip
 8009056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800905a:	fb0a c20b 	mla	r2, sl, fp, ip
 800905e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009062:	b289      	uxth	r1, r1
 8009064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009068:	4577      	cmp	r7, lr
 800906a:	f849 1b04 	str.w	r1, [r9], #4
 800906e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009072:	d8e2      	bhi.n	800903a <__multiply+0xb2>
 8009074:	9a01      	ldr	r2, [sp, #4]
 8009076:	f845 c002 	str.w	ip, [r5, r2]
 800907a:	9a03      	ldr	r2, [sp, #12]
 800907c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009080:	3304      	adds	r3, #4
 8009082:	f1b9 0f00 	cmp.w	r9, #0
 8009086:	d021      	beq.n	80090cc <__multiply+0x144>
 8009088:	6829      	ldr	r1, [r5, #0]
 800908a:	f104 0c14 	add.w	ip, r4, #20
 800908e:	46ae      	mov	lr, r5
 8009090:	f04f 0a00 	mov.w	sl, #0
 8009094:	f8bc b000 	ldrh.w	fp, [ip]
 8009098:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800909c:	fb09 220b 	mla	r2, r9, fp, r2
 80090a0:	4452      	add	r2, sl
 80090a2:	b289      	uxth	r1, r1
 80090a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090a8:	f84e 1b04 	str.w	r1, [lr], #4
 80090ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80090b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090b4:	f8be 1000 	ldrh.w	r1, [lr]
 80090b8:	fb09 110a 	mla	r1, r9, sl, r1
 80090bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80090c0:	4567      	cmp	r7, ip
 80090c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090c6:	d8e5      	bhi.n	8009094 <__multiply+0x10c>
 80090c8:	9a01      	ldr	r2, [sp, #4]
 80090ca:	50a9      	str	r1, [r5, r2]
 80090cc:	3504      	adds	r5, #4
 80090ce:	e799      	b.n	8009004 <__multiply+0x7c>
 80090d0:	3e01      	subs	r6, #1
 80090d2:	e79b      	b.n	800900c <__multiply+0x84>
 80090d4:	0800a07c 	.word	0x0800a07c
 80090d8:	0800a08d 	.word	0x0800a08d

080090dc <__pow5mult>:
 80090dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e0:	4615      	mov	r5, r2
 80090e2:	f012 0203 	ands.w	r2, r2, #3
 80090e6:	4606      	mov	r6, r0
 80090e8:	460f      	mov	r7, r1
 80090ea:	d007      	beq.n	80090fc <__pow5mult+0x20>
 80090ec:	4c25      	ldr	r4, [pc, #148]	; (8009184 <__pow5mult+0xa8>)
 80090ee:	3a01      	subs	r2, #1
 80090f0:	2300      	movs	r3, #0
 80090f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090f6:	f7ff fe9d 	bl	8008e34 <__multadd>
 80090fa:	4607      	mov	r7, r0
 80090fc:	10ad      	asrs	r5, r5, #2
 80090fe:	d03d      	beq.n	800917c <__pow5mult+0xa0>
 8009100:	69f4      	ldr	r4, [r6, #28]
 8009102:	b97c      	cbnz	r4, 8009124 <__pow5mult+0x48>
 8009104:	2010      	movs	r0, #16
 8009106:	f7ff fd7f 	bl	8008c08 <malloc>
 800910a:	4602      	mov	r2, r0
 800910c:	61f0      	str	r0, [r6, #28]
 800910e:	b928      	cbnz	r0, 800911c <__pow5mult+0x40>
 8009110:	4b1d      	ldr	r3, [pc, #116]	; (8009188 <__pow5mult+0xac>)
 8009112:	481e      	ldr	r0, [pc, #120]	; (800918c <__pow5mult+0xb0>)
 8009114:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009118:	f000 fbe4 	bl	80098e4 <__assert_func>
 800911c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009120:	6004      	str	r4, [r0, #0]
 8009122:	60c4      	str	r4, [r0, #12]
 8009124:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800912c:	b94c      	cbnz	r4, 8009142 <__pow5mult+0x66>
 800912e:	f240 2171 	movw	r1, #625	; 0x271
 8009132:	4630      	mov	r0, r6
 8009134:	f7ff ff12 	bl	8008f5c <__i2b>
 8009138:	2300      	movs	r3, #0
 800913a:	f8c8 0008 	str.w	r0, [r8, #8]
 800913e:	4604      	mov	r4, r0
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	f04f 0900 	mov.w	r9, #0
 8009146:	07eb      	lsls	r3, r5, #31
 8009148:	d50a      	bpl.n	8009160 <__pow5mult+0x84>
 800914a:	4639      	mov	r1, r7
 800914c:	4622      	mov	r2, r4
 800914e:	4630      	mov	r0, r6
 8009150:	f7ff ff1a 	bl	8008f88 <__multiply>
 8009154:	4639      	mov	r1, r7
 8009156:	4680      	mov	r8, r0
 8009158:	4630      	mov	r0, r6
 800915a:	f7ff fe49 	bl	8008df0 <_Bfree>
 800915e:	4647      	mov	r7, r8
 8009160:	106d      	asrs	r5, r5, #1
 8009162:	d00b      	beq.n	800917c <__pow5mult+0xa0>
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	b938      	cbnz	r0, 8009178 <__pow5mult+0x9c>
 8009168:	4622      	mov	r2, r4
 800916a:	4621      	mov	r1, r4
 800916c:	4630      	mov	r0, r6
 800916e:	f7ff ff0b 	bl	8008f88 <__multiply>
 8009172:	6020      	str	r0, [r4, #0]
 8009174:	f8c0 9000 	str.w	r9, [r0]
 8009178:	4604      	mov	r4, r0
 800917a:	e7e4      	b.n	8009146 <__pow5mult+0x6a>
 800917c:	4638      	mov	r0, r7
 800917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009182:	bf00      	nop
 8009184:	0800a1d8 	.word	0x0800a1d8
 8009188:	0800a00d 	.word	0x0800a00d
 800918c:	0800a08d 	.word	0x0800a08d

08009190 <__lshift>:
 8009190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009194:	460c      	mov	r4, r1
 8009196:	6849      	ldr	r1, [r1, #4]
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800919e:	68a3      	ldr	r3, [r4, #8]
 80091a0:	4607      	mov	r7, r0
 80091a2:	4691      	mov	r9, r2
 80091a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091a8:	f108 0601 	add.w	r6, r8, #1
 80091ac:	42b3      	cmp	r3, r6
 80091ae:	db0b      	blt.n	80091c8 <__lshift+0x38>
 80091b0:	4638      	mov	r0, r7
 80091b2:	f7ff fddd 	bl	8008d70 <_Balloc>
 80091b6:	4605      	mov	r5, r0
 80091b8:	b948      	cbnz	r0, 80091ce <__lshift+0x3e>
 80091ba:	4602      	mov	r2, r0
 80091bc:	4b28      	ldr	r3, [pc, #160]	; (8009260 <__lshift+0xd0>)
 80091be:	4829      	ldr	r0, [pc, #164]	; (8009264 <__lshift+0xd4>)
 80091c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80091c4:	f000 fb8e 	bl	80098e4 <__assert_func>
 80091c8:	3101      	adds	r1, #1
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	e7ee      	b.n	80091ac <__lshift+0x1c>
 80091ce:	2300      	movs	r3, #0
 80091d0:	f100 0114 	add.w	r1, r0, #20
 80091d4:	f100 0210 	add.w	r2, r0, #16
 80091d8:	4618      	mov	r0, r3
 80091da:	4553      	cmp	r3, sl
 80091dc:	db33      	blt.n	8009246 <__lshift+0xb6>
 80091de:	6920      	ldr	r0, [r4, #16]
 80091e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091e4:	f104 0314 	add.w	r3, r4, #20
 80091e8:	f019 091f 	ands.w	r9, r9, #31
 80091ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091f4:	d02b      	beq.n	800924e <__lshift+0xbe>
 80091f6:	f1c9 0e20 	rsb	lr, r9, #32
 80091fa:	468a      	mov	sl, r1
 80091fc:	2200      	movs	r2, #0
 80091fe:	6818      	ldr	r0, [r3, #0]
 8009200:	fa00 f009 	lsl.w	r0, r0, r9
 8009204:	4310      	orrs	r0, r2
 8009206:	f84a 0b04 	str.w	r0, [sl], #4
 800920a:	f853 2b04 	ldr.w	r2, [r3], #4
 800920e:	459c      	cmp	ip, r3
 8009210:	fa22 f20e 	lsr.w	r2, r2, lr
 8009214:	d8f3      	bhi.n	80091fe <__lshift+0x6e>
 8009216:	ebac 0304 	sub.w	r3, ip, r4
 800921a:	3b15      	subs	r3, #21
 800921c:	f023 0303 	bic.w	r3, r3, #3
 8009220:	3304      	adds	r3, #4
 8009222:	f104 0015 	add.w	r0, r4, #21
 8009226:	4584      	cmp	ip, r0
 8009228:	bf38      	it	cc
 800922a:	2304      	movcc	r3, #4
 800922c:	50ca      	str	r2, [r1, r3]
 800922e:	b10a      	cbz	r2, 8009234 <__lshift+0xa4>
 8009230:	f108 0602 	add.w	r6, r8, #2
 8009234:	3e01      	subs	r6, #1
 8009236:	4638      	mov	r0, r7
 8009238:	612e      	str	r6, [r5, #16]
 800923a:	4621      	mov	r1, r4
 800923c:	f7ff fdd8 	bl	8008df0 <_Bfree>
 8009240:	4628      	mov	r0, r5
 8009242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009246:	f842 0f04 	str.w	r0, [r2, #4]!
 800924a:	3301      	adds	r3, #1
 800924c:	e7c5      	b.n	80091da <__lshift+0x4a>
 800924e:	3904      	subs	r1, #4
 8009250:	f853 2b04 	ldr.w	r2, [r3], #4
 8009254:	f841 2f04 	str.w	r2, [r1, #4]!
 8009258:	459c      	cmp	ip, r3
 800925a:	d8f9      	bhi.n	8009250 <__lshift+0xc0>
 800925c:	e7ea      	b.n	8009234 <__lshift+0xa4>
 800925e:	bf00      	nop
 8009260:	0800a07c 	.word	0x0800a07c
 8009264:	0800a08d 	.word	0x0800a08d

08009268 <__mcmp>:
 8009268:	b530      	push	{r4, r5, lr}
 800926a:	6902      	ldr	r2, [r0, #16]
 800926c:	690c      	ldr	r4, [r1, #16]
 800926e:	1b12      	subs	r2, r2, r4
 8009270:	d10e      	bne.n	8009290 <__mcmp+0x28>
 8009272:	f100 0314 	add.w	r3, r0, #20
 8009276:	3114      	adds	r1, #20
 8009278:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800927c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009280:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009284:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009288:	42a5      	cmp	r5, r4
 800928a:	d003      	beq.n	8009294 <__mcmp+0x2c>
 800928c:	d305      	bcc.n	800929a <__mcmp+0x32>
 800928e:	2201      	movs	r2, #1
 8009290:	4610      	mov	r0, r2
 8009292:	bd30      	pop	{r4, r5, pc}
 8009294:	4283      	cmp	r3, r0
 8009296:	d3f3      	bcc.n	8009280 <__mcmp+0x18>
 8009298:	e7fa      	b.n	8009290 <__mcmp+0x28>
 800929a:	f04f 32ff 	mov.w	r2, #4294967295
 800929e:	e7f7      	b.n	8009290 <__mcmp+0x28>

080092a0 <__mdiff>:
 80092a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	460c      	mov	r4, r1
 80092a6:	4606      	mov	r6, r0
 80092a8:	4611      	mov	r1, r2
 80092aa:	4620      	mov	r0, r4
 80092ac:	4690      	mov	r8, r2
 80092ae:	f7ff ffdb 	bl	8009268 <__mcmp>
 80092b2:	1e05      	subs	r5, r0, #0
 80092b4:	d110      	bne.n	80092d8 <__mdiff+0x38>
 80092b6:	4629      	mov	r1, r5
 80092b8:	4630      	mov	r0, r6
 80092ba:	f7ff fd59 	bl	8008d70 <_Balloc>
 80092be:	b930      	cbnz	r0, 80092ce <__mdiff+0x2e>
 80092c0:	4b3a      	ldr	r3, [pc, #232]	; (80093ac <__mdiff+0x10c>)
 80092c2:	4602      	mov	r2, r0
 80092c4:	f240 2137 	movw	r1, #567	; 0x237
 80092c8:	4839      	ldr	r0, [pc, #228]	; (80093b0 <__mdiff+0x110>)
 80092ca:	f000 fb0b 	bl	80098e4 <__assert_func>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d8:	bfa4      	itt	ge
 80092da:	4643      	movge	r3, r8
 80092dc:	46a0      	movge	r8, r4
 80092de:	4630      	mov	r0, r6
 80092e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092e4:	bfa6      	itte	ge
 80092e6:	461c      	movge	r4, r3
 80092e8:	2500      	movge	r5, #0
 80092ea:	2501      	movlt	r5, #1
 80092ec:	f7ff fd40 	bl	8008d70 <_Balloc>
 80092f0:	b920      	cbnz	r0, 80092fc <__mdiff+0x5c>
 80092f2:	4b2e      	ldr	r3, [pc, #184]	; (80093ac <__mdiff+0x10c>)
 80092f4:	4602      	mov	r2, r0
 80092f6:	f240 2145 	movw	r1, #581	; 0x245
 80092fa:	e7e5      	b.n	80092c8 <__mdiff+0x28>
 80092fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009300:	6926      	ldr	r6, [r4, #16]
 8009302:	60c5      	str	r5, [r0, #12]
 8009304:	f104 0914 	add.w	r9, r4, #20
 8009308:	f108 0514 	add.w	r5, r8, #20
 800930c:	f100 0e14 	add.w	lr, r0, #20
 8009310:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009314:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009318:	f108 0210 	add.w	r2, r8, #16
 800931c:	46f2      	mov	sl, lr
 800931e:	2100      	movs	r1, #0
 8009320:	f859 3b04 	ldr.w	r3, [r9], #4
 8009324:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009328:	fa11 f88b 	uxtah	r8, r1, fp
 800932c:	b299      	uxth	r1, r3
 800932e:	0c1b      	lsrs	r3, r3, #16
 8009330:	eba8 0801 	sub.w	r8, r8, r1
 8009334:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009338:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800933c:	fa1f f888 	uxth.w	r8, r8
 8009340:	1419      	asrs	r1, r3, #16
 8009342:	454e      	cmp	r6, r9
 8009344:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009348:	f84a 3b04 	str.w	r3, [sl], #4
 800934c:	d8e8      	bhi.n	8009320 <__mdiff+0x80>
 800934e:	1b33      	subs	r3, r6, r4
 8009350:	3b15      	subs	r3, #21
 8009352:	f023 0303 	bic.w	r3, r3, #3
 8009356:	3304      	adds	r3, #4
 8009358:	3415      	adds	r4, #21
 800935a:	42a6      	cmp	r6, r4
 800935c:	bf38      	it	cc
 800935e:	2304      	movcc	r3, #4
 8009360:	441d      	add	r5, r3
 8009362:	4473      	add	r3, lr
 8009364:	469e      	mov	lr, r3
 8009366:	462e      	mov	r6, r5
 8009368:	4566      	cmp	r6, ip
 800936a:	d30e      	bcc.n	800938a <__mdiff+0xea>
 800936c:	f10c 0203 	add.w	r2, ip, #3
 8009370:	1b52      	subs	r2, r2, r5
 8009372:	f022 0203 	bic.w	r2, r2, #3
 8009376:	3d03      	subs	r5, #3
 8009378:	45ac      	cmp	ip, r5
 800937a:	bf38      	it	cc
 800937c:	2200      	movcc	r2, #0
 800937e:	4413      	add	r3, r2
 8009380:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009384:	b17a      	cbz	r2, 80093a6 <__mdiff+0x106>
 8009386:	6107      	str	r7, [r0, #16]
 8009388:	e7a4      	b.n	80092d4 <__mdiff+0x34>
 800938a:	f856 8b04 	ldr.w	r8, [r6], #4
 800938e:	fa11 f288 	uxtah	r2, r1, r8
 8009392:	1414      	asrs	r4, r2, #16
 8009394:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009398:	b292      	uxth	r2, r2
 800939a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800939e:	f84e 2b04 	str.w	r2, [lr], #4
 80093a2:	1421      	asrs	r1, r4, #16
 80093a4:	e7e0      	b.n	8009368 <__mdiff+0xc8>
 80093a6:	3f01      	subs	r7, #1
 80093a8:	e7ea      	b.n	8009380 <__mdiff+0xe0>
 80093aa:	bf00      	nop
 80093ac:	0800a07c 	.word	0x0800a07c
 80093b0:	0800a08d 	.word	0x0800a08d

080093b4 <__d2b>:
 80093b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093b8:	460f      	mov	r7, r1
 80093ba:	2101      	movs	r1, #1
 80093bc:	ec59 8b10 	vmov	r8, r9, d0
 80093c0:	4616      	mov	r6, r2
 80093c2:	f7ff fcd5 	bl	8008d70 <_Balloc>
 80093c6:	4604      	mov	r4, r0
 80093c8:	b930      	cbnz	r0, 80093d8 <__d2b+0x24>
 80093ca:	4602      	mov	r2, r0
 80093cc:	4b24      	ldr	r3, [pc, #144]	; (8009460 <__d2b+0xac>)
 80093ce:	4825      	ldr	r0, [pc, #148]	; (8009464 <__d2b+0xb0>)
 80093d0:	f240 310f 	movw	r1, #783	; 0x30f
 80093d4:	f000 fa86 	bl	80098e4 <__assert_func>
 80093d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093e0:	bb2d      	cbnz	r5, 800942e <__d2b+0x7a>
 80093e2:	9301      	str	r3, [sp, #4]
 80093e4:	f1b8 0300 	subs.w	r3, r8, #0
 80093e8:	d026      	beq.n	8009438 <__d2b+0x84>
 80093ea:	4668      	mov	r0, sp
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	f7ff fd87 	bl	8008f00 <__lo0bits>
 80093f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093f6:	b1e8      	cbz	r0, 8009434 <__d2b+0x80>
 80093f8:	f1c0 0320 	rsb	r3, r0, #32
 80093fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009400:	430b      	orrs	r3, r1
 8009402:	40c2      	lsrs	r2, r0
 8009404:	6163      	str	r3, [r4, #20]
 8009406:	9201      	str	r2, [sp, #4]
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	61a3      	str	r3, [r4, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	bf14      	ite	ne
 8009410:	2202      	movne	r2, #2
 8009412:	2201      	moveq	r2, #1
 8009414:	6122      	str	r2, [r4, #16]
 8009416:	b1bd      	cbz	r5, 8009448 <__d2b+0x94>
 8009418:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800941c:	4405      	add	r5, r0
 800941e:	603d      	str	r5, [r7, #0]
 8009420:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009424:	6030      	str	r0, [r6, #0]
 8009426:	4620      	mov	r0, r4
 8009428:	b003      	add	sp, #12
 800942a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800942e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009432:	e7d6      	b.n	80093e2 <__d2b+0x2e>
 8009434:	6161      	str	r1, [r4, #20]
 8009436:	e7e7      	b.n	8009408 <__d2b+0x54>
 8009438:	a801      	add	r0, sp, #4
 800943a:	f7ff fd61 	bl	8008f00 <__lo0bits>
 800943e:	9b01      	ldr	r3, [sp, #4]
 8009440:	6163      	str	r3, [r4, #20]
 8009442:	3020      	adds	r0, #32
 8009444:	2201      	movs	r2, #1
 8009446:	e7e5      	b.n	8009414 <__d2b+0x60>
 8009448:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800944c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009450:	6038      	str	r0, [r7, #0]
 8009452:	6918      	ldr	r0, [r3, #16]
 8009454:	f7ff fd34 	bl	8008ec0 <__hi0bits>
 8009458:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800945c:	e7e2      	b.n	8009424 <__d2b+0x70>
 800945e:	bf00      	nop
 8009460:	0800a07c 	.word	0x0800a07c
 8009464:	0800a08d 	.word	0x0800a08d

08009468 <__ssputs_r>:
 8009468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800946c:	688e      	ldr	r6, [r1, #8]
 800946e:	461f      	mov	r7, r3
 8009470:	42be      	cmp	r6, r7
 8009472:	680b      	ldr	r3, [r1, #0]
 8009474:	4682      	mov	sl, r0
 8009476:	460c      	mov	r4, r1
 8009478:	4690      	mov	r8, r2
 800947a:	d82c      	bhi.n	80094d6 <__ssputs_r+0x6e>
 800947c:	898a      	ldrh	r2, [r1, #12]
 800947e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009482:	d026      	beq.n	80094d2 <__ssputs_r+0x6a>
 8009484:	6965      	ldr	r5, [r4, #20]
 8009486:	6909      	ldr	r1, [r1, #16]
 8009488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800948c:	eba3 0901 	sub.w	r9, r3, r1
 8009490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009494:	1c7b      	adds	r3, r7, #1
 8009496:	444b      	add	r3, r9
 8009498:	106d      	asrs	r5, r5, #1
 800949a:	429d      	cmp	r5, r3
 800949c:	bf38      	it	cc
 800949e:	461d      	movcc	r5, r3
 80094a0:	0553      	lsls	r3, r2, #21
 80094a2:	d527      	bpl.n	80094f4 <__ssputs_r+0x8c>
 80094a4:	4629      	mov	r1, r5
 80094a6:	f7ff fbd7 	bl	8008c58 <_malloc_r>
 80094aa:	4606      	mov	r6, r0
 80094ac:	b360      	cbz	r0, 8009508 <__ssputs_r+0xa0>
 80094ae:	6921      	ldr	r1, [r4, #16]
 80094b0:	464a      	mov	r2, r9
 80094b2:	f000 fa09 	bl	80098c8 <memcpy>
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	6126      	str	r6, [r4, #16]
 80094c4:	6165      	str	r5, [r4, #20]
 80094c6:	444e      	add	r6, r9
 80094c8:	eba5 0509 	sub.w	r5, r5, r9
 80094cc:	6026      	str	r6, [r4, #0]
 80094ce:	60a5      	str	r5, [r4, #8]
 80094d0:	463e      	mov	r6, r7
 80094d2:	42be      	cmp	r6, r7
 80094d4:	d900      	bls.n	80094d8 <__ssputs_r+0x70>
 80094d6:	463e      	mov	r6, r7
 80094d8:	6820      	ldr	r0, [r4, #0]
 80094da:	4632      	mov	r2, r6
 80094dc:	4641      	mov	r1, r8
 80094de:	f000 f9c9 	bl	8009874 <memmove>
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	1b9b      	subs	r3, r3, r6
 80094e6:	60a3      	str	r3, [r4, #8]
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	4433      	add	r3, r6
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	2000      	movs	r0, #0
 80094f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f4:	462a      	mov	r2, r5
 80094f6:	f000 fa3b 	bl	8009970 <_realloc_r>
 80094fa:	4606      	mov	r6, r0
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d1e0      	bne.n	80094c2 <__ssputs_r+0x5a>
 8009500:	6921      	ldr	r1, [r4, #16]
 8009502:	4650      	mov	r0, sl
 8009504:	f7ff fb34 	bl	8008b70 <_free_r>
 8009508:	230c      	movs	r3, #12
 800950a:	f8ca 3000 	str.w	r3, [sl]
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	f04f 30ff 	mov.w	r0, #4294967295
 800951a:	e7e9      	b.n	80094f0 <__ssputs_r+0x88>

0800951c <_svfiprintf_r>:
 800951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009520:	4698      	mov	r8, r3
 8009522:	898b      	ldrh	r3, [r1, #12]
 8009524:	061b      	lsls	r3, r3, #24
 8009526:	b09d      	sub	sp, #116	; 0x74
 8009528:	4607      	mov	r7, r0
 800952a:	460d      	mov	r5, r1
 800952c:	4614      	mov	r4, r2
 800952e:	d50e      	bpl.n	800954e <_svfiprintf_r+0x32>
 8009530:	690b      	ldr	r3, [r1, #16]
 8009532:	b963      	cbnz	r3, 800954e <_svfiprintf_r+0x32>
 8009534:	2140      	movs	r1, #64	; 0x40
 8009536:	f7ff fb8f 	bl	8008c58 <_malloc_r>
 800953a:	6028      	str	r0, [r5, #0]
 800953c:	6128      	str	r0, [r5, #16]
 800953e:	b920      	cbnz	r0, 800954a <_svfiprintf_r+0x2e>
 8009540:	230c      	movs	r3, #12
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	f04f 30ff 	mov.w	r0, #4294967295
 8009548:	e0d0      	b.n	80096ec <_svfiprintf_r+0x1d0>
 800954a:	2340      	movs	r3, #64	; 0x40
 800954c:	616b      	str	r3, [r5, #20]
 800954e:	2300      	movs	r3, #0
 8009550:	9309      	str	r3, [sp, #36]	; 0x24
 8009552:	2320      	movs	r3, #32
 8009554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009558:	f8cd 800c 	str.w	r8, [sp, #12]
 800955c:	2330      	movs	r3, #48	; 0x30
 800955e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009704 <_svfiprintf_r+0x1e8>
 8009562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009566:	f04f 0901 	mov.w	r9, #1
 800956a:	4623      	mov	r3, r4
 800956c:	469a      	mov	sl, r3
 800956e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009572:	b10a      	cbz	r2, 8009578 <_svfiprintf_r+0x5c>
 8009574:	2a25      	cmp	r2, #37	; 0x25
 8009576:	d1f9      	bne.n	800956c <_svfiprintf_r+0x50>
 8009578:	ebba 0b04 	subs.w	fp, sl, r4
 800957c:	d00b      	beq.n	8009596 <_svfiprintf_r+0x7a>
 800957e:	465b      	mov	r3, fp
 8009580:	4622      	mov	r2, r4
 8009582:	4629      	mov	r1, r5
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff ff6f 	bl	8009468 <__ssputs_r>
 800958a:	3001      	adds	r0, #1
 800958c:	f000 80a9 	beq.w	80096e2 <_svfiprintf_r+0x1c6>
 8009590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009592:	445a      	add	r2, fp
 8009594:	9209      	str	r2, [sp, #36]	; 0x24
 8009596:	f89a 3000 	ldrb.w	r3, [sl]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 80a1 	beq.w	80096e2 <_svfiprintf_r+0x1c6>
 80095a0:	2300      	movs	r3, #0
 80095a2:	f04f 32ff 	mov.w	r2, #4294967295
 80095a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095aa:	f10a 0a01 	add.w	sl, sl, #1
 80095ae:	9304      	str	r3, [sp, #16]
 80095b0:	9307      	str	r3, [sp, #28]
 80095b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095b6:	931a      	str	r3, [sp, #104]	; 0x68
 80095b8:	4654      	mov	r4, sl
 80095ba:	2205      	movs	r2, #5
 80095bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c0:	4850      	ldr	r0, [pc, #320]	; (8009704 <_svfiprintf_r+0x1e8>)
 80095c2:	f7f6 fe95 	bl	80002f0 <memchr>
 80095c6:	9a04      	ldr	r2, [sp, #16]
 80095c8:	b9d8      	cbnz	r0, 8009602 <_svfiprintf_r+0xe6>
 80095ca:	06d0      	lsls	r0, r2, #27
 80095cc:	bf44      	itt	mi
 80095ce:	2320      	movmi	r3, #32
 80095d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095d4:	0711      	lsls	r1, r2, #28
 80095d6:	bf44      	itt	mi
 80095d8:	232b      	movmi	r3, #43	; 0x2b
 80095da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095de:	f89a 3000 	ldrb.w	r3, [sl]
 80095e2:	2b2a      	cmp	r3, #42	; 0x2a
 80095e4:	d015      	beq.n	8009612 <_svfiprintf_r+0xf6>
 80095e6:	9a07      	ldr	r2, [sp, #28]
 80095e8:	4654      	mov	r4, sl
 80095ea:	2000      	movs	r0, #0
 80095ec:	f04f 0c0a 	mov.w	ip, #10
 80095f0:	4621      	mov	r1, r4
 80095f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f6:	3b30      	subs	r3, #48	; 0x30
 80095f8:	2b09      	cmp	r3, #9
 80095fa:	d94d      	bls.n	8009698 <_svfiprintf_r+0x17c>
 80095fc:	b1b0      	cbz	r0, 800962c <_svfiprintf_r+0x110>
 80095fe:	9207      	str	r2, [sp, #28]
 8009600:	e014      	b.n	800962c <_svfiprintf_r+0x110>
 8009602:	eba0 0308 	sub.w	r3, r0, r8
 8009606:	fa09 f303 	lsl.w	r3, r9, r3
 800960a:	4313      	orrs	r3, r2
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	46a2      	mov	sl, r4
 8009610:	e7d2      	b.n	80095b8 <_svfiprintf_r+0x9c>
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	1d19      	adds	r1, r3, #4
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	9103      	str	r1, [sp, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	bfbb      	ittet	lt
 800961e:	425b      	neglt	r3, r3
 8009620:	f042 0202 	orrlt.w	r2, r2, #2
 8009624:	9307      	strge	r3, [sp, #28]
 8009626:	9307      	strlt	r3, [sp, #28]
 8009628:	bfb8      	it	lt
 800962a:	9204      	strlt	r2, [sp, #16]
 800962c:	7823      	ldrb	r3, [r4, #0]
 800962e:	2b2e      	cmp	r3, #46	; 0x2e
 8009630:	d10c      	bne.n	800964c <_svfiprintf_r+0x130>
 8009632:	7863      	ldrb	r3, [r4, #1]
 8009634:	2b2a      	cmp	r3, #42	; 0x2a
 8009636:	d134      	bne.n	80096a2 <_svfiprintf_r+0x186>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	9203      	str	r2, [sp, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	bfb8      	it	lt
 8009644:	f04f 33ff 	movlt.w	r3, #4294967295
 8009648:	3402      	adds	r4, #2
 800964a:	9305      	str	r3, [sp, #20]
 800964c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009714 <_svfiprintf_r+0x1f8>
 8009650:	7821      	ldrb	r1, [r4, #0]
 8009652:	2203      	movs	r2, #3
 8009654:	4650      	mov	r0, sl
 8009656:	f7f6 fe4b 	bl	80002f0 <memchr>
 800965a:	b138      	cbz	r0, 800966c <_svfiprintf_r+0x150>
 800965c:	9b04      	ldr	r3, [sp, #16]
 800965e:	eba0 000a 	sub.w	r0, r0, sl
 8009662:	2240      	movs	r2, #64	; 0x40
 8009664:	4082      	lsls	r2, r0
 8009666:	4313      	orrs	r3, r2
 8009668:	3401      	adds	r4, #1
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009670:	4825      	ldr	r0, [pc, #148]	; (8009708 <_svfiprintf_r+0x1ec>)
 8009672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009676:	2206      	movs	r2, #6
 8009678:	f7f6 fe3a 	bl	80002f0 <memchr>
 800967c:	2800      	cmp	r0, #0
 800967e:	d038      	beq.n	80096f2 <_svfiprintf_r+0x1d6>
 8009680:	4b22      	ldr	r3, [pc, #136]	; (800970c <_svfiprintf_r+0x1f0>)
 8009682:	bb1b      	cbnz	r3, 80096cc <_svfiprintf_r+0x1b0>
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	3307      	adds	r3, #7
 8009688:	f023 0307 	bic.w	r3, r3, #7
 800968c:	3308      	adds	r3, #8
 800968e:	9303      	str	r3, [sp, #12]
 8009690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009692:	4433      	add	r3, r6
 8009694:	9309      	str	r3, [sp, #36]	; 0x24
 8009696:	e768      	b.n	800956a <_svfiprintf_r+0x4e>
 8009698:	fb0c 3202 	mla	r2, ip, r2, r3
 800969c:	460c      	mov	r4, r1
 800969e:	2001      	movs	r0, #1
 80096a0:	e7a6      	b.n	80095f0 <_svfiprintf_r+0xd4>
 80096a2:	2300      	movs	r3, #0
 80096a4:	3401      	adds	r4, #1
 80096a6:	9305      	str	r3, [sp, #20]
 80096a8:	4619      	mov	r1, r3
 80096aa:	f04f 0c0a 	mov.w	ip, #10
 80096ae:	4620      	mov	r0, r4
 80096b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096b4:	3a30      	subs	r2, #48	; 0x30
 80096b6:	2a09      	cmp	r2, #9
 80096b8:	d903      	bls.n	80096c2 <_svfiprintf_r+0x1a6>
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0c6      	beq.n	800964c <_svfiprintf_r+0x130>
 80096be:	9105      	str	r1, [sp, #20]
 80096c0:	e7c4      	b.n	800964c <_svfiprintf_r+0x130>
 80096c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80096c6:	4604      	mov	r4, r0
 80096c8:	2301      	movs	r3, #1
 80096ca:	e7f0      	b.n	80096ae <_svfiprintf_r+0x192>
 80096cc:	ab03      	add	r3, sp, #12
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	462a      	mov	r2, r5
 80096d2:	4b0f      	ldr	r3, [pc, #60]	; (8009710 <_svfiprintf_r+0x1f4>)
 80096d4:	a904      	add	r1, sp, #16
 80096d6:	4638      	mov	r0, r7
 80096d8:	f7fd ff06 	bl	80074e8 <_printf_float>
 80096dc:	1c42      	adds	r2, r0, #1
 80096de:	4606      	mov	r6, r0
 80096e0:	d1d6      	bne.n	8009690 <_svfiprintf_r+0x174>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	065b      	lsls	r3, r3, #25
 80096e6:	f53f af2d 	bmi.w	8009544 <_svfiprintf_r+0x28>
 80096ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ec:	b01d      	add	sp, #116	; 0x74
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f2:	ab03      	add	r3, sp, #12
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	462a      	mov	r2, r5
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <_svfiprintf_r+0x1f4>)
 80096fa:	a904      	add	r1, sp, #16
 80096fc:	4638      	mov	r0, r7
 80096fe:	f7fe f97b 	bl	80079f8 <_printf_i>
 8009702:	e7eb      	b.n	80096dc <_svfiprintf_r+0x1c0>
 8009704:	0800a1e4 	.word	0x0800a1e4
 8009708:	0800a1ee 	.word	0x0800a1ee
 800970c:	080074e9 	.word	0x080074e9
 8009710:	08009469 	.word	0x08009469
 8009714:	0800a1ea 	.word	0x0800a1ea

08009718 <__sflush_r>:
 8009718:	898a      	ldrh	r2, [r1, #12]
 800971a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971e:	4605      	mov	r5, r0
 8009720:	0710      	lsls	r0, r2, #28
 8009722:	460c      	mov	r4, r1
 8009724:	d458      	bmi.n	80097d8 <__sflush_r+0xc0>
 8009726:	684b      	ldr	r3, [r1, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	dc05      	bgt.n	8009738 <__sflush_r+0x20>
 800972c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800972e:	2b00      	cmp	r3, #0
 8009730:	dc02      	bgt.n	8009738 <__sflush_r+0x20>
 8009732:	2000      	movs	r0, #0
 8009734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800973a:	2e00      	cmp	r6, #0
 800973c:	d0f9      	beq.n	8009732 <__sflush_r+0x1a>
 800973e:	2300      	movs	r3, #0
 8009740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009744:	682f      	ldr	r7, [r5, #0]
 8009746:	6a21      	ldr	r1, [r4, #32]
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	d032      	beq.n	80097b2 <__sflush_r+0x9a>
 800974c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	075a      	lsls	r2, r3, #29
 8009752:	d505      	bpl.n	8009760 <__sflush_r+0x48>
 8009754:	6863      	ldr	r3, [r4, #4]
 8009756:	1ac0      	subs	r0, r0, r3
 8009758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800975a:	b10b      	cbz	r3, 8009760 <__sflush_r+0x48>
 800975c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800975e:	1ac0      	subs	r0, r0, r3
 8009760:	2300      	movs	r3, #0
 8009762:	4602      	mov	r2, r0
 8009764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009766:	6a21      	ldr	r1, [r4, #32]
 8009768:	4628      	mov	r0, r5
 800976a:	47b0      	blx	r6
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	d106      	bne.n	8009780 <__sflush_r+0x68>
 8009772:	6829      	ldr	r1, [r5, #0]
 8009774:	291d      	cmp	r1, #29
 8009776:	d82b      	bhi.n	80097d0 <__sflush_r+0xb8>
 8009778:	4a29      	ldr	r2, [pc, #164]	; (8009820 <__sflush_r+0x108>)
 800977a:	410a      	asrs	r2, r1
 800977c:	07d6      	lsls	r6, r2, #31
 800977e:	d427      	bmi.n	80097d0 <__sflush_r+0xb8>
 8009780:	2200      	movs	r2, #0
 8009782:	6062      	str	r2, [r4, #4]
 8009784:	04d9      	lsls	r1, r3, #19
 8009786:	6922      	ldr	r2, [r4, #16]
 8009788:	6022      	str	r2, [r4, #0]
 800978a:	d504      	bpl.n	8009796 <__sflush_r+0x7e>
 800978c:	1c42      	adds	r2, r0, #1
 800978e:	d101      	bne.n	8009794 <__sflush_r+0x7c>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b903      	cbnz	r3, 8009796 <__sflush_r+0x7e>
 8009794:	6560      	str	r0, [r4, #84]	; 0x54
 8009796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009798:	602f      	str	r7, [r5, #0]
 800979a:	2900      	cmp	r1, #0
 800979c:	d0c9      	beq.n	8009732 <__sflush_r+0x1a>
 800979e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a2:	4299      	cmp	r1, r3
 80097a4:	d002      	beq.n	80097ac <__sflush_r+0x94>
 80097a6:	4628      	mov	r0, r5
 80097a8:	f7ff f9e2 	bl	8008b70 <_free_r>
 80097ac:	2000      	movs	r0, #0
 80097ae:	6360      	str	r0, [r4, #52]	; 0x34
 80097b0:	e7c0      	b.n	8009734 <__sflush_r+0x1c>
 80097b2:	2301      	movs	r3, #1
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b0      	blx	r6
 80097b8:	1c41      	adds	r1, r0, #1
 80097ba:	d1c8      	bne.n	800974e <__sflush_r+0x36>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d0c5      	beq.n	800974e <__sflush_r+0x36>
 80097c2:	2b1d      	cmp	r3, #29
 80097c4:	d001      	beq.n	80097ca <__sflush_r+0xb2>
 80097c6:	2b16      	cmp	r3, #22
 80097c8:	d101      	bne.n	80097ce <__sflush_r+0xb6>
 80097ca:	602f      	str	r7, [r5, #0]
 80097cc:	e7b1      	b.n	8009732 <__sflush_r+0x1a>
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d4:	81a3      	strh	r3, [r4, #12]
 80097d6:	e7ad      	b.n	8009734 <__sflush_r+0x1c>
 80097d8:	690f      	ldr	r7, [r1, #16]
 80097da:	2f00      	cmp	r7, #0
 80097dc:	d0a9      	beq.n	8009732 <__sflush_r+0x1a>
 80097de:	0793      	lsls	r3, r2, #30
 80097e0:	680e      	ldr	r6, [r1, #0]
 80097e2:	bf08      	it	eq
 80097e4:	694b      	ldreq	r3, [r1, #20]
 80097e6:	600f      	str	r7, [r1, #0]
 80097e8:	bf18      	it	ne
 80097ea:	2300      	movne	r3, #0
 80097ec:	eba6 0807 	sub.w	r8, r6, r7
 80097f0:	608b      	str	r3, [r1, #8]
 80097f2:	f1b8 0f00 	cmp.w	r8, #0
 80097f6:	dd9c      	ble.n	8009732 <__sflush_r+0x1a>
 80097f8:	6a21      	ldr	r1, [r4, #32]
 80097fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097fc:	4643      	mov	r3, r8
 80097fe:	463a      	mov	r2, r7
 8009800:	4628      	mov	r0, r5
 8009802:	47b0      	blx	r6
 8009804:	2800      	cmp	r0, #0
 8009806:	dc06      	bgt.n	8009816 <__sflush_r+0xfe>
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	e78e      	b.n	8009734 <__sflush_r+0x1c>
 8009816:	4407      	add	r7, r0
 8009818:	eba8 0800 	sub.w	r8, r8, r0
 800981c:	e7e9      	b.n	80097f2 <__sflush_r+0xda>
 800981e:	bf00      	nop
 8009820:	dfbffffe 	.word	0xdfbffffe

08009824 <_fflush_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	690b      	ldr	r3, [r1, #16]
 8009828:	4605      	mov	r5, r0
 800982a:	460c      	mov	r4, r1
 800982c:	b913      	cbnz	r3, 8009834 <_fflush_r+0x10>
 800982e:	2500      	movs	r5, #0
 8009830:	4628      	mov	r0, r5
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	b118      	cbz	r0, 800983e <_fflush_r+0x1a>
 8009836:	6a03      	ldr	r3, [r0, #32]
 8009838:	b90b      	cbnz	r3, 800983e <_fflush_r+0x1a>
 800983a:	f7fe fa8b 	bl	8007d54 <__sinit>
 800983e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0f3      	beq.n	800982e <_fflush_r+0xa>
 8009846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009848:	07d0      	lsls	r0, r2, #31
 800984a:	d404      	bmi.n	8009856 <_fflush_r+0x32>
 800984c:	0599      	lsls	r1, r3, #22
 800984e:	d402      	bmi.n	8009856 <_fflush_r+0x32>
 8009850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009852:	f7fe fb96 	bl	8007f82 <__retarget_lock_acquire_recursive>
 8009856:	4628      	mov	r0, r5
 8009858:	4621      	mov	r1, r4
 800985a:	f7ff ff5d 	bl	8009718 <__sflush_r>
 800985e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009860:	07da      	lsls	r2, r3, #31
 8009862:	4605      	mov	r5, r0
 8009864:	d4e4      	bmi.n	8009830 <_fflush_r+0xc>
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	059b      	lsls	r3, r3, #22
 800986a:	d4e1      	bmi.n	8009830 <_fflush_r+0xc>
 800986c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800986e:	f7fe fb89 	bl	8007f84 <__retarget_lock_release_recursive>
 8009872:	e7dd      	b.n	8009830 <_fflush_r+0xc>

08009874 <memmove>:
 8009874:	4288      	cmp	r0, r1
 8009876:	b510      	push	{r4, lr}
 8009878:	eb01 0402 	add.w	r4, r1, r2
 800987c:	d902      	bls.n	8009884 <memmove+0x10>
 800987e:	4284      	cmp	r4, r0
 8009880:	4623      	mov	r3, r4
 8009882:	d807      	bhi.n	8009894 <memmove+0x20>
 8009884:	1e43      	subs	r3, r0, #1
 8009886:	42a1      	cmp	r1, r4
 8009888:	d008      	beq.n	800989c <memmove+0x28>
 800988a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800988e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009892:	e7f8      	b.n	8009886 <memmove+0x12>
 8009894:	4402      	add	r2, r0
 8009896:	4601      	mov	r1, r0
 8009898:	428a      	cmp	r2, r1
 800989a:	d100      	bne.n	800989e <memmove+0x2a>
 800989c:	bd10      	pop	{r4, pc}
 800989e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098a6:	e7f7      	b.n	8009898 <memmove+0x24>

080098a8 <_sbrk_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d06      	ldr	r5, [pc, #24]	; (80098c4 <_sbrk_r+0x1c>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	602b      	str	r3, [r5, #0]
 80098b4:	f7f7 fdb4 	bl	8001420 <_sbrk>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_sbrk_r+0x1a>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_sbrk_r+0x1a>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	240004c4 	.word	0x240004c4

080098c8 <memcpy>:
 80098c8:	440a      	add	r2, r1
 80098ca:	4291      	cmp	r1, r2
 80098cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098d0:	d100      	bne.n	80098d4 <memcpy+0xc>
 80098d2:	4770      	bx	lr
 80098d4:	b510      	push	{r4, lr}
 80098d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098de:	4291      	cmp	r1, r2
 80098e0:	d1f9      	bne.n	80098d6 <memcpy+0xe>
 80098e2:	bd10      	pop	{r4, pc}

080098e4 <__assert_func>:
 80098e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098e6:	4614      	mov	r4, r2
 80098e8:	461a      	mov	r2, r3
 80098ea:	4b09      	ldr	r3, [pc, #36]	; (8009910 <__assert_func+0x2c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4605      	mov	r5, r0
 80098f0:	68d8      	ldr	r0, [r3, #12]
 80098f2:	b14c      	cbz	r4, 8009908 <__assert_func+0x24>
 80098f4:	4b07      	ldr	r3, [pc, #28]	; (8009914 <__assert_func+0x30>)
 80098f6:	9100      	str	r1, [sp, #0]
 80098f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098fc:	4906      	ldr	r1, [pc, #24]	; (8009918 <__assert_func+0x34>)
 80098fe:	462b      	mov	r3, r5
 8009900:	f000 f872 	bl	80099e8 <fiprintf>
 8009904:	f000 f882 	bl	8009a0c <abort>
 8009908:	4b04      	ldr	r3, [pc, #16]	; (800991c <__assert_func+0x38>)
 800990a:	461c      	mov	r4, r3
 800990c:	e7f3      	b.n	80098f6 <__assert_func+0x12>
 800990e:	bf00      	nop
 8009910:	24000068 	.word	0x24000068
 8009914:	0800a1ff 	.word	0x0800a1ff
 8009918:	0800a20c 	.word	0x0800a20c
 800991c:	0800a23a 	.word	0x0800a23a

08009920 <_calloc_r>:
 8009920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009922:	fba1 2402 	umull	r2, r4, r1, r2
 8009926:	b94c      	cbnz	r4, 800993c <_calloc_r+0x1c>
 8009928:	4611      	mov	r1, r2
 800992a:	9201      	str	r2, [sp, #4]
 800992c:	f7ff f994 	bl	8008c58 <_malloc_r>
 8009930:	9a01      	ldr	r2, [sp, #4]
 8009932:	4605      	mov	r5, r0
 8009934:	b930      	cbnz	r0, 8009944 <_calloc_r+0x24>
 8009936:	4628      	mov	r0, r5
 8009938:	b003      	add	sp, #12
 800993a:	bd30      	pop	{r4, r5, pc}
 800993c:	220c      	movs	r2, #12
 800993e:	6002      	str	r2, [r0, #0]
 8009940:	2500      	movs	r5, #0
 8009942:	e7f8      	b.n	8009936 <_calloc_r+0x16>
 8009944:	4621      	mov	r1, r4
 8009946:	f7fe fa9e 	bl	8007e86 <memset>
 800994a:	e7f4      	b.n	8009936 <_calloc_r+0x16>

0800994c <__ascii_mbtowc>:
 800994c:	b082      	sub	sp, #8
 800994e:	b901      	cbnz	r1, 8009952 <__ascii_mbtowc+0x6>
 8009950:	a901      	add	r1, sp, #4
 8009952:	b142      	cbz	r2, 8009966 <__ascii_mbtowc+0x1a>
 8009954:	b14b      	cbz	r3, 800996a <__ascii_mbtowc+0x1e>
 8009956:	7813      	ldrb	r3, [r2, #0]
 8009958:	600b      	str	r3, [r1, #0]
 800995a:	7812      	ldrb	r2, [r2, #0]
 800995c:	1e10      	subs	r0, r2, #0
 800995e:	bf18      	it	ne
 8009960:	2001      	movne	r0, #1
 8009962:	b002      	add	sp, #8
 8009964:	4770      	bx	lr
 8009966:	4610      	mov	r0, r2
 8009968:	e7fb      	b.n	8009962 <__ascii_mbtowc+0x16>
 800996a:	f06f 0001 	mvn.w	r0, #1
 800996e:	e7f8      	b.n	8009962 <__ascii_mbtowc+0x16>

08009970 <_realloc_r>:
 8009970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009974:	4680      	mov	r8, r0
 8009976:	4614      	mov	r4, r2
 8009978:	460e      	mov	r6, r1
 800997a:	b921      	cbnz	r1, 8009986 <_realloc_r+0x16>
 800997c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009980:	4611      	mov	r1, r2
 8009982:	f7ff b969 	b.w	8008c58 <_malloc_r>
 8009986:	b92a      	cbnz	r2, 8009994 <_realloc_r+0x24>
 8009988:	f7ff f8f2 	bl	8008b70 <_free_r>
 800998c:	4625      	mov	r5, r4
 800998e:	4628      	mov	r0, r5
 8009990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009994:	f000 f841 	bl	8009a1a <_malloc_usable_size_r>
 8009998:	4284      	cmp	r4, r0
 800999a:	4607      	mov	r7, r0
 800999c:	d802      	bhi.n	80099a4 <_realloc_r+0x34>
 800999e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099a2:	d812      	bhi.n	80099ca <_realloc_r+0x5a>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4640      	mov	r0, r8
 80099a8:	f7ff f956 	bl	8008c58 <_malloc_r>
 80099ac:	4605      	mov	r5, r0
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d0ed      	beq.n	800998e <_realloc_r+0x1e>
 80099b2:	42bc      	cmp	r4, r7
 80099b4:	4622      	mov	r2, r4
 80099b6:	4631      	mov	r1, r6
 80099b8:	bf28      	it	cs
 80099ba:	463a      	movcs	r2, r7
 80099bc:	f7ff ff84 	bl	80098c8 <memcpy>
 80099c0:	4631      	mov	r1, r6
 80099c2:	4640      	mov	r0, r8
 80099c4:	f7ff f8d4 	bl	8008b70 <_free_r>
 80099c8:	e7e1      	b.n	800998e <_realloc_r+0x1e>
 80099ca:	4635      	mov	r5, r6
 80099cc:	e7df      	b.n	800998e <_realloc_r+0x1e>

080099ce <__ascii_wctomb>:
 80099ce:	b149      	cbz	r1, 80099e4 <__ascii_wctomb+0x16>
 80099d0:	2aff      	cmp	r2, #255	; 0xff
 80099d2:	bf85      	ittet	hi
 80099d4:	238a      	movhi	r3, #138	; 0x8a
 80099d6:	6003      	strhi	r3, [r0, #0]
 80099d8:	700a      	strbls	r2, [r1, #0]
 80099da:	f04f 30ff 	movhi.w	r0, #4294967295
 80099de:	bf98      	it	ls
 80099e0:	2001      	movls	r0, #1
 80099e2:	4770      	bx	lr
 80099e4:	4608      	mov	r0, r1
 80099e6:	4770      	bx	lr

080099e8 <fiprintf>:
 80099e8:	b40e      	push	{r1, r2, r3}
 80099ea:	b503      	push	{r0, r1, lr}
 80099ec:	4601      	mov	r1, r0
 80099ee:	ab03      	add	r3, sp, #12
 80099f0:	4805      	ldr	r0, [pc, #20]	; (8009a08 <fiprintf+0x20>)
 80099f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099f6:	6800      	ldr	r0, [r0, #0]
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	f000 f83f 	bl	8009a7c <_vfiprintf_r>
 80099fe:	b002      	add	sp, #8
 8009a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a04:	b003      	add	sp, #12
 8009a06:	4770      	bx	lr
 8009a08:	24000068 	.word	0x24000068

08009a0c <abort>:
 8009a0c:	b508      	push	{r3, lr}
 8009a0e:	2006      	movs	r0, #6
 8009a10:	f000 fa0c 	bl	8009e2c <raise>
 8009a14:	2001      	movs	r0, #1
 8009a16:	f7f7 fc8b 	bl	8001330 <_exit>

08009a1a <_malloc_usable_size_r>:
 8009a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a1e:	1f18      	subs	r0, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bfbc      	itt	lt
 8009a24:	580b      	ldrlt	r3, [r1, r0]
 8009a26:	18c0      	addlt	r0, r0, r3
 8009a28:	4770      	bx	lr

08009a2a <__sfputc_r>:
 8009a2a:	6893      	ldr	r3, [r2, #8]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	b410      	push	{r4}
 8009a32:	6093      	str	r3, [r2, #8]
 8009a34:	da08      	bge.n	8009a48 <__sfputc_r+0x1e>
 8009a36:	6994      	ldr	r4, [r2, #24]
 8009a38:	42a3      	cmp	r3, r4
 8009a3a:	db01      	blt.n	8009a40 <__sfputc_r+0x16>
 8009a3c:	290a      	cmp	r1, #10
 8009a3e:	d103      	bne.n	8009a48 <__sfputc_r+0x1e>
 8009a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a44:	f000 b934 	b.w	8009cb0 <__swbuf_r>
 8009a48:	6813      	ldr	r3, [r2, #0]
 8009a4a:	1c58      	adds	r0, r3, #1
 8009a4c:	6010      	str	r0, [r2, #0]
 8009a4e:	7019      	strb	r1, [r3, #0]
 8009a50:	4608      	mov	r0, r1
 8009a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <__sfputs_r>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	460f      	mov	r7, r1
 8009a5e:	4614      	mov	r4, r2
 8009a60:	18d5      	adds	r5, r2, r3
 8009a62:	42ac      	cmp	r4, r5
 8009a64:	d101      	bne.n	8009a6a <__sfputs_r+0x12>
 8009a66:	2000      	movs	r0, #0
 8009a68:	e007      	b.n	8009a7a <__sfputs_r+0x22>
 8009a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6e:	463a      	mov	r2, r7
 8009a70:	4630      	mov	r0, r6
 8009a72:	f7ff ffda 	bl	8009a2a <__sfputc_r>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	d1f3      	bne.n	8009a62 <__sfputs_r+0xa>
 8009a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a7c <_vfiprintf_r>:
 8009a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a80:	460d      	mov	r5, r1
 8009a82:	b09d      	sub	sp, #116	; 0x74
 8009a84:	4614      	mov	r4, r2
 8009a86:	4698      	mov	r8, r3
 8009a88:	4606      	mov	r6, r0
 8009a8a:	b118      	cbz	r0, 8009a94 <_vfiprintf_r+0x18>
 8009a8c:	6a03      	ldr	r3, [r0, #32]
 8009a8e:	b90b      	cbnz	r3, 8009a94 <_vfiprintf_r+0x18>
 8009a90:	f7fe f960 	bl	8007d54 <__sinit>
 8009a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a96:	07d9      	lsls	r1, r3, #31
 8009a98:	d405      	bmi.n	8009aa6 <_vfiprintf_r+0x2a>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	059a      	lsls	r2, r3, #22
 8009a9e:	d402      	bmi.n	8009aa6 <_vfiprintf_r+0x2a>
 8009aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aa2:	f7fe fa6e 	bl	8007f82 <__retarget_lock_acquire_recursive>
 8009aa6:	89ab      	ldrh	r3, [r5, #12]
 8009aa8:	071b      	lsls	r3, r3, #28
 8009aaa:	d501      	bpl.n	8009ab0 <_vfiprintf_r+0x34>
 8009aac:	692b      	ldr	r3, [r5, #16]
 8009aae:	b99b      	cbnz	r3, 8009ad8 <_vfiprintf_r+0x5c>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f000 f93a 	bl	8009d2c <__swsetup_r>
 8009ab8:	b170      	cbz	r0, 8009ad8 <_vfiprintf_r+0x5c>
 8009aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009abc:	07dc      	lsls	r4, r3, #31
 8009abe:	d504      	bpl.n	8009aca <_vfiprintf_r+0x4e>
 8009ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac4:	b01d      	add	sp, #116	; 0x74
 8009ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aca:	89ab      	ldrh	r3, [r5, #12]
 8009acc:	0598      	lsls	r0, r3, #22
 8009ace:	d4f7      	bmi.n	8009ac0 <_vfiprintf_r+0x44>
 8009ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ad2:	f7fe fa57 	bl	8007f84 <__retarget_lock_release_recursive>
 8009ad6:	e7f3      	b.n	8009ac0 <_vfiprintf_r+0x44>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	9309      	str	r3, [sp, #36]	; 0x24
 8009adc:	2320      	movs	r3, #32
 8009ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ae6:	2330      	movs	r3, #48	; 0x30
 8009ae8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c9c <_vfiprintf_r+0x220>
 8009aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009af0:	f04f 0901 	mov.w	r9, #1
 8009af4:	4623      	mov	r3, r4
 8009af6:	469a      	mov	sl, r3
 8009af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009afc:	b10a      	cbz	r2, 8009b02 <_vfiprintf_r+0x86>
 8009afe:	2a25      	cmp	r2, #37	; 0x25
 8009b00:	d1f9      	bne.n	8009af6 <_vfiprintf_r+0x7a>
 8009b02:	ebba 0b04 	subs.w	fp, sl, r4
 8009b06:	d00b      	beq.n	8009b20 <_vfiprintf_r+0xa4>
 8009b08:	465b      	mov	r3, fp
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f7ff ffa2 	bl	8009a58 <__sfputs_r>
 8009b14:	3001      	adds	r0, #1
 8009b16:	f000 80a9 	beq.w	8009c6c <_vfiprintf_r+0x1f0>
 8009b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b1c:	445a      	add	r2, fp
 8009b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8009b20:	f89a 3000 	ldrb.w	r3, [sl]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 80a1 	beq.w	8009c6c <_vfiprintf_r+0x1f0>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b34:	f10a 0a01 	add.w	sl, sl, #1
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	9307      	str	r3, [sp, #28]
 8009b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b40:	931a      	str	r3, [sp, #104]	; 0x68
 8009b42:	4654      	mov	r4, sl
 8009b44:	2205      	movs	r2, #5
 8009b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b4a:	4854      	ldr	r0, [pc, #336]	; (8009c9c <_vfiprintf_r+0x220>)
 8009b4c:	f7f6 fbd0 	bl	80002f0 <memchr>
 8009b50:	9a04      	ldr	r2, [sp, #16]
 8009b52:	b9d8      	cbnz	r0, 8009b8c <_vfiprintf_r+0x110>
 8009b54:	06d1      	lsls	r1, r2, #27
 8009b56:	bf44      	itt	mi
 8009b58:	2320      	movmi	r3, #32
 8009b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b5e:	0713      	lsls	r3, r2, #28
 8009b60:	bf44      	itt	mi
 8009b62:	232b      	movmi	r3, #43	; 0x2b
 8009b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b68:	f89a 3000 	ldrb.w	r3, [sl]
 8009b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b6e:	d015      	beq.n	8009b9c <_vfiprintf_r+0x120>
 8009b70:	9a07      	ldr	r2, [sp, #28]
 8009b72:	4654      	mov	r4, sl
 8009b74:	2000      	movs	r0, #0
 8009b76:	f04f 0c0a 	mov.w	ip, #10
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b80:	3b30      	subs	r3, #48	; 0x30
 8009b82:	2b09      	cmp	r3, #9
 8009b84:	d94d      	bls.n	8009c22 <_vfiprintf_r+0x1a6>
 8009b86:	b1b0      	cbz	r0, 8009bb6 <_vfiprintf_r+0x13a>
 8009b88:	9207      	str	r2, [sp, #28]
 8009b8a:	e014      	b.n	8009bb6 <_vfiprintf_r+0x13a>
 8009b8c:	eba0 0308 	sub.w	r3, r0, r8
 8009b90:	fa09 f303 	lsl.w	r3, r9, r3
 8009b94:	4313      	orrs	r3, r2
 8009b96:	9304      	str	r3, [sp, #16]
 8009b98:	46a2      	mov	sl, r4
 8009b9a:	e7d2      	b.n	8009b42 <_vfiprintf_r+0xc6>
 8009b9c:	9b03      	ldr	r3, [sp, #12]
 8009b9e:	1d19      	adds	r1, r3, #4
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	9103      	str	r1, [sp, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bfbb      	ittet	lt
 8009ba8:	425b      	neglt	r3, r3
 8009baa:	f042 0202 	orrlt.w	r2, r2, #2
 8009bae:	9307      	strge	r3, [sp, #28]
 8009bb0:	9307      	strlt	r3, [sp, #28]
 8009bb2:	bfb8      	it	lt
 8009bb4:	9204      	strlt	r2, [sp, #16]
 8009bb6:	7823      	ldrb	r3, [r4, #0]
 8009bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8009bba:	d10c      	bne.n	8009bd6 <_vfiprintf_r+0x15a>
 8009bbc:	7863      	ldrb	r3, [r4, #1]
 8009bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc0:	d134      	bne.n	8009c2c <_vfiprintf_r+0x1b0>
 8009bc2:	9b03      	ldr	r3, [sp, #12]
 8009bc4:	1d1a      	adds	r2, r3, #4
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	9203      	str	r2, [sp, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	bfb8      	it	lt
 8009bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bd2:	3402      	adds	r4, #2
 8009bd4:	9305      	str	r3, [sp, #20]
 8009bd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009cac <_vfiprintf_r+0x230>
 8009bda:	7821      	ldrb	r1, [r4, #0]
 8009bdc:	2203      	movs	r2, #3
 8009bde:	4650      	mov	r0, sl
 8009be0:	f7f6 fb86 	bl	80002f0 <memchr>
 8009be4:	b138      	cbz	r0, 8009bf6 <_vfiprintf_r+0x17a>
 8009be6:	9b04      	ldr	r3, [sp, #16]
 8009be8:	eba0 000a 	sub.w	r0, r0, sl
 8009bec:	2240      	movs	r2, #64	; 0x40
 8009bee:	4082      	lsls	r2, r0
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	3401      	adds	r4, #1
 8009bf4:	9304      	str	r3, [sp, #16]
 8009bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bfa:	4829      	ldr	r0, [pc, #164]	; (8009ca0 <_vfiprintf_r+0x224>)
 8009bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c00:	2206      	movs	r2, #6
 8009c02:	f7f6 fb75 	bl	80002f0 <memchr>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d03f      	beq.n	8009c8a <_vfiprintf_r+0x20e>
 8009c0a:	4b26      	ldr	r3, [pc, #152]	; (8009ca4 <_vfiprintf_r+0x228>)
 8009c0c:	bb1b      	cbnz	r3, 8009c56 <_vfiprintf_r+0x1da>
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	3307      	adds	r3, #7
 8009c12:	f023 0307 	bic.w	r3, r3, #7
 8009c16:	3308      	adds	r3, #8
 8009c18:	9303      	str	r3, [sp, #12]
 8009c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c1c:	443b      	add	r3, r7
 8009c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c20:	e768      	b.n	8009af4 <_vfiprintf_r+0x78>
 8009c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c26:	460c      	mov	r4, r1
 8009c28:	2001      	movs	r0, #1
 8009c2a:	e7a6      	b.n	8009b7a <_vfiprintf_r+0xfe>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	3401      	adds	r4, #1
 8009c30:	9305      	str	r3, [sp, #20]
 8009c32:	4619      	mov	r1, r3
 8009c34:	f04f 0c0a 	mov.w	ip, #10
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c3e:	3a30      	subs	r2, #48	; 0x30
 8009c40:	2a09      	cmp	r2, #9
 8009c42:	d903      	bls.n	8009c4c <_vfiprintf_r+0x1d0>
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0c6      	beq.n	8009bd6 <_vfiprintf_r+0x15a>
 8009c48:	9105      	str	r1, [sp, #20]
 8009c4a:	e7c4      	b.n	8009bd6 <_vfiprintf_r+0x15a>
 8009c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c50:	4604      	mov	r4, r0
 8009c52:	2301      	movs	r3, #1
 8009c54:	e7f0      	b.n	8009c38 <_vfiprintf_r+0x1bc>
 8009c56:	ab03      	add	r3, sp, #12
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	462a      	mov	r2, r5
 8009c5c:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <_vfiprintf_r+0x22c>)
 8009c5e:	a904      	add	r1, sp, #16
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7fd fc41 	bl	80074e8 <_printf_float>
 8009c66:	4607      	mov	r7, r0
 8009c68:	1c78      	adds	r0, r7, #1
 8009c6a:	d1d6      	bne.n	8009c1a <_vfiprintf_r+0x19e>
 8009c6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c6e:	07d9      	lsls	r1, r3, #31
 8009c70:	d405      	bmi.n	8009c7e <_vfiprintf_r+0x202>
 8009c72:	89ab      	ldrh	r3, [r5, #12]
 8009c74:	059a      	lsls	r2, r3, #22
 8009c76:	d402      	bmi.n	8009c7e <_vfiprintf_r+0x202>
 8009c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c7a:	f7fe f983 	bl	8007f84 <__retarget_lock_release_recursive>
 8009c7e:	89ab      	ldrh	r3, [r5, #12]
 8009c80:	065b      	lsls	r3, r3, #25
 8009c82:	f53f af1d 	bmi.w	8009ac0 <_vfiprintf_r+0x44>
 8009c86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c88:	e71c      	b.n	8009ac4 <_vfiprintf_r+0x48>
 8009c8a:	ab03      	add	r3, sp, #12
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	462a      	mov	r2, r5
 8009c90:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <_vfiprintf_r+0x22c>)
 8009c92:	a904      	add	r1, sp, #16
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7fd feaf 	bl	80079f8 <_printf_i>
 8009c9a:	e7e4      	b.n	8009c66 <_vfiprintf_r+0x1ea>
 8009c9c:	0800a1e4 	.word	0x0800a1e4
 8009ca0:	0800a1ee 	.word	0x0800a1ee
 8009ca4:	080074e9 	.word	0x080074e9
 8009ca8:	08009a59 	.word	0x08009a59
 8009cac:	0800a1ea 	.word	0x0800a1ea

08009cb0 <__swbuf_r>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	460e      	mov	r6, r1
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	b118      	cbz	r0, 8009cc2 <__swbuf_r+0x12>
 8009cba:	6a03      	ldr	r3, [r0, #32]
 8009cbc:	b90b      	cbnz	r3, 8009cc2 <__swbuf_r+0x12>
 8009cbe:	f7fe f849 	bl	8007d54 <__sinit>
 8009cc2:	69a3      	ldr	r3, [r4, #24]
 8009cc4:	60a3      	str	r3, [r4, #8]
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	071a      	lsls	r2, r3, #28
 8009cca:	d525      	bpl.n	8009d18 <__swbuf_r+0x68>
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	b31b      	cbz	r3, 8009d18 <__swbuf_r+0x68>
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	6922      	ldr	r2, [r4, #16]
 8009cd4:	1a98      	subs	r0, r3, r2
 8009cd6:	6963      	ldr	r3, [r4, #20]
 8009cd8:	b2f6      	uxtb	r6, r6
 8009cda:	4283      	cmp	r3, r0
 8009cdc:	4637      	mov	r7, r6
 8009cde:	dc04      	bgt.n	8009cea <__swbuf_r+0x3a>
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f7ff fd9e 	bl	8009824 <_fflush_r>
 8009ce8:	b9e0      	cbnz	r0, 8009d24 <__swbuf_r+0x74>
 8009cea:	68a3      	ldr	r3, [r4, #8]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	60a3      	str	r3, [r4, #8]
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	6022      	str	r2, [r4, #0]
 8009cf6:	701e      	strb	r6, [r3, #0]
 8009cf8:	6962      	ldr	r2, [r4, #20]
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d004      	beq.n	8009d0a <__swbuf_r+0x5a>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	07db      	lsls	r3, r3, #31
 8009d04:	d506      	bpl.n	8009d14 <__swbuf_r+0x64>
 8009d06:	2e0a      	cmp	r6, #10
 8009d08:	d104      	bne.n	8009d14 <__swbuf_r+0x64>
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f7ff fd89 	bl	8009824 <_fflush_r>
 8009d12:	b938      	cbnz	r0, 8009d24 <__swbuf_r+0x74>
 8009d14:	4638      	mov	r0, r7
 8009d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f000 f806 	bl	8009d2c <__swsetup_r>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d0d5      	beq.n	8009cd0 <__swbuf_r+0x20>
 8009d24:	f04f 37ff 	mov.w	r7, #4294967295
 8009d28:	e7f4      	b.n	8009d14 <__swbuf_r+0x64>
	...

08009d2c <__swsetup_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4b2a      	ldr	r3, [pc, #168]	; (8009dd8 <__swsetup_r+0xac>)
 8009d30:	4605      	mov	r5, r0
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	460c      	mov	r4, r1
 8009d36:	b118      	cbz	r0, 8009d40 <__swsetup_r+0x14>
 8009d38:	6a03      	ldr	r3, [r0, #32]
 8009d3a:	b90b      	cbnz	r3, 8009d40 <__swsetup_r+0x14>
 8009d3c:	f7fe f80a 	bl	8007d54 <__sinit>
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d46:	0718      	lsls	r0, r3, #28
 8009d48:	d422      	bmi.n	8009d90 <__swsetup_r+0x64>
 8009d4a:	06d9      	lsls	r1, r3, #27
 8009d4c:	d407      	bmi.n	8009d5e <__swsetup_r+0x32>
 8009d4e:	2309      	movs	r3, #9
 8009d50:	602b      	str	r3, [r5, #0]
 8009d52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5c:	e034      	b.n	8009dc8 <__swsetup_r+0x9c>
 8009d5e:	0758      	lsls	r0, r3, #29
 8009d60:	d512      	bpl.n	8009d88 <__swsetup_r+0x5c>
 8009d62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d64:	b141      	cbz	r1, 8009d78 <__swsetup_r+0x4c>
 8009d66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	d002      	beq.n	8009d74 <__swsetup_r+0x48>
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f7fe fefe 	bl	8008b70 <_free_r>
 8009d74:	2300      	movs	r3, #0
 8009d76:	6363      	str	r3, [r4, #52]	; 0x34
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d7e:	81a3      	strh	r3, [r4, #12]
 8009d80:	2300      	movs	r3, #0
 8009d82:	6063      	str	r3, [r4, #4]
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	6023      	str	r3, [r4, #0]
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	f043 0308 	orr.w	r3, r3, #8
 8009d8e:	81a3      	strh	r3, [r4, #12]
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	b94b      	cbnz	r3, 8009da8 <__swsetup_r+0x7c>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d9e:	d003      	beq.n	8009da8 <__swsetup_r+0x7c>
 8009da0:	4621      	mov	r1, r4
 8009da2:	4628      	mov	r0, r5
 8009da4:	f000 f884 	bl	8009eb0 <__smakebuf_r>
 8009da8:	89a0      	ldrh	r0, [r4, #12]
 8009daa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dae:	f010 0301 	ands.w	r3, r0, #1
 8009db2:	d00a      	beq.n	8009dca <__swsetup_r+0x9e>
 8009db4:	2300      	movs	r3, #0
 8009db6:	60a3      	str	r3, [r4, #8]
 8009db8:	6963      	ldr	r3, [r4, #20]
 8009dba:	425b      	negs	r3, r3
 8009dbc:	61a3      	str	r3, [r4, #24]
 8009dbe:	6923      	ldr	r3, [r4, #16]
 8009dc0:	b943      	cbnz	r3, 8009dd4 <__swsetup_r+0xa8>
 8009dc2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dc6:	d1c4      	bne.n	8009d52 <__swsetup_r+0x26>
 8009dc8:	bd38      	pop	{r3, r4, r5, pc}
 8009dca:	0781      	lsls	r1, r0, #30
 8009dcc:	bf58      	it	pl
 8009dce:	6963      	ldrpl	r3, [r4, #20]
 8009dd0:	60a3      	str	r3, [r4, #8]
 8009dd2:	e7f4      	b.n	8009dbe <__swsetup_r+0x92>
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	e7f7      	b.n	8009dc8 <__swsetup_r+0x9c>
 8009dd8:	24000068 	.word	0x24000068

08009ddc <_raise_r>:
 8009ddc:	291f      	cmp	r1, #31
 8009dde:	b538      	push	{r3, r4, r5, lr}
 8009de0:	4604      	mov	r4, r0
 8009de2:	460d      	mov	r5, r1
 8009de4:	d904      	bls.n	8009df0 <_raise_r+0x14>
 8009de6:	2316      	movs	r3, #22
 8009de8:	6003      	str	r3, [r0, #0]
 8009dea:	f04f 30ff 	mov.w	r0, #4294967295
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009df2:	b112      	cbz	r2, 8009dfa <_raise_r+0x1e>
 8009df4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009df8:	b94b      	cbnz	r3, 8009e0e <_raise_r+0x32>
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f000 f830 	bl	8009e60 <_getpid_r>
 8009e00:	462a      	mov	r2, r5
 8009e02:	4601      	mov	r1, r0
 8009e04:	4620      	mov	r0, r4
 8009e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e0a:	f000 b817 	b.w	8009e3c <_kill_r>
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d00a      	beq.n	8009e28 <_raise_r+0x4c>
 8009e12:	1c59      	adds	r1, r3, #1
 8009e14:	d103      	bne.n	8009e1e <_raise_r+0x42>
 8009e16:	2316      	movs	r3, #22
 8009e18:	6003      	str	r3, [r0, #0]
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	e7e7      	b.n	8009dee <_raise_r+0x12>
 8009e1e:	2400      	movs	r4, #0
 8009e20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e24:	4628      	mov	r0, r5
 8009e26:	4798      	blx	r3
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e7e0      	b.n	8009dee <_raise_r+0x12>

08009e2c <raise>:
 8009e2c:	4b02      	ldr	r3, [pc, #8]	; (8009e38 <raise+0xc>)
 8009e2e:	4601      	mov	r1, r0
 8009e30:	6818      	ldr	r0, [r3, #0]
 8009e32:	f7ff bfd3 	b.w	8009ddc <_raise_r>
 8009e36:	bf00      	nop
 8009e38:	24000068 	.word	0x24000068

08009e3c <_kill_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4d07      	ldr	r5, [pc, #28]	; (8009e5c <_kill_r+0x20>)
 8009e40:	2300      	movs	r3, #0
 8009e42:	4604      	mov	r4, r0
 8009e44:	4608      	mov	r0, r1
 8009e46:	4611      	mov	r1, r2
 8009e48:	602b      	str	r3, [r5, #0]
 8009e4a:	f7f7 fa61 	bl	8001310 <_kill>
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	d102      	bne.n	8009e58 <_kill_r+0x1c>
 8009e52:	682b      	ldr	r3, [r5, #0]
 8009e54:	b103      	cbz	r3, 8009e58 <_kill_r+0x1c>
 8009e56:	6023      	str	r3, [r4, #0]
 8009e58:	bd38      	pop	{r3, r4, r5, pc}
 8009e5a:	bf00      	nop
 8009e5c:	240004c4 	.word	0x240004c4

08009e60 <_getpid_r>:
 8009e60:	f7f7 ba4e 	b.w	8001300 <_getpid>

08009e64 <__swhatbuf_r>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	460c      	mov	r4, r1
 8009e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6c:	2900      	cmp	r1, #0
 8009e6e:	b096      	sub	sp, #88	; 0x58
 8009e70:	4615      	mov	r5, r2
 8009e72:	461e      	mov	r6, r3
 8009e74:	da0d      	bge.n	8009e92 <__swhatbuf_r+0x2e>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e7c:	f04f 0100 	mov.w	r1, #0
 8009e80:	bf0c      	ite	eq
 8009e82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e86:	2340      	movne	r3, #64	; 0x40
 8009e88:	2000      	movs	r0, #0
 8009e8a:	6031      	str	r1, [r6, #0]
 8009e8c:	602b      	str	r3, [r5, #0]
 8009e8e:	b016      	add	sp, #88	; 0x58
 8009e90:	bd70      	pop	{r4, r5, r6, pc}
 8009e92:	466a      	mov	r2, sp
 8009e94:	f000 f848 	bl	8009f28 <_fstat_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	dbec      	blt.n	8009e76 <__swhatbuf_r+0x12>
 8009e9c:	9901      	ldr	r1, [sp, #4]
 8009e9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009ea2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009ea6:	4259      	negs	r1, r3
 8009ea8:	4159      	adcs	r1, r3
 8009eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eae:	e7eb      	b.n	8009e88 <__swhatbuf_r+0x24>

08009eb0 <__smakebuf_r>:
 8009eb0:	898b      	ldrh	r3, [r1, #12]
 8009eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009eb4:	079d      	lsls	r5, r3, #30
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	460c      	mov	r4, r1
 8009eba:	d507      	bpl.n	8009ecc <__smakebuf_r+0x1c>
 8009ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	6123      	str	r3, [r4, #16]
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	6163      	str	r3, [r4, #20]
 8009ec8:	b002      	add	sp, #8
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	ab01      	add	r3, sp, #4
 8009ece:	466a      	mov	r2, sp
 8009ed0:	f7ff ffc8 	bl	8009e64 <__swhatbuf_r>
 8009ed4:	9900      	ldr	r1, [sp, #0]
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f7fe febd 	bl	8008c58 <_malloc_r>
 8009ede:	b948      	cbnz	r0, 8009ef4 <__smakebuf_r+0x44>
 8009ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee4:	059a      	lsls	r2, r3, #22
 8009ee6:	d4ef      	bmi.n	8009ec8 <__smakebuf_r+0x18>
 8009ee8:	f023 0303 	bic.w	r3, r3, #3
 8009eec:	f043 0302 	orr.w	r3, r3, #2
 8009ef0:	81a3      	strh	r3, [r4, #12]
 8009ef2:	e7e3      	b.n	8009ebc <__smakebuf_r+0xc>
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	6020      	str	r0, [r4, #0]
 8009ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	9b00      	ldr	r3, [sp, #0]
 8009f00:	6163      	str	r3, [r4, #20]
 8009f02:	9b01      	ldr	r3, [sp, #4]
 8009f04:	6120      	str	r0, [r4, #16]
 8009f06:	b15b      	cbz	r3, 8009f20 <__smakebuf_r+0x70>
 8009f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f000 f81d 	bl	8009f4c <_isatty_r>
 8009f12:	b128      	cbz	r0, 8009f20 <__smakebuf_r+0x70>
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	f023 0303 	bic.w	r3, r3, #3
 8009f1a:	f043 0301 	orr.w	r3, r3, #1
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	431d      	orrs	r5, r3
 8009f24:	81a5      	strh	r5, [r4, #12]
 8009f26:	e7cf      	b.n	8009ec8 <__smakebuf_r+0x18>

08009f28 <_fstat_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	; (8009f48 <_fstat_r+0x20>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	4611      	mov	r1, r2
 8009f34:	602b      	str	r3, [r5, #0]
 8009f36:	f7f7 fa4a 	bl	80013ce <_fstat>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d102      	bne.n	8009f44 <_fstat_r+0x1c>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	b103      	cbz	r3, 8009f44 <_fstat_r+0x1c>
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	bf00      	nop
 8009f48:	240004c4 	.word	0x240004c4

08009f4c <_isatty_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d06      	ldr	r5, [pc, #24]	; (8009f68 <_isatty_r+0x1c>)
 8009f50:	2300      	movs	r3, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	f7f7 fa49 	bl	80013ee <_isatty>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_isatty_r+0x1a>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_isatty_r+0x1a>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	240004c4 	.word	0x240004c4

08009f6c <_init>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	bf00      	nop
 8009f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f72:	bc08      	pop	{r3}
 8009f74:	469e      	mov	lr, r3
 8009f76:	4770      	bx	lr

08009f78 <_fini>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	bf00      	nop
 8009f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7e:	bc08      	pop	{r3}
 8009f80:	469e      	mov	lr, r3
 8009f82:	4770      	bx	lr
